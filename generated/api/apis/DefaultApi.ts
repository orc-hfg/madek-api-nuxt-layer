/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI
 * OpenAPI
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiV2AppSettingsGet200Response,
  ApiV2AuthInfoGet200Response,
  ApiV2CollectionCollectionIdCustomUrlPostRequest,
  ApiV2CollectionCollectionIdCustomUrlPut200Response,
  ApiV2CollectionCollectionIdCustomUrlPutRequest,
  ApiV2CollectionCollectionIdEditSessionsPost200Response,
  ApiV2CollectionCollectionIdFullTextPutRequest,
  ApiV2CollectionCollectionIdMediaEntryArcMediaEntryIdPutRequest,
  ApiV2CollectionCollectionIdMediaEntryArcsGet200Response,
  ApiV2CollectionCollectionIdMetaDatumMetaKeyIdJsonPutRequest,
  ApiV2CollectionCollectionIdMetaDatumMetaKeyIdTextPutRequest,
  ApiV2CollectionCollectionIdPermsGet200Response,
  ApiV2CollectionCollectionIdPermsGroupGroupIdGet200Response,
  ApiV2CollectionCollectionIdPermsGroupGroupIdPostRequest,
  ApiV2CollectionCollectionIdPermsResourcesGet200Response,
  ApiV2CollectionCollectionIdPermsResourcesPutRequest,
  ApiV2CollectionCollectionIdPermsResourcesPutRequest1,
  ApiV2CollectionCollectionIdPermsUserUserIdGet200Response,
  ApiV2CollectionCollectionIdPermsUserUserIdPostRequest,
  ApiV2CollectionCollectionIdPutRequest,
  ApiV2CollectionParentIdCollectionArcChildIdPutRequest,
  ApiV2CollectionPost200Response,
  ApiV2CollectionPostRequest,
  ApiV2CollectionsGet200Response,
  ApiV2ContextKeysIdGet200Response,
  ApiV2ContextsIdGet200Response,
  ApiV2FavoriteCollectionsGet200Response,
  ApiV2FavoriteMediaEntriesGet200Response,
  ApiV2GroupsGet200Response,
  ApiV2GroupsIdGet200Response,
  ApiV2KeywordsGet200Response,
  ApiV2KeywordsIdGet200Response,
  ApiV2MediaEntriesGet200Response,
  ApiV2MediaEntriesRelatedDataGet200Response,
  ApiV2MediaEntryMediaEntryIdFavoriteGet200Response,
  ApiV2MediaEntryMediaEntryIdGet200Response,
  ApiV2MediaEntryMediaEntryIdMediaFileGet200Response,
  ApiV2MediaEntryMediaEntryIdPermsGroupGroupIdGet200Response,
  ApiV2MediaEntryMediaEntryIdPermsGroupGroupIdPostRequest,
  ApiV2MediaEntryMediaEntryIdPermsResourcesGet200Response,
  ApiV2MediaEntryMediaEntryIdPermsResourcesPutRequest,
  ApiV2MediaEntryMediaEntryIdPermsResourcesPutRequest1,
  ApiV2MediaEntryMediaEntryIdPermsUserUserIdGet200Response,
  ApiV2MediaEntryMediaEntryIdPermsUserUserIdPostRequest,
  ApiV2MediaEntryMediaEntryIdPreviewGet200Response,
  ApiV2MediaEntryMediaEntryIdPublishPut406Response,
  ApiV2MetaKeysGet200Response,
  ApiV2MetaKeysIdGet200Response,
  ApiV2MetaKeysIdGet404Response,
  ApiV2PeopleGet200Response,
  ApiV2PeopleIdGet200Response,
  ApiV2RolesGet200Response,
  ApiV2RolesIdGet200Response,
  ApiV2UsageTermsIdGet200Response,
  ApiV2UsersGet200Response,
  ApiV2UsersIdGet200Response,
  ApiV2VocabulariesGet200Response,
  ApiV2VocabulariesIdGet200Response,
  ApiV2WorkflowsIdPutRequest,
  ApiV2WorkflowsPost200Response,
  ApiV2WorkflowsPostRequest,
} from '../models/index';
import {
    ApiV2AppSettingsGet200ResponseFromJSON,
    ApiV2AppSettingsGet200ResponseToJSON,
    ApiV2AuthInfoGet200ResponseFromJSON,
    ApiV2AuthInfoGet200ResponseToJSON,
    ApiV2CollectionCollectionIdCustomUrlPostRequestFromJSON,
    ApiV2CollectionCollectionIdCustomUrlPostRequestToJSON,
    ApiV2CollectionCollectionIdCustomUrlPut200ResponseFromJSON,
    ApiV2CollectionCollectionIdCustomUrlPut200ResponseToJSON,
    ApiV2CollectionCollectionIdCustomUrlPutRequestFromJSON,
    ApiV2CollectionCollectionIdCustomUrlPutRequestToJSON,
    ApiV2CollectionCollectionIdEditSessionsPost200ResponseFromJSON,
    ApiV2CollectionCollectionIdEditSessionsPost200ResponseToJSON,
    ApiV2CollectionCollectionIdFullTextPutRequestFromJSON,
    ApiV2CollectionCollectionIdFullTextPutRequestToJSON,
    ApiV2CollectionCollectionIdMediaEntryArcMediaEntryIdPutRequestFromJSON,
    ApiV2CollectionCollectionIdMediaEntryArcMediaEntryIdPutRequestToJSON,
    ApiV2CollectionCollectionIdMediaEntryArcsGet200ResponseFromJSON,
    ApiV2CollectionCollectionIdMediaEntryArcsGet200ResponseToJSON,
    ApiV2CollectionCollectionIdMetaDatumMetaKeyIdJsonPutRequestFromJSON,
    ApiV2CollectionCollectionIdMetaDatumMetaKeyIdJsonPutRequestToJSON,
    ApiV2CollectionCollectionIdMetaDatumMetaKeyIdTextPutRequestFromJSON,
    ApiV2CollectionCollectionIdMetaDatumMetaKeyIdTextPutRequestToJSON,
    ApiV2CollectionCollectionIdPermsGet200ResponseFromJSON,
    ApiV2CollectionCollectionIdPermsGet200ResponseToJSON,
    ApiV2CollectionCollectionIdPermsGroupGroupIdGet200ResponseFromJSON,
    ApiV2CollectionCollectionIdPermsGroupGroupIdGet200ResponseToJSON,
    ApiV2CollectionCollectionIdPermsGroupGroupIdPostRequestFromJSON,
    ApiV2CollectionCollectionIdPermsGroupGroupIdPostRequestToJSON,
    ApiV2CollectionCollectionIdPermsResourcesGet200ResponseFromJSON,
    ApiV2CollectionCollectionIdPermsResourcesGet200ResponseToJSON,
    ApiV2CollectionCollectionIdPermsResourcesPutRequestFromJSON,
    ApiV2CollectionCollectionIdPermsResourcesPutRequestToJSON,
    ApiV2CollectionCollectionIdPermsResourcesPutRequest1FromJSON,
    ApiV2CollectionCollectionIdPermsResourcesPutRequest1ToJSON,
    ApiV2CollectionCollectionIdPermsUserUserIdGet200ResponseFromJSON,
    ApiV2CollectionCollectionIdPermsUserUserIdGet200ResponseToJSON,
    ApiV2CollectionCollectionIdPermsUserUserIdPostRequestFromJSON,
    ApiV2CollectionCollectionIdPermsUserUserIdPostRequestToJSON,
    ApiV2CollectionCollectionIdPutRequestFromJSON,
    ApiV2CollectionCollectionIdPutRequestToJSON,
    ApiV2CollectionParentIdCollectionArcChildIdPutRequestFromJSON,
    ApiV2CollectionParentIdCollectionArcChildIdPutRequestToJSON,
    ApiV2CollectionPost200ResponseFromJSON,
    ApiV2CollectionPost200ResponseToJSON,
    ApiV2CollectionPostRequestFromJSON,
    ApiV2CollectionPostRequestToJSON,
    ApiV2CollectionsGet200ResponseFromJSON,
    ApiV2CollectionsGet200ResponseToJSON,
    ApiV2ContextKeysIdGet200ResponseFromJSON,
    ApiV2ContextKeysIdGet200ResponseToJSON,
    ApiV2ContextsIdGet200ResponseFromJSON,
    ApiV2ContextsIdGet200ResponseToJSON,
    ApiV2FavoriteCollectionsGet200ResponseFromJSON,
    ApiV2FavoriteCollectionsGet200ResponseToJSON,
    ApiV2FavoriteMediaEntriesGet200ResponseFromJSON,
    ApiV2FavoriteMediaEntriesGet200ResponseToJSON,
    ApiV2GroupsGet200ResponseFromJSON,
    ApiV2GroupsGet200ResponseToJSON,
    ApiV2GroupsIdGet200ResponseFromJSON,
    ApiV2GroupsIdGet200ResponseToJSON,
    ApiV2KeywordsGet200ResponseFromJSON,
    ApiV2KeywordsGet200ResponseToJSON,
    ApiV2KeywordsIdGet200ResponseFromJSON,
    ApiV2KeywordsIdGet200ResponseToJSON,
    ApiV2MediaEntriesGet200ResponseFromJSON,
    ApiV2MediaEntriesGet200ResponseToJSON,
    ApiV2MediaEntriesRelatedDataGet200ResponseFromJSON,
    ApiV2MediaEntriesRelatedDataGet200ResponseToJSON,
    ApiV2MediaEntryMediaEntryIdFavoriteGet200ResponseFromJSON,
    ApiV2MediaEntryMediaEntryIdFavoriteGet200ResponseToJSON,
    ApiV2MediaEntryMediaEntryIdGet200ResponseFromJSON,
    ApiV2MediaEntryMediaEntryIdGet200ResponseToJSON,
    ApiV2MediaEntryMediaEntryIdMediaFileGet200ResponseFromJSON,
    ApiV2MediaEntryMediaEntryIdMediaFileGet200ResponseToJSON,
    ApiV2MediaEntryMediaEntryIdPermsGroupGroupIdGet200ResponseFromJSON,
    ApiV2MediaEntryMediaEntryIdPermsGroupGroupIdGet200ResponseToJSON,
    ApiV2MediaEntryMediaEntryIdPermsGroupGroupIdPostRequestFromJSON,
    ApiV2MediaEntryMediaEntryIdPermsGroupGroupIdPostRequestToJSON,
    ApiV2MediaEntryMediaEntryIdPermsResourcesGet200ResponseFromJSON,
    ApiV2MediaEntryMediaEntryIdPermsResourcesGet200ResponseToJSON,
    ApiV2MediaEntryMediaEntryIdPermsResourcesPutRequestFromJSON,
    ApiV2MediaEntryMediaEntryIdPermsResourcesPutRequestToJSON,
    ApiV2MediaEntryMediaEntryIdPermsResourcesPutRequest1FromJSON,
    ApiV2MediaEntryMediaEntryIdPermsResourcesPutRequest1ToJSON,
    ApiV2MediaEntryMediaEntryIdPermsUserUserIdGet200ResponseFromJSON,
    ApiV2MediaEntryMediaEntryIdPermsUserUserIdGet200ResponseToJSON,
    ApiV2MediaEntryMediaEntryIdPermsUserUserIdPostRequestFromJSON,
    ApiV2MediaEntryMediaEntryIdPermsUserUserIdPostRequestToJSON,
    ApiV2MediaEntryMediaEntryIdPreviewGet200ResponseFromJSON,
    ApiV2MediaEntryMediaEntryIdPreviewGet200ResponseToJSON,
    ApiV2MediaEntryMediaEntryIdPublishPut406ResponseFromJSON,
    ApiV2MediaEntryMediaEntryIdPublishPut406ResponseToJSON,
    ApiV2MetaKeysGet200ResponseFromJSON,
    ApiV2MetaKeysGet200ResponseToJSON,
    ApiV2MetaKeysIdGet200ResponseFromJSON,
    ApiV2MetaKeysIdGet200ResponseToJSON,
    ApiV2MetaKeysIdGet404ResponseFromJSON,
    ApiV2MetaKeysIdGet404ResponseToJSON,
    ApiV2PeopleGet200ResponseFromJSON,
    ApiV2PeopleGet200ResponseToJSON,
    ApiV2PeopleIdGet200ResponseFromJSON,
    ApiV2PeopleIdGet200ResponseToJSON,
    ApiV2RolesGet200ResponseFromJSON,
    ApiV2RolesGet200ResponseToJSON,
    ApiV2RolesIdGet200ResponseFromJSON,
    ApiV2RolesIdGet200ResponseToJSON,
    ApiV2UsageTermsIdGet200ResponseFromJSON,
    ApiV2UsageTermsIdGet200ResponseToJSON,
    ApiV2UsersGet200ResponseFromJSON,
    ApiV2UsersGet200ResponseToJSON,
    ApiV2UsersIdGet200ResponseFromJSON,
    ApiV2UsersIdGet200ResponseToJSON,
    ApiV2VocabulariesGet200ResponseFromJSON,
    ApiV2VocabulariesGet200ResponseToJSON,
    ApiV2VocabulariesIdGet200ResponseFromJSON,
    ApiV2VocabulariesIdGet200ResponseToJSON,
    ApiV2WorkflowsIdPutRequestFromJSON,
    ApiV2WorkflowsIdPutRequestToJSON,
    ApiV2WorkflowsPost200ResponseFromJSON,
    ApiV2WorkflowsPost200ResponseToJSON,
    ApiV2WorkflowsPostRequestFromJSON,
    ApiV2WorkflowsPostRequestToJSON,
} from '../models/index';

export interface ApiV2CollectionCollectionArcsGetRequest {
    childId?: string;
    parentId?: string;
    page?: number;
    count?: number;
}

export interface ApiV2CollectionCollectionArcsIdGetRequest {
    id: string;
}

export interface ApiV2CollectionCollectionIdCustomUrlDeleteRequest {
    collectionId: string;
}

export interface ApiV2CollectionCollectionIdCustomUrlGetRequest {
    collectionId: string;
}

export interface ApiV2CollectionCollectionIdCustomUrlPostOperationRequest {
    collectionId: string;
    body: ApiV2CollectionCollectionIdCustomUrlPostRequest;
}

export interface ApiV2CollectionCollectionIdCustomUrlPutOperationRequest {
    collectionId: string;
    body: ApiV2CollectionCollectionIdCustomUrlPutRequest;
}

export interface ApiV2CollectionCollectionIdDeleteRequest {
    collectionId: string;
}

export interface ApiV2CollectionCollectionIdEditSessionsGetRequest {
    collectionId: string;
}

export interface ApiV2CollectionCollectionIdEditSessionsPostRequest {
    collectionId: string;
}

export interface ApiV2CollectionCollectionIdFavoriteDeleteRequest {
    collectionId: string;
}

export interface ApiV2CollectionCollectionIdFavoriteGetRequest {
    collectionId: string;
}

export interface ApiV2CollectionCollectionIdFavoritePostRequest {
    collectionId: string;
}

export interface ApiV2CollectionCollectionIdFullTextDeleteRequest {
    collectionId: string;
}

export interface ApiV2CollectionCollectionIdFullTextGetRequest {
    collectionId: string;
}

export interface ApiV2CollectionCollectionIdFullTextPostRequest {
    collectionId: string;
    body: ApiV2CollectionCollectionIdFullTextPutRequest;
}

export interface ApiV2CollectionCollectionIdFullTextPutOperationRequest {
    collectionId: string;
    body: ApiV2CollectionCollectionIdFullTextPutRequest;
}

export interface ApiV2CollectionCollectionIdGetRequest {
    collectionId: string;
}

export interface ApiV2CollectionCollectionIdMediaEntryArcMediaEntryIdDeleteRequest {
    collectionId: string;
    mediaEntryId: string;
}

export interface ApiV2CollectionCollectionIdMediaEntryArcMediaEntryIdPostRequest {
    collectionId: string;
    mediaEntryId: string;
    body: ApiV2CollectionCollectionIdMediaEntryArcMediaEntryIdPutRequest;
}

export interface ApiV2CollectionCollectionIdMediaEntryArcMediaEntryIdPutOperationRequest {
    collectionId: string;
    mediaEntryId: string;
    body: ApiV2CollectionCollectionIdMediaEntryArcMediaEntryIdPutRequest;
}

export interface ApiV2CollectionCollectionIdMediaEntryArcsGetRequest {
    collectionId: string;
}

export interface ApiV2CollectionCollectionIdMetaDataGetRequest {
    collectionId: string;
    updatedAfter?: string;
    metaKeys?: string;
}

export interface ApiV2CollectionCollectionIdMetaDataRelatedGetRequest {
    collectionId: string;
    updatedAfter?: string;
    metaKeys?: string;
}

export interface ApiV2CollectionCollectionIdMetaDatumMetaKeyIdDeleteRequest {
    collectionId: string;
    metaKeyId: string;
}

export interface ApiV2CollectionCollectionIdMetaDatumMetaKeyIdGetRequest {
    collectionId: string;
    metaKeyId: string;
}

export interface ApiV2CollectionCollectionIdMetaDatumMetaKeyIdJsonPostRequest {
    collectionId: string;
    metaKeyId: string;
    body: ApiV2CollectionCollectionIdMetaDatumMetaKeyIdJsonPutRequest;
}

export interface ApiV2CollectionCollectionIdMetaDatumMetaKeyIdJsonPutOperationRequest {
    collectionId: string;
    metaKeyId: string;
    body: ApiV2CollectionCollectionIdMetaDatumMetaKeyIdJsonPutRequest;
}

export interface ApiV2CollectionCollectionIdMetaDatumMetaKeyIdKeywordGetRequest {
    collectionId: string;
    metaKeyId: string;
}

export interface ApiV2CollectionCollectionIdMetaDatumMetaKeyIdKeywordKeywordIdDeleteRequest {
    collectionId: string;
    metaKeyId: string;
    keywordId: string;
}

export interface ApiV2CollectionCollectionIdMetaDatumMetaKeyIdKeywordKeywordIdPostRequest {
    collectionId: string;
    metaKeyId: string;
    keywordId: string;
}

export interface ApiV2CollectionCollectionIdMetaDatumMetaKeyIdPeopleGetRequest {
    collectionId: string;
    metaKeyId: string;
}

export interface ApiV2CollectionCollectionIdMetaDatumMetaKeyIdPeoplePersonIdDeleteRequest {
    collectionId: string;
    metaKeyId: string;
    personId: string;
}

export interface ApiV2CollectionCollectionIdMetaDatumMetaKeyIdPeoplePersonIdPostRequest {
    collectionId: string;
    metaKeyId: string;
    personId: string;
}

export interface ApiV2CollectionCollectionIdMetaDatumMetaKeyIdRoleRoleIdPostRequest {
    mediaEntryId: string;
    metaKeyId: string;
    roleId: string;
}

export interface ApiV2CollectionCollectionIdMetaDatumMetaKeyIdTextDatePostRequest {
    collectionId: string;
    metaKeyId: string;
    body: ApiV2CollectionCollectionIdMetaDatumMetaKeyIdTextPutRequest;
}

export interface ApiV2CollectionCollectionIdMetaDatumMetaKeyIdTextDatePutRequest {
    collectionId: string;
    metaKeyId: string;
    body: ApiV2CollectionCollectionIdMetaDatumMetaKeyIdTextPutRequest;
}

export interface ApiV2CollectionCollectionIdMetaDatumMetaKeyIdTextPostRequest {
    collectionId: string;
    metaKeyId: string;
    body: ApiV2CollectionCollectionIdMetaDatumMetaKeyIdTextPutRequest;
}

export interface ApiV2CollectionCollectionIdMetaDatumMetaKeyIdTextPutOperationRequest {
    collectionId: string;
    metaKeyId: string;
    body: ApiV2CollectionCollectionIdMetaDatumMetaKeyIdTextPutRequest;
}

export interface ApiV2CollectionCollectionIdPermsGetRequest {
    collectionId: string;
}

export interface ApiV2CollectionCollectionIdPermsGroupGroupIdDeleteRequest {
    collectionId: string;
    groupId: string;
}

export interface ApiV2CollectionCollectionIdPermsGroupGroupIdGetRequest {
    collectionId: string;
    groupId: string;
}

export interface ApiV2CollectionCollectionIdPermsGroupGroupIdPermNamePermValPutRequest {
    collectionId: string;
    groupId: string;
    permName: ApiV2CollectionCollectionIdPermsGroupGroupIdPermNamePermValPutPermNameEnum;
    permVal: boolean;
}

export interface ApiV2CollectionCollectionIdPermsGroupGroupIdPostOperationRequest {
    collectionId: string;
    groupId: string;
    body: ApiV2CollectionCollectionIdPermsGroupGroupIdPostRequest;
}

export interface ApiV2CollectionCollectionIdPermsGroupsGetRequest {
    collectionId: string;
}

export interface ApiV2CollectionCollectionIdPermsResourcePermNamePermValPutRequest {
    collectionId: string;
    permName: ApiV2CollectionCollectionIdPermsResourcePermNamePermValPutPermNameEnum;
    permVal: boolean;
}

export interface ApiV2CollectionCollectionIdPermsResourcesGetRequest {
    collectionId: string;
}

export interface ApiV2CollectionCollectionIdPermsResourcesPutOperationRequest {
    collectionId: string;
    body: ApiV2CollectionCollectionIdPermsResourcesPutRequest;
}

export interface ApiV2CollectionCollectionIdPermsUserUserIdDeleteRequest {
    collectionId: string;
    userId: string;
}

export interface ApiV2CollectionCollectionIdPermsUserUserIdGetRequest {
    collectionId: string;
    userId: string;
}

export interface ApiV2CollectionCollectionIdPermsUserUserIdPermNamePermValPutRequest {
    collectionId: string;
    userId: string;
    permName: ApiV2CollectionCollectionIdPermsUserUserIdPermNamePermValPutPermNameEnum;
    permVal: boolean;
}

export interface ApiV2CollectionCollectionIdPermsUserUserIdPostOperationRequest {
    collectionId: string;
    userId: string;
    body: ApiV2CollectionCollectionIdPermsUserUserIdPostRequest;
}

export interface ApiV2CollectionCollectionIdPermsUsersGetRequest {
    collectionId: string;
}

export interface ApiV2CollectionCollectionIdPutOperationRequest {
    collectionId: string;
    body: ApiV2CollectionCollectionIdPutRequest;
}

export interface ApiV2CollectionMediaEntryArcsGetRequest {
    collectionId?: string;
    mediaEntryId?: string;
}

export interface ApiV2CollectionMediaEntryArcsIdGetRequest {
    id: string;
}

export interface ApiV2CollectionParentIdCollectionArcChildIdDeleteRequest {
    parentId: string;
    childId: string;
}

export interface ApiV2CollectionParentIdCollectionArcChildIdGetRequest {
    parentId: string;
    childId: string;
}

export interface ApiV2CollectionParentIdCollectionArcChildIdPostRequest {
    parentId: string;
    childId: string;
    body: ApiV2CollectionParentIdCollectionArcChildIdPutRequest;
}

export interface ApiV2CollectionParentIdCollectionArcChildIdPutOperationRequest {
    parentId: string;
    childId: string;
    body: ApiV2CollectionParentIdCollectionArcChildIdPutRequest;
}

export interface ApiV2CollectionPostOperationRequest {
    body: ApiV2CollectionPostRequest;
}

export interface ApiV2CollectionsGetRequest {
    meEditPermission?: boolean;
    count?: number;
    meEditMetadataAndRelations?: boolean;
    meGetMetadataAndPreviews?: boolean;
    collectionId?: string;
    clipboardUserId?: string;
    order?: string;
    responsibleDelegationId?: string;
    page?: number;
    workflowId?: string;
    responsibleUserId?: string;
    creatorId?: string;
    fullData?: boolean;
    publicGetMetadataAndPreviews?: boolean;
}

export interface ApiV2ContextKeysGetRequest {
    id?: string;
    contextId?: string;
    metaKeyId?: string;
    isRequired?: boolean;
}

export interface ApiV2ContextKeysIdGetRequest {
    id: string;
}

export interface ApiV2ContextsIdGetRequest {
    id: string;
}

export interface ApiV2CustomUrlsGetRequest {
    fullData?: boolean;
    id?: string;
    mediaEntryId?: string;
    collectionId?: string;
}

export interface ApiV2CustomUrlsIdGetRequest {
    id: string;
}

export interface ApiV2EditSessionsGetRequest {
    fullData?: boolean;
    page?: number;
    count?: number;
    id?: string;
    mediaEntryId?: string;
    collectionId?: string;
}

export interface ApiV2EditSessionsIdGetRequest {
    id: string;
}

export interface ApiV2FullTextsGetRequest {
    fullData?: boolean;
    mediaResourceId?: string;
    text?: string;
    page?: string;
    count?: string;
}

export interface ApiV2FullTextsMediaResourceIdGetRequest {
    mediaResourceId: string;
}

export interface ApiV2GroupsGetRequest {
    institutionalId?: string;
    institutionalName?: string;
    searchable?: string;
    id?: string;
    count?: number;
    personId?: string;
    name?: string;
    type?: string;
    page?: number;
    fullData?: boolean;
}

export interface ApiV2GroupsIdGetRequest {
    id: string;
}

export interface ApiV2KeywordsGetRequest {
    id?: string;
    metaKeyId?: string;
    term?: string;
    description?: string;
    rdfClass?: string;
    page?: number;
    count?: number;
}

export interface ApiV2KeywordsIdGetRequest {
    id: string;
}

export interface ApiV2MediaEntriesGetRequest {
    meEditMetadata?: boolean;
    publicGetFullSize?: boolean;
    meEditPermissions?: boolean;
    count?: number;
    filterBy?: string;
    meGetMetadataAndPreviews?: boolean;
    meGetFullSize?: boolean;
    collectionId?: string;
    order?: string;
    page?: number;
    fullData?: boolean;
    publicGetMetadataAndPreviews?: boolean;
}

export interface ApiV2MediaEntriesRelatedDataGetRequest {
    meEditMetadata?: boolean;
    publicGetFullSize?: boolean;
    meEditPermissions?: boolean;
    count?: number;
    filterBy?: string;
    meGetMetadataAndPreviews?: boolean;
    meGetFullSize?: boolean;
    collectionId?: string;
    order?: string;
    page?: number;
    fullData?: boolean;
    publicGetMetadataAndPreviews?: boolean;
}

export interface ApiV2MediaEntryMediaEntryIdCustomUrlDeleteRequest {
    mediaEntryId: string;
}

export interface ApiV2MediaEntryMediaEntryIdCustomUrlGetRequest {
    mediaEntryId: string;
}

export interface ApiV2MediaEntryMediaEntryIdCustomUrlPostRequest {
    mediaEntryId: string;
    body: ApiV2CollectionCollectionIdCustomUrlPostRequest;
}

export interface ApiV2MediaEntryMediaEntryIdCustomUrlPutRequest {
    mediaEntryId: string;
    body: ApiV2CollectionCollectionIdCustomUrlPutRequest;
}

export interface ApiV2MediaEntryMediaEntryIdDeleteRequest {
    mediaEntryId: string;
}

export interface ApiV2MediaEntryMediaEntryIdEditSessionsGetRequest {
    mediaEntryId: string;
}

export interface ApiV2MediaEntryMediaEntryIdEditSessionsPostRequest {
    mediaEntryId: string;
}

export interface ApiV2MediaEntryMediaEntryIdFavoriteDeleteRequest {
    mediaEntryId: string;
}

export interface ApiV2MediaEntryMediaEntryIdFavoriteGetRequest {
    mediaEntryId: string;
}

export interface ApiV2MediaEntryMediaEntryIdFavoritePostRequest {
    mediaEntryId: string;
}

export interface ApiV2MediaEntryMediaEntryIdFullTextDeleteRequest {
    mediaEntryId: string;
}

export interface ApiV2MediaEntryMediaEntryIdFullTextGetRequest {
    mediaEntryId: string;
}

export interface ApiV2MediaEntryMediaEntryIdFullTextPostRequest {
    mediaEntryId: string;
    body: ApiV2CollectionCollectionIdFullTextPutRequest;
}

export interface ApiV2MediaEntryMediaEntryIdFullTextPutRequest {
    mediaEntryId: string;
    body: ApiV2CollectionCollectionIdFullTextPutRequest;
}

export interface ApiV2MediaEntryMediaEntryIdGetRequest {
    mediaEntryId: string;
}

export interface ApiV2MediaEntryMediaEntryIdMediaFileDataStreamGetRequest {
    mediaEntryId: string;
}

export interface ApiV2MediaEntryMediaEntryIdMediaFileGetRequest {
    mediaEntryId: string;
}

export interface ApiV2MediaEntryMediaEntryIdMetaDataGetRequest {
    mediaEntryId: string;
    updatedAfter?: string;
    metaKeys?: string;
}

export interface ApiV2MediaEntryMediaEntryIdMetaDataRelatedGetRequest {
    mediaEntryId: string;
    updatedAfter?: string;
    metaKeys?: string;
}

export interface ApiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdDeleteRequest {
    mediaEntryId: string;
    metaKeyId: string;
}

export interface ApiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdGetRequest {
    mediaEntryId: string;
    metaKeyId: string;
}

export interface ApiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdJsonPostRequest {
    mediaEntryId: string;
    metaKeyId: string;
    body: ApiV2CollectionCollectionIdMetaDatumMetaKeyIdJsonPutRequest;
}

export interface ApiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdJsonPutRequest {
    mediaEntryId: string;
    metaKeyId: string;
    body: ApiV2CollectionCollectionIdMetaDatumMetaKeyIdJsonPutRequest;
}

export interface ApiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdKeywordGetRequest {
    mediaEntryId: string;
    metaKeyId: string;
}

export interface ApiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdKeywordKeywordIdDeleteRequest {
    mediaEntryId: string;
    metaKeyId: string;
    keywordId: string;
}

export interface ApiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdKeywordKeywordIdPostRequest {
    mediaEntryId: string;
    metaKeyId: string;
    keywordId: string;
}

export interface ApiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdPeopleGetRequest {
    mediaEntryId: string;
    metaKeyId: string;
}

export interface ApiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdPeoplePersonIdDeleteRequest {
    mediaEntryId: string;
    metaKeyId: string;
    personId: string;
}

export interface ApiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdPeoplePersonIdPostRequest {
    mediaEntryId: string;
    metaKeyId: string;
    personId: string;
}

export interface ApiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdRoleGetRequest {
    mediaEntryId: string;
    metaKeyId: string;
}

export interface ApiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdRoleRoleIdPersonIdDeleteRequest {
    mediaEntryId: string;
    metaKeyId: string;
    roleId: string;
    personId: string;
}

export interface ApiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdRoleRoleIdPersonIdPositionPostRequest {
    mediaEntryId: string;
    metaKeyId: string;
    roleId: string;
    personId: string;
    position: number;
}

export interface ApiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdTextDatePostRequest {
    mediaEntryId: string;
    metaKeyId: string;
    body: ApiV2CollectionCollectionIdMetaDatumMetaKeyIdTextPutRequest;
}

export interface ApiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdTextDatePutRequest {
    mediaEntryId: string;
    metaKeyId: string;
    body: ApiV2CollectionCollectionIdMetaDatumMetaKeyIdTextPutRequest;
}

export interface ApiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdTextPostRequest {
    mediaEntryId: string;
    metaKeyId: string;
    body: ApiV2CollectionCollectionIdMetaDatumMetaKeyIdTextPutRequest;
}

export interface ApiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdTextPutRequest {
    mediaEntryId: string;
    metaKeyId: string;
    body: ApiV2CollectionCollectionIdMetaDatumMetaKeyIdTextPutRequest;
}

export interface ApiV2MediaEntryMediaEntryIdPermsGetRequest {
    mediaEntryId: string;
}

export interface ApiV2MediaEntryMediaEntryIdPermsGroupGroupIdDeleteRequest {
    mediaEntryId: string;
    groupId: string;
}

export interface ApiV2MediaEntryMediaEntryIdPermsGroupGroupIdGetRequest {
    mediaEntryId: string;
    groupId: string;
}

export interface ApiV2MediaEntryMediaEntryIdPermsGroupGroupIdPermNamePermValPutRequest {
    mediaEntryId: string;
    groupId: string;
    permName: ApiV2MediaEntryMediaEntryIdPermsGroupGroupIdPermNamePermValPutPermNameEnum;
    permVal: boolean;
}

export interface ApiV2MediaEntryMediaEntryIdPermsGroupGroupIdPostOperationRequest {
    mediaEntryId: string;
    groupId: string;
    body: ApiV2MediaEntryMediaEntryIdPermsGroupGroupIdPostRequest;
}

export interface ApiV2MediaEntryMediaEntryIdPermsGroupsGetRequest {
    mediaEntryId: string;
}

export interface ApiV2MediaEntryMediaEntryIdPermsResourcePermNamePermValPutRequest {
    mediaEntryId: string;
    permName: ApiV2MediaEntryMediaEntryIdPermsResourcePermNamePermValPutPermNameEnum;
    permVal: boolean;
}

export interface ApiV2MediaEntryMediaEntryIdPermsResourcesGetRequest {
    mediaEntryId: string;
}

export interface ApiV2MediaEntryMediaEntryIdPermsResourcesPutOperationRequest {
    mediaEntryId: string;
    body: ApiV2MediaEntryMediaEntryIdPermsResourcesPutRequest;
}

export interface ApiV2MediaEntryMediaEntryIdPermsUserUserIdDeleteRequest {
    mediaEntryId: string;
    userId: string;
}

export interface ApiV2MediaEntryMediaEntryIdPermsUserUserIdGetRequest {
    mediaEntryId: string;
    userId: string;
}

export interface ApiV2MediaEntryMediaEntryIdPermsUserUserIdPermNamePermValPutRequest {
    mediaEntryId: string;
    userId: string;
    permName: ApiV2MediaEntryMediaEntryIdPermsUserUserIdPermNamePermValPutPermNameEnum;
    permVal: boolean;
}

export interface ApiV2MediaEntryMediaEntryIdPermsUserUserIdPostOperationRequest {
    mediaEntryId: string;
    userId: string;
    body: ApiV2MediaEntryMediaEntryIdPermsUserUserIdPostRequest;
}

export interface ApiV2MediaEntryMediaEntryIdPermsUsersGetRequest {
    mediaEntryId: string;
}

export interface ApiV2MediaEntryMediaEntryIdPreviewDataStreamGetRequest {
    mediaEntryId: string;
    size?: string;
}

export interface ApiV2MediaEntryMediaEntryIdPreviewGetRequest {
    mediaEntryId: string;
    size?: string;
}

export interface ApiV2MediaEntryMediaEntryIdPublishPutRequest {
    mediaEntryId: string;
}

export interface ApiV2MediaEntryPostRequest {
    copyMeId?: string;
    collectionId?: string;
    file?: Blob;
}

export interface ApiV2MediaFileMediaFileIdDataStreamGetRequest {
    mediaFileId: string;
}

export interface ApiV2MediaFileMediaFileIdGetRequest {
    mediaFileId: string;
}

export interface ApiV2MetaDataMetaDatumIdDataStreamGetRequest {
    metaDatumId: string;
}

export interface ApiV2MetaDataMetaDatumIdGetRequest {
    metaDatumId: string;
}

export interface ApiV2MetaDataMetaDatumIdRoleGetRequest {
    metaDatumId: string;
}

export interface ApiV2MetaKeysGetRequest {
    id?: string;
    vocabularyId?: string;
    metaDatumObjectType?: string;
    isEnabledForCollections?: boolean;
    isEnabledForMediaEntries?: boolean;
    scope?: ApiV2MetaKeysGetScopeEnum;
    page?: number;
    count?: number;
}

export interface ApiV2MetaKeysIdGetRequest {
    id: string;
}

export interface ApiV2PeopleGetRequest {
    subtype?: ApiV2PeopleGetSubtypeEnum;
    institutionalId?: string;
    searchable?: string;
    id?: string;
    count?: number;
    pseudonym?: string;
    lastName?: string;
    firstName?: string;
    page?: number;
    fullData?: boolean;
    description?: string;
}

export interface ApiV2PeopleIdGetRequest {
    id: string;
}

export interface ApiV2PreviewsPreviewIdDataStreamGetRequest {
    previewId: string;
}

export interface ApiV2PreviewsPreviewIdGetRequest {
    previewId: string;
}

export interface ApiV2RolesGetRequest {
    page?: number;
    count?: number;
}

export interface ApiV2RolesIdGetRequest {
    id: string;
}

export interface ApiV2UsageTermsGetRequest {
    fullData?: boolean;
}

export interface ApiV2UsageTermsIdGetRequest {
    id: string;
}

export interface ApiV2UsersGetRequest {
    autocomplete?: string;
    institutionalId?: string;
    searchable?: string;
    email?: string;
    count?: number;
    personId?: string;
    institution?: string;
    notes?: string;
    page?: number;
    fullData?: boolean;
}

export interface ApiV2UsersIdGetRequest {
    id: string;
}

export interface ApiV2VocabulariesGetRequest {
    page?: number;
}

export interface ApiV2VocabulariesIdGetRequest {
    id: string;
}

export interface ApiV2WorkflowsGetRequest {
    fullData?: boolean;
}

export interface ApiV2WorkflowsIdDeleteRequest {
    id: string;
}

export interface ApiV2WorkflowsIdGetRequest {
    id: string;
}

export interface ApiV2WorkflowsIdPutOperationRequest {
    id: string;
    body: ApiV2WorkflowsIdPutRequest;
}

export interface ApiV2WorkflowsPostOperationRequest {
    body: ApiV2WorkflowsPostRequest;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * PUBLIC Context: Get App Settings.
     */
    async apiV2AppSettingsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiV2AppSettingsGet200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api-v2/app-settings`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiV2AppSettingsGet200ResponseFromJSON(jsonValue));
    }

    /**
     * PUBLIC Context: Get App Settings.
     */
    async apiV2AppSettingsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiV2AppSettingsGet200Response> {
        const response = await this.apiV2AppSettingsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Authentication help and info.
     */
    async apiV2AuthInfoGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiV2AuthInfoGet200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api-v2/auth-info`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiV2AuthInfoGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Authentication help and info.
     */
    async apiV2AuthInfoGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiV2AuthInfoGet200Response> {
        const response = await this.apiV2AuthInfoGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Query collection collection arcs.
     */
    async apiV2CollectionCollectionArcsGetRaw(requestParameters: ApiV2CollectionCollectionArcsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        if (requestParameters['childId'] != null) {
            queryParameters['child_id'] = requestParameters['childId'];
        }

        if (requestParameters['parentId'] != null) {
            queryParameters['parent_id'] = requestParameters['parentId'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['count'] != null) {
            queryParameters['count'] = requestParameters['count'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api-v2/collection-collection-arcs/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Query collection collection arcs.
     */
    async apiV2CollectionCollectionArcsGet(requestParameters: ApiV2CollectionCollectionArcsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.apiV2CollectionCollectionArcsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get collection collection arcs.
     */
    async apiV2CollectionCollectionArcsIdGetRaw(requestParameters: ApiV2CollectionCollectionArcsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiV2CollectionCollectionArcsIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api-v2/collection-collection-arcs/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get collection collection arcs.
     */
    async apiV2CollectionCollectionArcsIdGet(requestParameters: ApiV2CollectionCollectionArcsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.apiV2CollectionCollectionArcsIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * TODO: Delete custom_url for collection.
     */
    async apiV2CollectionCollectionIdCustomUrlDeleteRaw(requestParameters: ApiV2CollectionCollectionIdCustomUrlDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiV2CollectionCollectionIdCustomUrlPut200Response>> {
        if (requestParameters['collectionId'] == null) {
            throw new runtime.RequiredError(
                'collectionId',
                'Required parameter "collectionId" was null or undefined when calling apiV2CollectionCollectionIdCustomUrlDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api-v2/collection/{collection_id}/custom_url`.replace(`{${"collection_id"}}`, encodeURIComponent(String(requestParameters['collectionId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiV2CollectionCollectionIdCustomUrlPut200ResponseFromJSON(jsonValue));
    }

    /**
     * TODO: Delete custom_url for collection.
     */
    async apiV2CollectionCollectionIdCustomUrlDelete(requestParameters: ApiV2CollectionCollectionIdCustomUrlDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiV2CollectionCollectionIdCustomUrlPut200Response> {
        const response = await this.apiV2CollectionCollectionIdCustomUrlDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get custom_url for collection.
     */
    async apiV2CollectionCollectionIdCustomUrlGetRaw(requestParameters: ApiV2CollectionCollectionIdCustomUrlGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['collectionId'] == null) {
            throw new runtime.RequiredError(
                'collectionId',
                'Required parameter "collectionId" was null or undefined when calling apiV2CollectionCollectionIdCustomUrlGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api-v2/collection/{collection_id}/custom_url`.replace(`{${"collection_id"}}`, encodeURIComponent(String(requestParameters['collectionId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get custom_url for collection.
     */
    async apiV2CollectionCollectionIdCustomUrlGet(requestParameters: ApiV2CollectionCollectionIdCustomUrlGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiV2CollectionCollectionIdCustomUrlGetRaw(requestParameters, initOverrides);
    }

    /**
     * USER Context: Create custom_url for collection.
     */
    async apiV2CollectionCollectionIdCustomUrlPostRaw(requestParameters: ApiV2CollectionCollectionIdCustomUrlPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiV2CollectionCollectionIdCustomUrlPut200Response>> {
        if (requestParameters['collectionId'] == null) {
            throw new runtime.RequiredError(
                'collectionId',
                'Required parameter "collectionId" was null or undefined when calling apiV2CollectionCollectionIdCustomUrlPost().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling apiV2CollectionCollectionIdCustomUrlPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api-v2/collection/{collection_id}/custom_url`.replace(`{${"collection_id"}}`, encodeURIComponent(String(requestParameters['collectionId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApiV2CollectionCollectionIdCustomUrlPostRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiV2CollectionCollectionIdCustomUrlPut200ResponseFromJSON(jsonValue));
    }

    /**
     * USER Context: Create custom_url for collection.
     */
    async apiV2CollectionCollectionIdCustomUrlPost(requestParameters: ApiV2CollectionCollectionIdCustomUrlPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiV2CollectionCollectionIdCustomUrlPut200Response> {
        const response = await this.apiV2CollectionCollectionIdCustomUrlPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * USER Context: Update custom_url for collection.
     */
    async apiV2CollectionCollectionIdCustomUrlPutRaw(requestParameters: ApiV2CollectionCollectionIdCustomUrlPutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiV2CollectionCollectionIdCustomUrlPut200Response>> {
        if (requestParameters['collectionId'] == null) {
            throw new runtime.RequiredError(
                'collectionId',
                'Required parameter "collectionId" was null or undefined when calling apiV2CollectionCollectionIdCustomUrlPut().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling apiV2CollectionCollectionIdCustomUrlPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api-v2/collection/{collection_id}/custom_url`.replace(`{${"collection_id"}}`, encodeURIComponent(String(requestParameters['collectionId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ApiV2CollectionCollectionIdCustomUrlPutRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiV2CollectionCollectionIdCustomUrlPut200ResponseFromJSON(jsonValue));
    }

    /**
     * USER Context: Update custom_url for collection.
     */
    async apiV2CollectionCollectionIdCustomUrlPut(requestParameters: ApiV2CollectionCollectionIdCustomUrlPutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiV2CollectionCollectionIdCustomUrlPut200Response> {
        const response = await this.apiV2CollectionCollectionIdCustomUrlPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * USER Context: Delete collection for id.
     */
    async apiV2CollectionCollectionIdDeleteRaw(requestParameters: ApiV2CollectionCollectionIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiV2CollectionPost200Response>> {
        if (requestParameters['collectionId'] == null) {
            throw new runtime.RequiredError(
                'collectionId',
                'Required parameter "collectionId" was null or undefined when calling apiV2CollectionCollectionIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api-v2/collection/{collection_id}`.replace(`{${"collection_id"}}`, encodeURIComponent(String(requestParameters['collectionId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiV2CollectionPost200ResponseFromJSON(jsonValue));
    }

    /**
     * USER Context: Delete collection for id.
     */
    async apiV2CollectionCollectionIdDelete(requestParameters: ApiV2CollectionCollectionIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiV2CollectionPost200Response> {
        const response = await this.apiV2CollectionCollectionIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * PUBLIC/USER Context: Get edit_session list for collection.
     */
    async apiV2CollectionCollectionIdEditSessionsGetRaw(requestParameters: ApiV2CollectionCollectionIdEditSessionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<object>>> {
        if (requestParameters['collectionId'] == null) {
            throw new runtime.RequiredError(
                'collectionId',
                'Required parameter "collectionId" was null or undefined when calling apiV2CollectionCollectionIdEditSessionsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api-v2/collection/{collection_id}/edit_sessions`.replace(`{${"collection_id"}}`, encodeURIComponent(String(requestParameters['collectionId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * PUBLIC/USER Context: Get edit_session list for collection.
     */
    async apiV2CollectionCollectionIdEditSessionsGet(requestParameters: ApiV2CollectionCollectionIdEditSessionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<object>> {
        const response = await this.apiV2CollectionCollectionIdEditSessionsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * USER Context: Create edit session for collection and authed user.
     */
    async apiV2CollectionCollectionIdEditSessionsPostRaw(requestParameters: ApiV2CollectionCollectionIdEditSessionsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiV2CollectionCollectionIdEditSessionsPost200Response>> {
        if (requestParameters['collectionId'] == null) {
            throw new runtime.RequiredError(
                'collectionId',
                'Required parameter "collectionId" was null or undefined when calling apiV2CollectionCollectionIdEditSessionsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api-v2/collection/{collection_id}/edit_sessions`.replace(`{${"collection_id"}}`, encodeURIComponent(String(requestParameters['collectionId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiV2CollectionCollectionIdEditSessionsPost200ResponseFromJSON(jsonValue));
    }

    /**
     * USER Context: Create edit session for collection and authed user.
     */
    async apiV2CollectionCollectionIdEditSessionsPost(requestParameters: ApiV2CollectionCollectionIdEditSessionsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiV2CollectionCollectionIdEditSessionsPost200Response> {
        const response = await this.apiV2CollectionCollectionIdEditSessionsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * USER Context: Delete favorite_collection for authed user and collection id.
     */
    async apiV2CollectionCollectionIdFavoriteDeleteRaw(requestParameters: ApiV2CollectionCollectionIdFavoriteDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['collectionId'] == null) {
            throw new runtime.RequiredError(
                'collectionId',
                'Required parameter "collectionId" was null or undefined when calling apiV2CollectionCollectionIdFavoriteDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api-v2/collection/{collection_id}/favorite`.replace(`{${"collection_id"}}`, encodeURIComponent(String(requestParameters['collectionId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * USER Context: Delete favorite_collection for authed user and collection id.
     */
    async apiV2CollectionCollectionIdFavoriteDelete(requestParameters: ApiV2CollectionCollectionIdFavoriteDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiV2CollectionCollectionIdFavoriteDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * USER Context: Get favorite_collection for authed user and collection id.
     */
    async apiV2CollectionCollectionIdFavoriteGetRaw(requestParameters: ApiV2CollectionCollectionIdFavoriteGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['collectionId'] == null) {
            throw new runtime.RequiredError(
                'collectionId',
                'Required parameter "collectionId" was null or undefined when calling apiV2CollectionCollectionIdFavoriteGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api-v2/collection/{collection_id}/favorite`.replace(`{${"collection_id"}}`, encodeURIComponent(String(requestParameters['collectionId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * USER Context: Get favorite_collection for authed user and collection id.
     */
    async apiV2CollectionCollectionIdFavoriteGet(requestParameters: ApiV2CollectionCollectionIdFavoriteGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiV2CollectionCollectionIdFavoriteGetRaw(requestParameters, initOverrides);
    }

    /**
     * USER Context: Create favorite_collection for authed user and collection.
     */
    async apiV2CollectionCollectionIdFavoritePostRaw(requestParameters: ApiV2CollectionCollectionIdFavoritePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['collectionId'] == null) {
            throw new runtime.RequiredError(
                'collectionId',
                'Required parameter "collectionId" was null or undefined when calling apiV2CollectionCollectionIdFavoritePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api-v2/collection/{collection_id}/favorite`.replace(`{${"collection_id"}}`, encodeURIComponent(String(requestParameters['collectionId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * USER Context: Create favorite_collection for authed user and collection.
     */
    async apiV2CollectionCollectionIdFavoritePost(requestParameters: ApiV2CollectionCollectionIdFavoritePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiV2CollectionCollectionIdFavoritePostRaw(requestParameters, initOverrides);
    }

    /**
     * USER Context: Delete full_text.
     */
    async apiV2CollectionCollectionIdFullTextDeleteRaw(requestParameters: ApiV2CollectionCollectionIdFullTextDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['collectionId'] == null) {
            throw new runtime.RequiredError(
                'collectionId',
                'Required parameter "collectionId" was null or undefined when calling apiV2CollectionCollectionIdFullTextDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api-v2/collection/{collection_id}/full_text`.replace(`{${"collection_id"}}`, encodeURIComponent(String(requestParameters['collectionId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * USER Context: Delete full_text.
     */
    async apiV2CollectionCollectionIdFullTextDelete(requestParameters: ApiV2CollectionCollectionIdFullTextDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiV2CollectionCollectionIdFullTextDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * PUBLIC/USER Context: Get full_text.
     */
    async apiV2CollectionCollectionIdFullTextGetRaw(requestParameters: ApiV2CollectionCollectionIdFullTextGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['collectionId'] == null) {
            throw new runtime.RequiredError(
                'collectionId',
                'Required parameter "collectionId" was null or undefined when calling apiV2CollectionCollectionIdFullTextGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api-v2/collection/{collection_id}/full_text`.replace(`{${"collection_id"}}`, encodeURIComponent(String(requestParameters['collectionId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * PUBLIC/USER Context: Get full_text.
     */
    async apiV2CollectionCollectionIdFullTextGet(requestParameters: ApiV2CollectionCollectionIdFullTextGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiV2CollectionCollectionIdFullTextGetRaw(requestParameters, initOverrides);
    }

    /**
     * USER Context: Create full_text for collection
     */
    async apiV2CollectionCollectionIdFullTextPostRaw(requestParameters: ApiV2CollectionCollectionIdFullTextPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['collectionId'] == null) {
            throw new runtime.RequiredError(
                'collectionId',
                'Required parameter "collectionId" was null or undefined when calling apiV2CollectionCollectionIdFullTextPost().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling apiV2CollectionCollectionIdFullTextPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api-v2/collection/{collection_id}/full_text`.replace(`{${"collection_id"}}`, encodeURIComponent(String(requestParameters['collectionId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApiV2CollectionCollectionIdFullTextPutRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * USER Context: Create full_text for collection
     */
    async apiV2CollectionCollectionIdFullTextPost(requestParameters: ApiV2CollectionCollectionIdFullTextPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiV2CollectionCollectionIdFullTextPostRaw(requestParameters, initOverrides);
    }

    /**
     * USER Context: Update full_text for collection.
     */
    async apiV2CollectionCollectionIdFullTextPutRaw(requestParameters: ApiV2CollectionCollectionIdFullTextPutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['collectionId'] == null) {
            throw new runtime.RequiredError(
                'collectionId',
                'Required parameter "collectionId" was null or undefined when calling apiV2CollectionCollectionIdFullTextPut().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling apiV2CollectionCollectionIdFullTextPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api-v2/collection/{collection_id}/full_text`.replace(`{${"collection_id"}}`, encodeURIComponent(String(requestParameters['collectionId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ApiV2CollectionCollectionIdFullTextPutRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * USER Context: Update full_text for collection.
     */
    async apiV2CollectionCollectionIdFullTextPut(requestParameters: ApiV2CollectionCollectionIdFullTextPutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiV2CollectionCollectionIdFullTextPutRaw(requestParameters, initOverrides);
    }

    /**
     * PUBLIC/USER Context: Get collection for id.
     */
    async apiV2CollectionCollectionIdGetRaw(requestParameters: ApiV2CollectionCollectionIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiV2CollectionPost200Response>> {
        if (requestParameters['collectionId'] == null) {
            throw new runtime.RequiredError(
                'collectionId',
                'Required parameter "collectionId" was null or undefined when calling apiV2CollectionCollectionIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api-v2/collection/{collection_id}`.replace(`{${"collection_id"}}`, encodeURIComponent(String(requestParameters['collectionId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiV2CollectionPost200ResponseFromJSON(jsonValue));
    }

    /**
     * PUBLIC/USER Context: Get collection for id.
     */
    async apiV2CollectionCollectionIdGet(requestParameters: ApiV2CollectionCollectionIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiV2CollectionPost200Response> {
        const response = await this.apiV2CollectionCollectionIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * USER Context: Delete collection media-entry arc
     */
    async apiV2CollectionCollectionIdMediaEntryArcMediaEntryIdDeleteRaw(requestParameters: ApiV2CollectionCollectionIdMediaEntryArcMediaEntryIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['collectionId'] == null) {
            throw new runtime.RequiredError(
                'collectionId',
                'Required parameter "collectionId" was null or undefined when calling apiV2CollectionCollectionIdMediaEntryArcMediaEntryIdDelete().'
            );
        }

        if (requestParameters['mediaEntryId'] == null) {
            throw new runtime.RequiredError(
                'mediaEntryId',
                'Required parameter "mediaEntryId" was null or undefined when calling apiV2CollectionCollectionIdMediaEntryArcMediaEntryIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api-v2/collection/{collection_id}/media-entry-arc/{media_entry_id}`.replace(`{${"collection_id"}}`, encodeURIComponent(String(requestParameters['collectionId']))).replace(`{${"media_entry_id"}}`, encodeURIComponent(String(requestParameters['mediaEntryId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * USER Context: Delete collection media-entry arc
     */
    async apiV2CollectionCollectionIdMediaEntryArcMediaEntryIdDelete(requestParameters: ApiV2CollectionCollectionIdMediaEntryArcMediaEntryIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.apiV2CollectionCollectionIdMediaEntryArcMediaEntryIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * USER Context: Create collection media-entry arc
     */
    async apiV2CollectionCollectionIdMediaEntryArcMediaEntryIdPostRaw(requestParameters: ApiV2CollectionCollectionIdMediaEntryArcMediaEntryIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['collectionId'] == null) {
            throw new runtime.RequiredError(
                'collectionId',
                'Required parameter "collectionId" was null or undefined when calling apiV2CollectionCollectionIdMediaEntryArcMediaEntryIdPost().'
            );
        }

        if (requestParameters['mediaEntryId'] == null) {
            throw new runtime.RequiredError(
                'mediaEntryId',
                'Required parameter "mediaEntryId" was null or undefined when calling apiV2CollectionCollectionIdMediaEntryArcMediaEntryIdPost().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling apiV2CollectionCollectionIdMediaEntryArcMediaEntryIdPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api-v2/collection/{collection_id}/media-entry-arc/{media_entry_id}`.replace(`{${"collection_id"}}`, encodeURIComponent(String(requestParameters['collectionId']))).replace(`{${"media_entry_id"}}`, encodeURIComponent(String(requestParameters['mediaEntryId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApiV2CollectionCollectionIdMediaEntryArcMediaEntryIdPutRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * USER Context: Create collection media-entry arc
     */
    async apiV2CollectionCollectionIdMediaEntryArcMediaEntryIdPost(requestParameters: ApiV2CollectionCollectionIdMediaEntryArcMediaEntryIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.apiV2CollectionCollectionIdMediaEntryArcMediaEntryIdPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * USER Context: Update collection media-entry arc
     */
    async apiV2CollectionCollectionIdMediaEntryArcMediaEntryIdPutRaw(requestParameters: ApiV2CollectionCollectionIdMediaEntryArcMediaEntryIdPutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['collectionId'] == null) {
            throw new runtime.RequiredError(
                'collectionId',
                'Required parameter "collectionId" was null or undefined when calling apiV2CollectionCollectionIdMediaEntryArcMediaEntryIdPut().'
            );
        }

        if (requestParameters['mediaEntryId'] == null) {
            throw new runtime.RequiredError(
                'mediaEntryId',
                'Required parameter "mediaEntryId" was null or undefined when calling apiV2CollectionCollectionIdMediaEntryArcMediaEntryIdPut().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling apiV2CollectionCollectionIdMediaEntryArcMediaEntryIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api-v2/collection/{collection_id}/media-entry-arc/{media_entry_id}`.replace(`{${"collection_id"}}`, encodeURIComponent(String(requestParameters['collectionId']))).replace(`{${"media_entry_id"}}`, encodeURIComponent(String(requestParameters['mediaEntryId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ApiV2CollectionCollectionIdMediaEntryArcMediaEntryIdPutRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * USER Context: Update collection media-entry arc
     */
    async apiV2CollectionCollectionIdMediaEntryArcMediaEntryIdPut(requestParameters: ApiV2CollectionCollectionIdMediaEntryArcMediaEntryIdPutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.apiV2CollectionCollectionIdMediaEntryArcMediaEntryIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get collection media-entry arcs.
     */
    async apiV2CollectionCollectionIdMediaEntryArcsGetRaw(requestParameters: ApiV2CollectionCollectionIdMediaEntryArcsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiV2CollectionCollectionIdMediaEntryArcsGet200Response>> {
        if (requestParameters['collectionId'] == null) {
            throw new runtime.RequiredError(
                'collectionId',
                'Required parameter "collectionId" was null or undefined when calling apiV2CollectionCollectionIdMediaEntryArcsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api-v2/collection/{collection_id}/media-entry-arcs`.replace(`{${"collection_id"}}`, encodeURIComponent(String(requestParameters['collectionId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiV2CollectionCollectionIdMediaEntryArcsGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Get collection media-entry arcs.
     */
    async apiV2CollectionCollectionIdMediaEntryArcsGet(requestParameters: ApiV2CollectionCollectionIdMediaEntryArcsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiV2CollectionCollectionIdMediaEntryArcsGet200Response> {
        const response = await this.apiV2CollectionCollectionIdMediaEntryArcsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get meta-data for collection.
     */
    async apiV2CollectionCollectionIdMetaDataGetRaw(requestParameters: ApiV2CollectionCollectionIdMetaDataGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['collectionId'] == null) {
            throw new runtime.RequiredError(
                'collectionId',
                'Required parameter "collectionId" was null or undefined when calling apiV2CollectionCollectionIdMetaDataGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['updatedAfter'] != null) {
            queryParameters['updated_after'] = requestParameters['updatedAfter'];
        }

        if (requestParameters['metaKeys'] != null) {
            queryParameters['meta_keys'] = requestParameters['metaKeys'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api-v2/collection/{collection_id}/meta-data`.replace(`{${"collection_id"}}`, encodeURIComponent(String(requestParameters['collectionId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get meta-data for collection.
     */
    async apiV2CollectionCollectionIdMetaDataGet(requestParameters: ApiV2CollectionCollectionIdMetaDataGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.apiV2CollectionCollectionIdMetaDataGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get meta-data for collection.
     */
    async apiV2CollectionCollectionIdMetaDataRelatedGetRaw(requestParameters: ApiV2CollectionCollectionIdMetaDataRelatedGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['collectionId'] == null) {
            throw new runtime.RequiredError(
                'collectionId',
                'Required parameter "collectionId" was null or undefined when calling apiV2CollectionCollectionIdMetaDataRelatedGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['updatedAfter'] != null) {
            queryParameters['updated_after'] = requestParameters['updatedAfter'];
        }

        if (requestParameters['metaKeys'] != null) {
            queryParameters['meta_keys'] = requestParameters['metaKeys'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api-v2/collection/{collection_id}/meta-data-related`.replace(`{${"collection_id"}}`, encodeURIComponent(String(requestParameters['collectionId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get meta-data for collection.
     */
    async apiV2CollectionCollectionIdMetaDataRelatedGet(requestParameters: ApiV2CollectionCollectionIdMetaDataRelatedGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.apiV2CollectionCollectionIdMetaDataRelatedGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete meta-data for collection and meta-key
     */
    async apiV2CollectionCollectionIdMetaDatumMetaKeyIdDeleteRaw(requestParameters: ApiV2CollectionCollectionIdMetaDatumMetaKeyIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['collectionId'] == null) {
            throw new runtime.RequiredError(
                'collectionId',
                'Required parameter "collectionId" was null or undefined when calling apiV2CollectionCollectionIdMetaDatumMetaKeyIdDelete().'
            );
        }

        if (requestParameters['metaKeyId'] == null) {
            throw new runtime.RequiredError(
                'metaKeyId',
                'Required parameter "metaKeyId" was null or undefined when calling apiV2CollectionCollectionIdMetaDatumMetaKeyIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api-v2/collection/{collection_id}/meta-datum/{meta_key_id}`.replace(`{${"collection_id"}}`, encodeURIComponent(String(requestParameters['collectionId']))).replace(`{${"meta_key_id"}}`, encodeURIComponent(String(requestParameters['metaKeyId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Delete meta-data for collection and meta-key
     */
    async apiV2CollectionCollectionIdMetaDatumMetaKeyIdDelete(requestParameters: ApiV2CollectionCollectionIdMetaDatumMetaKeyIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.apiV2CollectionCollectionIdMetaDatumMetaKeyIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get meta-data for collection and meta-key.
     */
    async apiV2CollectionCollectionIdMetaDatumMetaKeyIdGetRaw(requestParameters: ApiV2CollectionCollectionIdMetaDatumMetaKeyIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['collectionId'] == null) {
            throw new runtime.RequiredError(
                'collectionId',
                'Required parameter "collectionId" was null or undefined when calling apiV2CollectionCollectionIdMetaDatumMetaKeyIdGet().'
            );
        }

        if (requestParameters['metaKeyId'] == null) {
            throw new runtime.RequiredError(
                'metaKeyId',
                'Required parameter "metaKeyId" was null or undefined when calling apiV2CollectionCollectionIdMetaDatumMetaKeyIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api-v2/collection/{collection_id}/meta-datum/{meta_key_id}`.replace(`{${"collection_id"}}`, encodeURIComponent(String(requestParameters['collectionId']))).replace(`{${"meta_key_id"}}`, encodeURIComponent(String(requestParameters['metaKeyId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get meta-data for collection and meta-key.
     */
    async apiV2CollectionCollectionIdMetaDatumMetaKeyIdGet(requestParameters: ApiV2CollectionCollectionIdMetaDatumMetaKeyIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.apiV2CollectionCollectionIdMetaDatumMetaKeyIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create meta-data json for collection.
     */
    async apiV2CollectionCollectionIdMetaDatumMetaKeyIdJsonPostRaw(requestParameters: ApiV2CollectionCollectionIdMetaDatumMetaKeyIdJsonPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['collectionId'] == null) {
            throw new runtime.RequiredError(
                'collectionId',
                'Required parameter "collectionId" was null or undefined when calling apiV2CollectionCollectionIdMetaDatumMetaKeyIdJsonPost().'
            );
        }

        if (requestParameters['metaKeyId'] == null) {
            throw new runtime.RequiredError(
                'metaKeyId',
                'Required parameter "metaKeyId" was null or undefined when calling apiV2CollectionCollectionIdMetaDatumMetaKeyIdJsonPost().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling apiV2CollectionCollectionIdMetaDatumMetaKeyIdJsonPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api-v2/collection/{collection_id}/meta-datum/{meta_key_id}/json`.replace(`{${"collection_id"}}`, encodeURIComponent(String(requestParameters['collectionId']))).replace(`{${"meta_key_id"}}`, encodeURIComponent(String(requestParameters['metaKeyId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApiV2CollectionCollectionIdMetaDatumMetaKeyIdJsonPutRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Create meta-data json for collection.
     */
    async apiV2CollectionCollectionIdMetaDatumMetaKeyIdJsonPost(requestParameters: ApiV2CollectionCollectionIdMetaDatumMetaKeyIdJsonPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.apiV2CollectionCollectionIdMetaDatumMetaKeyIdJsonPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update meta-data json for collection.
     */
    async apiV2CollectionCollectionIdMetaDatumMetaKeyIdJsonPutRaw(requestParameters: ApiV2CollectionCollectionIdMetaDatumMetaKeyIdJsonPutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['collectionId'] == null) {
            throw new runtime.RequiredError(
                'collectionId',
                'Required parameter "collectionId" was null or undefined when calling apiV2CollectionCollectionIdMetaDatumMetaKeyIdJsonPut().'
            );
        }

        if (requestParameters['metaKeyId'] == null) {
            throw new runtime.RequiredError(
                'metaKeyId',
                'Required parameter "metaKeyId" was null or undefined when calling apiV2CollectionCollectionIdMetaDatumMetaKeyIdJsonPut().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling apiV2CollectionCollectionIdMetaDatumMetaKeyIdJsonPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api-v2/collection/{collection_id}/meta-datum/{meta_key_id}/json`.replace(`{${"collection_id"}}`, encodeURIComponent(String(requestParameters['collectionId']))).replace(`{${"meta_key_id"}}`, encodeURIComponent(String(requestParameters['metaKeyId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ApiV2CollectionCollectionIdMetaDatumMetaKeyIdJsonPutRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Update meta-data json for collection.
     */
    async apiV2CollectionCollectionIdMetaDatumMetaKeyIdJsonPut(requestParameters: ApiV2CollectionCollectionIdMetaDatumMetaKeyIdJsonPutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.apiV2CollectionCollectionIdMetaDatumMetaKeyIdJsonPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get meta-data keywords for collection meta-key
     */
    async apiV2CollectionCollectionIdMetaDatumMetaKeyIdKeywordGetRaw(requestParameters: ApiV2CollectionCollectionIdMetaDatumMetaKeyIdKeywordGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['collectionId'] == null) {
            throw new runtime.RequiredError(
                'collectionId',
                'Required parameter "collectionId" was null or undefined when calling apiV2CollectionCollectionIdMetaDatumMetaKeyIdKeywordGet().'
            );
        }

        if (requestParameters['metaKeyId'] == null) {
            throw new runtime.RequiredError(
                'metaKeyId',
                'Required parameter "metaKeyId" was null or undefined when calling apiV2CollectionCollectionIdMetaDatumMetaKeyIdKeywordGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api-v2/collection/{collection_id}/meta-datum/{meta_key_id}/keyword`.replace(`{${"collection_id"}}`, encodeURIComponent(String(requestParameters['collectionId']))).replace(`{${"meta_key_id"}}`, encodeURIComponent(String(requestParameters['metaKeyId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get meta-data keywords for collection meta-key
     */
    async apiV2CollectionCollectionIdMetaDatumMetaKeyIdKeywordGet(requestParameters: ApiV2CollectionCollectionIdMetaDatumMetaKeyIdKeywordGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.apiV2CollectionCollectionIdMetaDatumMetaKeyIdKeywordGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete meta-data keyword for collection.
     */
    async apiV2CollectionCollectionIdMetaDatumMetaKeyIdKeywordKeywordIdDeleteRaw(requestParameters: ApiV2CollectionCollectionIdMetaDatumMetaKeyIdKeywordKeywordIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['collectionId'] == null) {
            throw new runtime.RequiredError(
                'collectionId',
                'Required parameter "collectionId" was null or undefined when calling apiV2CollectionCollectionIdMetaDatumMetaKeyIdKeywordKeywordIdDelete().'
            );
        }

        if (requestParameters['metaKeyId'] == null) {
            throw new runtime.RequiredError(
                'metaKeyId',
                'Required parameter "metaKeyId" was null or undefined when calling apiV2CollectionCollectionIdMetaDatumMetaKeyIdKeywordKeywordIdDelete().'
            );
        }

        if (requestParameters['keywordId'] == null) {
            throw new runtime.RequiredError(
                'keywordId',
                'Required parameter "keywordId" was null or undefined when calling apiV2CollectionCollectionIdMetaDatumMetaKeyIdKeywordKeywordIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api-v2/collection/{collection_id}/meta-datum/{meta_key_id}/keyword/{keyword_id}`.replace(`{${"collection_id"}}`, encodeURIComponent(String(requestParameters['collectionId']))).replace(`{${"meta_key_id"}}`, encodeURIComponent(String(requestParameters['metaKeyId']))).replace(`{${"keyword_id"}}`, encodeURIComponent(String(requestParameters['keywordId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Delete meta-data keyword for collection.
     */
    async apiV2CollectionCollectionIdMetaDatumMetaKeyIdKeywordKeywordIdDelete(requestParameters: ApiV2CollectionCollectionIdMetaDatumMetaKeyIdKeywordKeywordIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.apiV2CollectionCollectionIdMetaDatumMetaKeyIdKeywordKeywordIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create meta-data keyword for collection.
     */
    async apiV2CollectionCollectionIdMetaDatumMetaKeyIdKeywordKeywordIdPostRaw(requestParameters: ApiV2CollectionCollectionIdMetaDatumMetaKeyIdKeywordKeywordIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['collectionId'] == null) {
            throw new runtime.RequiredError(
                'collectionId',
                'Required parameter "collectionId" was null or undefined when calling apiV2CollectionCollectionIdMetaDatumMetaKeyIdKeywordKeywordIdPost().'
            );
        }

        if (requestParameters['metaKeyId'] == null) {
            throw new runtime.RequiredError(
                'metaKeyId',
                'Required parameter "metaKeyId" was null or undefined when calling apiV2CollectionCollectionIdMetaDatumMetaKeyIdKeywordKeywordIdPost().'
            );
        }

        if (requestParameters['keywordId'] == null) {
            throw new runtime.RequiredError(
                'keywordId',
                'Required parameter "keywordId" was null or undefined when calling apiV2CollectionCollectionIdMetaDatumMetaKeyIdKeywordKeywordIdPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api-v2/collection/{collection_id}/meta-datum/{meta_key_id}/keyword/{keyword_id}`.replace(`{${"collection_id"}}`, encodeURIComponent(String(requestParameters['collectionId']))).replace(`{${"meta_key_id"}}`, encodeURIComponent(String(requestParameters['metaKeyId']))).replace(`{${"keyword_id"}}`, encodeURIComponent(String(requestParameters['keywordId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Create meta-data keyword for collection.
     */
    async apiV2CollectionCollectionIdMetaDatumMetaKeyIdKeywordKeywordIdPost(requestParameters: ApiV2CollectionCollectionIdMetaDatumMetaKeyIdKeywordKeywordIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.apiV2CollectionCollectionIdMetaDatumMetaKeyIdKeywordKeywordIdPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get meta-data people for collection meta-key.
     */
    async apiV2CollectionCollectionIdMetaDatumMetaKeyIdPeopleGetRaw(requestParameters: ApiV2CollectionCollectionIdMetaDatumMetaKeyIdPeopleGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['collectionId'] == null) {
            throw new runtime.RequiredError(
                'collectionId',
                'Required parameter "collectionId" was null or undefined when calling apiV2CollectionCollectionIdMetaDatumMetaKeyIdPeopleGet().'
            );
        }

        if (requestParameters['metaKeyId'] == null) {
            throw new runtime.RequiredError(
                'metaKeyId',
                'Required parameter "metaKeyId" was null or undefined when calling apiV2CollectionCollectionIdMetaDatumMetaKeyIdPeopleGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api-v2/collection/{collection_id}/meta-datum/{meta_key_id}/people`.replace(`{${"collection_id"}}`, encodeURIComponent(String(requestParameters['collectionId']))).replace(`{${"meta_key_id"}}`, encodeURIComponent(String(requestParameters['metaKeyId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get meta-data people for collection meta-key.
     */
    async apiV2CollectionCollectionIdMetaDatumMetaKeyIdPeopleGet(requestParameters: ApiV2CollectionCollectionIdMetaDatumMetaKeyIdPeopleGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.apiV2CollectionCollectionIdMetaDatumMetaKeyIdPeopleGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete meta-data people for collection.
     */
    async apiV2CollectionCollectionIdMetaDatumMetaKeyIdPeoplePersonIdDeleteRaw(requestParameters: ApiV2CollectionCollectionIdMetaDatumMetaKeyIdPeoplePersonIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['collectionId'] == null) {
            throw new runtime.RequiredError(
                'collectionId',
                'Required parameter "collectionId" was null or undefined when calling apiV2CollectionCollectionIdMetaDatumMetaKeyIdPeoplePersonIdDelete().'
            );
        }

        if (requestParameters['metaKeyId'] == null) {
            throw new runtime.RequiredError(
                'metaKeyId',
                'Required parameter "metaKeyId" was null or undefined when calling apiV2CollectionCollectionIdMetaDatumMetaKeyIdPeoplePersonIdDelete().'
            );
        }

        if (requestParameters['personId'] == null) {
            throw new runtime.RequiredError(
                'personId',
                'Required parameter "personId" was null or undefined when calling apiV2CollectionCollectionIdMetaDatumMetaKeyIdPeoplePersonIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api-v2/collection/{collection_id}/meta-datum/{meta_key_id}/people/{person_id}`.replace(`{${"collection_id"}}`, encodeURIComponent(String(requestParameters['collectionId']))).replace(`{${"meta_key_id"}}`, encodeURIComponent(String(requestParameters['metaKeyId']))).replace(`{${"person_id"}}`, encodeURIComponent(String(requestParameters['personId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Delete meta-data people for collection.
     */
    async apiV2CollectionCollectionIdMetaDatumMetaKeyIdPeoplePersonIdDelete(requestParameters: ApiV2CollectionCollectionIdMetaDatumMetaKeyIdPeoplePersonIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.apiV2CollectionCollectionIdMetaDatumMetaKeyIdPeoplePersonIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create meta-data people for media-entry
     */
    async apiV2CollectionCollectionIdMetaDatumMetaKeyIdPeoplePersonIdPostRaw(requestParameters: ApiV2CollectionCollectionIdMetaDatumMetaKeyIdPeoplePersonIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['collectionId'] == null) {
            throw new runtime.RequiredError(
                'collectionId',
                'Required parameter "collectionId" was null or undefined when calling apiV2CollectionCollectionIdMetaDatumMetaKeyIdPeoplePersonIdPost().'
            );
        }

        if (requestParameters['metaKeyId'] == null) {
            throw new runtime.RequiredError(
                'metaKeyId',
                'Required parameter "metaKeyId" was null or undefined when calling apiV2CollectionCollectionIdMetaDatumMetaKeyIdPeoplePersonIdPost().'
            );
        }

        if (requestParameters['personId'] == null) {
            throw new runtime.RequiredError(
                'personId',
                'Required parameter "personId" was null or undefined when calling apiV2CollectionCollectionIdMetaDatumMetaKeyIdPeoplePersonIdPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api-v2/collection/{collection_id}/meta-datum/{meta_key_id}/people/{person_id}`.replace(`{${"collection_id"}}`, encodeURIComponent(String(requestParameters['collectionId']))).replace(`{${"meta_key_id"}}`, encodeURIComponent(String(requestParameters['metaKeyId']))).replace(`{${"person_id"}}`, encodeURIComponent(String(requestParameters['personId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Create meta-data people for media-entry
     */
    async apiV2CollectionCollectionIdMetaDatumMetaKeyIdPeoplePersonIdPost(requestParameters: ApiV2CollectionCollectionIdMetaDatumMetaKeyIdPeoplePersonIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.apiV2CollectionCollectionIdMetaDatumMetaKeyIdPeoplePersonIdPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create meta-data role for media-entry
     */
    async apiV2CollectionCollectionIdMetaDatumMetaKeyIdRoleRoleIdPostRaw(requestParameters: ApiV2CollectionCollectionIdMetaDatumMetaKeyIdRoleRoleIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['mediaEntryId'] == null) {
            throw new runtime.RequiredError(
                'mediaEntryId',
                'Required parameter "mediaEntryId" was null or undefined when calling apiV2CollectionCollectionIdMetaDatumMetaKeyIdRoleRoleIdPost().'
            );
        }

        if (requestParameters['metaKeyId'] == null) {
            throw new runtime.RequiredError(
                'metaKeyId',
                'Required parameter "metaKeyId" was null or undefined when calling apiV2CollectionCollectionIdMetaDatumMetaKeyIdRoleRoleIdPost().'
            );
        }

        if (requestParameters['roleId'] == null) {
            throw new runtime.RequiredError(
                'roleId',
                'Required parameter "roleId" was null or undefined when calling apiV2CollectionCollectionIdMetaDatumMetaKeyIdRoleRoleIdPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api-v2/collection/{collection_id}/meta-datum/{meta_key_id}/role/{role_id}`.replace(`{${"media_entry_id"}}`, encodeURIComponent(String(requestParameters['mediaEntryId']))).replace(`{${"meta_key_id"}}`, encodeURIComponent(String(requestParameters['metaKeyId']))).replace(`{${"role_id"}}`, encodeURIComponent(String(requestParameters['roleId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Create meta-data role for media-entry
     */
    async apiV2CollectionCollectionIdMetaDatumMetaKeyIdRoleRoleIdPost(requestParameters: ApiV2CollectionCollectionIdMetaDatumMetaKeyIdRoleRoleIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.apiV2CollectionCollectionIdMetaDatumMetaKeyIdRoleRoleIdPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create meta-data json for collection.
     */
    async apiV2CollectionCollectionIdMetaDatumMetaKeyIdTextDatePostRaw(requestParameters: ApiV2CollectionCollectionIdMetaDatumMetaKeyIdTextDatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['collectionId'] == null) {
            throw new runtime.RequiredError(
                'collectionId',
                'Required parameter "collectionId" was null or undefined when calling apiV2CollectionCollectionIdMetaDatumMetaKeyIdTextDatePost().'
            );
        }

        if (requestParameters['metaKeyId'] == null) {
            throw new runtime.RequiredError(
                'metaKeyId',
                'Required parameter "metaKeyId" was null or undefined when calling apiV2CollectionCollectionIdMetaDatumMetaKeyIdTextDatePost().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling apiV2CollectionCollectionIdMetaDatumMetaKeyIdTextDatePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api-v2/collection/{collection_id}/meta-datum/{meta_key_id}/text-date`.replace(`{${"collection_id"}}`, encodeURIComponent(String(requestParameters['collectionId']))).replace(`{${"meta_key_id"}}`, encodeURIComponent(String(requestParameters['metaKeyId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApiV2CollectionCollectionIdMetaDatumMetaKeyIdTextPutRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Create meta-data json for collection.
     */
    async apiV2CollectionCollectionIdMetaDatumMetaKeyIdTextDatePost(requestParameters: ApiV2CollectionCollectionIdMetaDatumMetaKeyIdTextDatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.apiV2CollectionCollectionIdMetaDatumMetaKeyIdTextDatePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update meta-data text-date for collection.
     */
    async apiV2CollectionCollectionIdMetaDatumMetaKeyIdTextDatePutRaw(requestParameters: ApiV2CollectionCollectionIdMetaDatumMetaKeyIdTextDatePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['collectionId'] == null) {
            throw new runtime.RequiredError(
                'collectionId',
                'Required parameter "collectionId" was null or undefined when calling apiV2CollectionCollectionIdMetaDatumMetaKeyIdTextDatePut().'
            );
        }

        if (requestParameters['metaKeyId'] == null) {
            throw new runtime.RequiredError(
                'metaKeyId',
                'Required parameter "metaKeyId" was null or undefined when calling apiV2CollectionCollectionIdMetaDatumMetaKeyIdTextDatePut().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling apiV2CollectionCollectionIdMetaDatumMetaKeyIdTextDatePut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api-v2/collection/{collection_id}/meta-datum/{meta_key_id}/text-date`.replace(`{${"collection_id"}}`, encodeURIComponent(String(requestParameters['collectionId']))).replace(`{${"meta_key_id"}}`, encodeURIComponent(String(requestParameters['metaKeyId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ApiV2CollectionCollectionIdMetaDatumMetaKeyIdTextPutRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Update meta-data text-date for collection.
     */
    async apiV2CollectionCollectionIdMetaDatumMetaKeyIdTextDatePut(requestParameters: ApiV2CollectionCollectionIdMetaDatumMetaKeyIdTextDatePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.apiV2CollectionCollectionIdMetaDatumMetaKeyIdTextDatePutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create meta-data text for collection.
     */
    async apiV2CollectionCollectionIdMetaDatumMetaKeyIdTextPostRaw(requestParameters: ApiV2CollectionCollectionIdMetaDatumMetaKeyIdTextPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['collectionId'] == null) {
            throw new runtime.RequiredError(
                'collectionId',
                'Required parameter "collectionId" was null or undefined when calling apiV2CollectionCollectionIdMetaDatumMetaKeyIdTextPost().'
            );
        }

        if (requestParameters['metaKeyId'] == null) {
            throw new runtime.RequiredError(
                'metaKeyId',
                'Required parameter "metaKeyId" was null or undefined when calling apiV2CollectionCollectionIdMetaDatumMetaKeyIdTextPost().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling apiV2CollectionCollectionIdMetaDatumMetaKeyIdTextPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api-v2/collection/{collection_id}/meta-datum/{meta_key_id}/text`.replace(`{${"collection_id"}}`, encodeURIComponent(String(requestParameters['collectionId']))).replace(`{${"meta_key_id"}}`, encodeURIComponent(String(requestParameters['metaKeyId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApiV2CollectionCollectionIdMetaDatumMetaKeyIdTextPutRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Create meta-data text for collection.
     */
    async apiV2CollectionCollectionIdMetaDatumMetaKeyIdTextPost(requestParameters: ApiV2CollectionCollectionIdMetaDatumMetaKeyIdTextPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.apiV2CollectionCollectionIdMetaDatumMetaKeyIdTextPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update meta-data text for collection.
     */
    async apiV2CollectionCollectionIdMetaDatumMetaKeyIdTextPutRaw(requestParameters: ApiV2CollectionCollectionIdMetaDatumMetaKeyIdTextPutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['collectionId'] == null) {
            throw new runtime.RequiredError(
                'collectionId',
                'Required parameter "collectionId" was null or undefined when calling apiV2CollectionCollectionIdMetaDatumMetaKeyIdTextPut().'
            );
        }

        if (requestParameters['metaKeyId'] == null) {
            throw new runtime.RequiredError(
                'metaKeyId',
                'Required parameter "metaKeyId" was null or undefined when calling apiV2CollectionCollectionIdMetaDatumMetaKeyIdTextPut().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling apiV2CollectionCollectionIdMetaDatumMetaKeyIdTextPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api-v2/collection/{collection_id}/meta-datum/{meta_key_id}/text`.replace(`{${"collection_id"}}`, encodeURIComponent(String(requestParameters['collectionId']))).replace(`{${"meta_key_id"}}`, encodeURIComponent(String(requestParameters['metaKeyId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ApiV2CollectionCollectionIdMetaDatumMetaKeyIdTextPutRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Update meta-data text for collection.
     */
    async apiV2CollectionCollectionIdMetaDatumMetaKeyIdTextPut(requestParameters: ApiV2CollectionCollectionIdMetaDatumMetaKeyIdTextPutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.apiV2CollectionCollectionIdMetaDatumMetaKeyIdTextPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Query collection permissions.
     */
    async apiV2CollectionCollectionIdPermsGetRaw(requestParameters: ApiV2CollectionCollectionIdPermsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiV2CollectionCollectionIdPermsGet200Response>> {
        if (requestParameters['collectionId'] == null) {
            throw new runtime.RequiredError(
                'collectionId',
                'Required parameter "collectionId" was null or undefined when calling apiV2CollectionCollectionIdPermsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api-v2/collection/{collection_id}/perms/`.replace(`{${"collection_id"}}`, encodeURIComponent(String(requestParameters['collectionId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiV2CollectionCollectionIdPermsGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Query collection permissions.
     */
    async apiV2CollectionCollectionIdPermsGet(requestParameters: ApiV2CollectionCollectionIdPermsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiV2CollectionCollectionIdPermsGet200Response> {
        const response = await this.apiV2CollectionCollectionIdPermsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete collection group permissions.
     */
    async apiV2CollectionCollectionIdPermsGroupGroupIdDeleteRaw(requestParameters: ApiV2CollectionCollectionIdPermsGroupGroupIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiV2CollectionCollectionIdPermsGroupGroupIdGet200Response>> {
        if (requestParameters['collectionId'] == null) {
            throw new runtime.RequiredError(
                'collectionId',
                'Required parameter "collectionId" was null or undefined when calling apiV2CollectionCollectionIdPermsGroupGroupIdDelete().'
            );
        }

        if (requestParameters['groupId'] == null) {
            throw new runtime.RequiredError(
                'groupId',
                'Required parameter "groupId" was null or undefined when calling apiV2CollectionCollectionIdPermsGroupGroupIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api-v2/collection/{collection_id}/perms/group/{group_id}`.replace(`{${"collection_id"}}`, encodeURIComponent(String(requestParameters['collectionId']))).replace(`{${"group_id"}}`, encodeURIComponent(String(requestParameters['groupId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiV2CollectionCollectionIdPermsGroupGroupIdGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Delete collection group permissions.
     */
    async apiV2CollectionCollectionIdPermsGroupGroupIdDelete(requestParameters: ApiV2CollectionCollectionIdPermsGroupGroupIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiV2CollectionCollectionIdPermsGroupGroupIdGet200Response> {
        const response = await this.apiV2CollectionCollectionIdPermsGroupGroupIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get collection group permissions.
     */
    async apiV2CollectionCollectionIdPermsGroupGroupIdGetRaw(requestParameters: ApiV2CollectionCollectionIdPermsGroupGroupIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiV2CollectionCollectionIdPermsGroupGroupIdGet200Response>> {
        if (requestParameters['collectionId'] == null) {
            throw new runtime.RequiredError(
                'collectionId',
                'Required parameter "collectionId" was null or undefined when calling apiV2CollectionCollectionIdPermsGroupGroupIdGet().'
            );
        }

        if (requestParameters['groupId'] == null) {
            throw new runtime.RequiredError(
                'groupId',
                'Required parameter "groupId" was null or undefined when calling apiV2CollectionCollectionIdPermsGroupGroupIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api-v2/collection/{collection_id}/perms/group/{group_id}`.replace(`{${"collection_id"}}`, encodeURIComponent(String(requestParameters['collectionId']))).replace(`{${"group_id"}}`, encodeURIComponent(String(requestParameters['groupId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiV2CollectionCollectionIdPermsGroupGroupIdGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Get collection group permissions.
     */
    async apiV2CollectionCollectionIdPermsGroupGroupIdGet(requestParameters: ApiV2CollectionCollectionIdPermsGroupGroupIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiV2CollectionCollectionIdPermsGroupGroupIdGet200Response> {
        const response = await this.apiV2CollectionCollectionIdPermsGroupGroupIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Valid perm_name values are[\"get_metadata_and_previews\" \"get_full_size\" \"edit_metadata\" \"edit_permissions\"]
     * Update collection group permissions
     */
    async apiV2CollectionCollectionIdPermsGroupGroupIdPermNamePermValPutRaw(requestParameters: ApiV2CollectionCollectionIdPermsGroupGroupIdPermNamePermValPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiV2CollectionCollectionIdPermsGroupGroupIdGet200Response>> {
        if (requestParameters['collectionId'] == null) {
            throw new runtime.RequiredError(
                'collectionId',
                'Required parameter "collectionId" was null or undefined when calling apiV2CollectionCollectionIdPermsGroupGroupIdPermNamePermValPut().'
            );
        }

        if (requestParameters['groupId'] == null) {
            throw new runtime.RequiredError(
                'groupId',
                'Required parameter "groupId" was null or undefined when calling apiV2CollectionCollectionIdPermsGroupGroupIdPermNamePermValPut().'
            );
        }

        if (requestParameters['permName'] == null) {
            throw new runtime.RequiredError(
                'permName',
                'Required parameter "permName" was null or undefined when calling apiV2CollectionCollectionIdPermsGroupGroupIdPermNamePermValPut().'
            );
        }

        if (requestParameters['permVal'] == null) {
            throw new runtime.RequiredError(
                'permVal',
                'Required parameter "permVal" was null or undefined when calling apiV2CollectionCollectionIdPermsGroupGroupIdPermNamePermValPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api-v2/collection/{collection_id}/perms/group/{group_id}/{perm_name}/{perm_val}`.replace(`{${"collection_id"}}`, encodeURIComponent(String(requestParameters['collectionId']))).replace(`{${"group_id"}}`, encodeURIComponent(String(requestParameters['groupId']))).replace(`{${"perm_name"}}`, encodeURIComponent(String(requestParameters['permName']))).replace(`{${"perm_val"}}`, encodeURIComponent(String(requestParameters['permVal']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiV2CollectionCollectionIdPermsGroupGroupIdGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Valid perm_name values are[\"get_metadata_and_previews\" \"get_full_size\" \"edit_metadata\" \"edit_permissions\"]
     * Update collection group permissions
     */
    async apiV2CollectionCollectionIdPermsGroupGroupIdPermNamePermValPut(requestParameters: ApiV2CollectionCollectionIdPermsGroupGroupIdPermNamePermValPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiV2CollectionCollectionIdPermsGroupGroupIdGet200Response> {
        const response = await this.apiV2CollectionCollectionIdPermsGroupGroupIdPermNamePermValPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create collection group permissions.
     */
    async apiV2CollectionCollectionIdPermsGroupGroupIdPostRaw(requestParameters: ApiV2CollectionCollectionIdPermsGroupGroupIdPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiV2CollectionCollectionIdPermsGroupGroupIdGet200Response>> {
        if (requestParameters['collectionId'] == null) {
            throw new runtime.RequiredError(
                'collectionId',
                'Required parameter "collectionId" was null or undefined when calling apiV2CollectionCollectionIdPermsGroupGroupIdPost().'
            );
        }

        if (requestParameters['groupId'] == null) {
            throw new runtime.RequiredError(
                'groupId',
                'Required parameter "groupId" was null or undefined when calling apiV2CollectionCollectionIdPermsGroupGroupIdPost().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling apiV2CollectionCollectionIdPermsGroupGroupIdPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api-v2/collection/{collection_id}/perms/group/{group_id}`.replace(`{${"collection_id"}}`, encodeURIComponent(String(requestParameters['collectionId']))).replace(`{${"group_id"}}`, encodeURIComponent(String(requestParameters['groupId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApiV2CollectionCollectionIdPermsGroupGroupIdPostRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiV2CollectionCollectionIdPermsGroupGroupIdGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Create collection group permissions.
     */
    async apiV2CollectionCollectionIdPermsGroupGroupIdPost(requestParameters: ApiV2CollectionCollectionIdPermsGroupGroupIdPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiV2CollectionCollectionIdPermsGroupGroupIdGet200Response> {
        const response = await this.apiV2CollectionCollectionIdPermsGroupGroupIdPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Query collection permissions.
     */
    async apiV2CollectionCollectionIdPermsGroupsGetRaw(requestParameters: ApiV2CollectionCollectionIdPermsGroupsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<object>>> {
        if (requestParameters['collectionId'] == null) {
            throw new runtime.RequiredError(
                'collectionId',
                'Required parameter "collectionId" was null or undefined when calling apiV2CollectionCollectionIdPermsGroupsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api-v2/collection/{collection_id}/perms/groups`.replace(`{${"collection_id"}}`, encodeURIComponent(String(requestParameters['collectionId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Query collection permissions.
     */
    async apiV2CollectionCollectionIdPermsGroupsGet(requestParameters: ApiV2CollectionCollectionIdPermsGroupsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<object>> {
        const response = await this.apiV2CollectionCollectionIdPermsGroupsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Valid perm_name values are[\"get_metadata_and_previews\" \"get_full_size\" \"edit_metadata\" \"edit_permissions\"]
     * Update collection entity permissions
     */
    async apiV2CollectionCollectionIdPermsResourcePermNamePermValPutRaw(requestParameters: ApiV2CollectionCollectionIdPermsResourcePermNamePermValPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiV2CollectionCollectionIdPermsResourcesGet200Response>> {
        if (requestParameters['collectionId'] == null) {
            throw new runtime.RequiredError(
                'collectionId',
                'Required parameter "collectionId" was null or undefined when calling apiV2CollectionCollectionIdPermsResourcePermNamePermValPut().'
            );
        }

        if (requestParameters['permName'] == null) {
            throw new runtime.RequiredError(
                'permName',
                'Required parameter "permName" was null or undefined when calling apiV2CollectionCollectionIdPermsResourcePermNamePermValPut().'
            );
        }

        if (requestParameters['permVal'] == null) {
            throw new runtime.RequiredError(
                'permVal',
                'Required parameter "permVal" was null or undefined when calling apiV2CollectionCollectionIdPermsResourcePermNamePermValPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api-v2/collection/{collection_id}/perms/resource/{perm_name}/{perm_val}`.replace(`{${"collection_id"}}`, encodeURIComponent(String(requestParameters['collectionId']))).replace(`{${"perm_name"}}`, encodeURIComponent(String(requestParameters['permName']))).replace(`{${"perm_val"}}`, encodeURIComponent(String(requestParameters['permVal']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiV2CollectionCollectionIdPermsResourcesGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Valid perm_name values are[\"get_metadata_and_previews\" \"get_full_size\" \"edit_metadata\" \"edit_permissions\"]
     * Update collection entity permissions
     */
    async apiV2CollectionCollectionIdPermsResourcePermNamePermValPut(requestParameters: ApiV2CollectionCollectionIdPermsResourcePermNamePermValPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiV2CollectionCollectionIdPermsResourcesGet200Response> {
        const response = await this.apiV2CollectionCollectionIdPermsResourcePermNamePermValPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Query collection permissions.
     */
    async apiV2CollectionCollectionIdPermsResourcesGetRaw(requestParameters: ApiV2CollectionCollectionIdPermsResourcesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiV2CollectionCollectionIdPermsResourcesGet200Response>> {
        if (requestParameters['collectionId'] == null) {
            throw new runtime.RequiredError(
                'collectionId',
                'Required parameter "collectionId" was null or undefined when calling apiV2CollectionCollectionIdPermsResourcesGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api-v2/collection/{collection_id}/perms/resources`.replace(`{${"collection_id"}}`, encodeURIComponent(String(requestParameters['collectionId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiV2CollectionCollectionIdPermsResourcesGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Query collection permissions.
     */
    async apiV2CollectionCollectionIdPermsResourcesGet(requestParameters: ApiV2CollectionCollectionIdPermsResourcesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiV2CollectionCollectionIdPermsResourcesGet200Response> {
        const response = await this.apiV2CollectionCollectionIdPermsResourcesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Valid perm_name values are[\"get_metadata_and_previews\" \"get_full_size\" \"edit_metadata\" \"edit_permissions\"]
     * Update collection entity permissions
     */
    async apiV2CollectionCollectionIdPermsResourcesPutRaw(requestParameters: ApiV2CollectionCollectionIdPermsResourcesPutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiV2CollectionCollectionIdPermsResourcesGet200Response>> {
        if (requestParameters['collectionId'] == null) {
            throw new runtime.RequiredError(
                'collectionId',
                'Required parameter "collectionId" was null or undefined when calling apiV2CollectionCollectionIdPermsResourcesPut().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling apiV2CollectionCollectionIdPermsResourcesPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api-v2/collection/{collection_id}/perms/resources`.replace(`{${"collection_id"}}`, encodeURIComponent(String(requestParameters['collectionId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ApiV2CollectionCollectionIdPermsResourcesPutRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiV2CollectionCollectionIdPermsResourcesGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Valid perm_name values are[\"get_metadata_and_previews\" \"get_full_size\" \"edit_metadata\" \"edit_permissions\"]
     * Update collection entity permissions
     */
    async apiV2CollectionCollectionIdPermsResourcesPut(requestParameters: ApiV2CollectionCollectionIdPermsResourcesPutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiV2CollectionCollectionIdPermsResourcesGet200Response> {
        const response = await this.apiV2CollectionCollectionIdPermsResourcesPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete collection user permissions.
     */
    async apiV2CollectionCollectionIdPermsUserUserIdDeleteRaw(requestParameters: ApiV2CollectionCollectionIdPermsUserUserIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiV2CollectionCollectionIdPermsUserUserIdGet200Response>> {
        if (requestParameters['collectionId'] == null) {
            throw new runtime.RequiredError(
                'collectionId',
                'Required parameter "collectionId" was null or undefined when calling apiV2CollectionCollectionIdPermsUserUserIdDelete().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling apiV2CollectionCollectionIdPermsUserUserIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api-v2/collection/{collection_id}/perms/user/{user_id}`.replace(`{${"collection_id"}}`, encodeURIComponent(String(requestParameters['collectionId']))).replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiV2CollectionCollectionIdPermsUserUserIdGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Delete collection user permissions.
     */
    async apiV2CollectionCollectionIdPermsUserUserIdDelete(requestParameters: ApiV2CollectionCollectionIdPermsUserUserIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiV2CollectionCollectionIdPermsUserUserIdGet200Response> {
        const response = await this.apiV2CollectionCollectionIdPermsUserUserIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get collection user permissions.
     */
    async apiV2CollectionCollectionIdPermsUserUserIdGetRaw(requestParameters: ApiV2CollectionCollectionIdPermsUserUserIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiV2CollectionCollectionIdPermsUserUserIdGet200Response>> {
        if (requestParameters['collectionId'] == null) {
            throw new runtime.RequiredError(
                'collectionId',
                'Required parameter "collectionId" was null or undefined when calling apiV2CollectionCollectionIdPermsUserUserIdGet().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling apiV2CollectionCollectionIdPermsUserUserIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api-v2/collection/{collection_id}/perms/user/{user_id}`.replace(`{${"collection_id"}}`, encodeURIComponent(String(requestParameters['collectionId']))).replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiV2CollectionCollectionIdPermsUserUserIdGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Get collection user permissions.
     */
    async apiV2CollectionCollectionIdPermsUserUserIdGet(requestParameters: ApiV2CollectionCollectionIdPermsUserUserIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiV2CollectionCollectionIdPermsUserUserIdGet200Response> {
        const response = await this.apiV2CollectionCollectionIdPermsUserUserIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update collection user permissions
     */
    async apiV2CollectionCollectionIdPermsUserUserIdPermNamePermValPutRaw(requestParameters: ApiV2CollectionCollectionIdPermsUserUserIdPermNamePermValPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiV2CollectionCollectionIdPermsUserUserIdGet200Response>> {
        if (requestParameters['collectionId'] == null) {
            throw new runtime.RequiredError(
                'collectionId',
                'Required parameter "collectionId" was null or undefined when calling apiV2CollectionCollectionIdPermsUserUserIdPermNamePermValPut().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling apiV2CollectionCollectionIdPermsUserUserIdPermNamePermValPut().'
            );
        }

        if (requestParameters['permName'] == null) {
            throw new runtime.RequiredError(
                'permName',
                'Required parameter "permName" was null or undefined when calling apiV2CollectionCollectionIdPermsUserUserIdPermNamePermValPut().'
            );
        }

        if (requestParameters['permVal'] == null) {
            throw new runtime.RequiredError(
                'permVal',
                'Required parameter "permVal" was null or undefined when calling apiV2CollectionCollectionIdPermsUserUserIdPermNamePermValPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api-v2/collection/{collection_id}/perms/user/{user_id}/{perm_name}/{perm_val}`.replace(`{${"collection_id"}}`, encodeURIComponent(String(requestParameters['collectionId']))).replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters['userId']))).replace(`{${"perm_name"}}`, encodeURIComponent(String(requestParameters['permName']))).replace(`{${"perm_val"}}`, encodeURIComponent(String(requestParameters['permVal']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiV2CollectionCollectionIdPermsUserUserIdGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Update collection user permissions
     */
    async apiV2CollectionCollectionIdPermsUserUserIdPermNamePermValPut(requestParameters: ApiV2CollectionCollectionIdPermsUserUserIdPermNamePermValPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiV2CollectionCollectionIdPermsUserUserIdGet200Response> {
        const response = await this.apiV2CollectionCollectionIdPermsUserUserIdPermNamePermValPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create collection user permissions.
     */
    async apiV2CollectionCollectionIdPermsUserUserIdPostRaw(requestParameters: ApiV2CollectionCollectionIdPermsUserUserIdPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiV2CollectionCollectionIdPermsUserUserIdGet200Response>> {
        if (requestParameters['collectionId'] == null) {
            throw new runtime.RequiredError(
                'collectionId',
                'Required parameter "collectionId" was null or undefined when calling apiV2CollectionCollectionIdPermsUserUserIdPost().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling apiV2CollectionCollectionIdPermsUserUserIdPost().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling apiV2CollectionCollectionIdPermsUserUserIdPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api-v2/collection/{collection_id}/perms/user/{user_id}`.replace(`{${"collection_id"}}`, encodeURIComponent(String(requestParameters['collectionId']))).replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApiV2CollectionCollectionIdPermsUserUserIdPostRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiV2CollectionCollectionIdPermsUserUserIdGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Create collection user permissions.
     */
    async apiV2CollectionCollectionIdPermsUserUserIdPost(requestParameters: ApiV2CollectionCollectionIdPermsUserUserIdPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiV2CollectionCollectionIdPermsUserUserIdGet200Response> {
        const response = await this.apiV2CollectionCollectionIdPermsUserUserIdPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Query collection permissions.
     */
    async apiV2CollectionCollectionIdPermsUsersGetRaw(requestParameters: ApiV2CollectionCollectionIdPermsUsersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<object>>> {
        if (requestParameters['collectionId'] == null) {
            throw new runtime.RequiredError(
                'collectionId',
                'Required parameter "collectionId" was null or undefined when calling apiV2CollectionCollectionIdPermsUsersGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api-v2/collection/{collection_id}/perms/users`.replace(`{${"collection_id"}}`, encodeURIComponent(String(requestParameters['collectionId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Query collection permissions.
     */
    async apiV2CollectionCollectionIdPermsUsersGet(requestParameters: ApiV2CollectionCollectionIdPermsUsersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<object>> {
        const response = await this.apiV2CollectionCollectionIdPermsUsersGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * USER Context: Update collection for id.
     */
    async apiV2CollectionCollectionIdPutRaw(requestParameters: ApiV2CollectionCollectionIdPutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiV2CollectionPost200Response>> {
        if (requestParameters['collectionId'] == null) {
            throw new runtime.RequiredError(
                'collectionId',
                'Required parameter "collectionId" was null or undefined when calling apiV2CollectionCollectionIdPut().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling apiV2CollectionCollectionIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api-v2/collection/{collection_id}`.replace(`{${"collection_id"}}`, encodeURIComponent(String(requestParameters['collectionId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ApiV2CollectionCollectionIdPutRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiV2CollectionPost200ResponseFromJSON(jsonValue));
    }

    /**
     * USER Context: Update collection for id.
     */
    async apiV2CollectionCollectionIdPut(requestParameters: ApiV2CollectionCollectionIdPutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiV2CollectionPost200Response> {
        const response = await this.apiV2CollectionCollectionIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Query collection media-entry arcs.
     */
    async apiV2CollectionMediaEntryArcsGetRaw(requestParameters: ApiV2CollectionMediaEntryArcsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        if (requestParameters['collectionId'] != null) {
            queryParameters['collection_id'] = requestParameters['collectionId'];
        }

        if (requestParameters['mediaEntryId'] != null) {
            queryParameters['media_entry_id'] = requestParameters['mediaEntryId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api-v2/collection-media-entry-arcs/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Query collection media-entry arcs.
     */
    async apiV2CollectionMediaEntryArcsGet(requestParameters: ApiV2CollectionMediaEntryArcsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.apiV2CollectionMediaEntryArcsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get collection media-entry arc.
     */
    async apiV2CollectionMediaEntryArcsIdGetRaw(requestParameters: ApiV2CollectionMediaEntryArcsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiV2CollectionMediaEntryArcsIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api-v2/collection-media-entry-arcs/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get collection media-entry arc.
     */
    async apiV2CollectionMediaEntryArcsIdGet(requestParameters: ApiV2CollectionMediaEntryArcsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.apiV2CollectionMediaEntryArcsIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * USER Context: Delete collection collection arc
     */
    async apiV2CollectionParentIdCollectionArcChildIdDeleteRaw(requestParameters: ApiV2CollectionParentIdCollectionArcChildIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['parentId'] == null) {
            throw new runtime.RequiredError(
                'parentId',
                'Required parameter "parentId" was null or undefined when calling apiV2CollectionParentIdCollectionArcChildIdDelete().'
            );
        }

        if (requestParameters['childId'] == null) {
            throw new runtime.RequiredError(
                'childId',
                'Required parameter "childId" was null or undefined when calling apiV2CollectionParentIdCollectionArcChildIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api-v2/collection/{parent_id}/collection-arc/{child_id}`.replace(`{${"parent_id"}}`, encodeURIComponent(String(requestParameters['parentId']))).replace(`{${"child_id"}}`, encodeURIComponent(String(requestParameters['childId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * USER Context: Delete collection collection arc
     */
    async apiV2CollectionParentIdCollectionArcChildIdDelete(requestParameters: ApiV2CollectionParentIdCollectionArcChildIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.apiV2CollectionParentIdCollectionArcChildIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get collection collection arcs.
     */
    async apiV2CollectionParentIdCollectionArcChildIdGetRaw(requestParameters: ApiV2CollectionParentIdCollectionArcChildIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['parentId'] == null) {
            throw new runtime.RequiredError(
                'parentId',
                'Required parameter "parentId" was null or undefined when calling apiV2CollectionParentIdCollectionArcChildIdGet().'
            );
        }

        if (requestParameters['childId'] == null) {
            throw new runtime.RequiredError(
                'childId',
                'Required parameter "childId" was null or undefined when calling apiV2CollectionParentIdCollectionArcChildIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api-v2/collection/{parent_id}/collection-arc/{child_id}`.replace(`{${"parent_id"}}`, encodeURIComponent(String(requestParameters['parentId']))).replace(`{${"child_id"}}`, encodeURIComponent(String(requestParameters['childId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get collection collection arcs.
     */
    async apiV2CollectionParentIdCollectionArcChildIdGet(requestParameters: ApiV2CollectionParentIdCollectionArcChildIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.apiV2CollectionParentIdCollectionArcChildIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * TODO: Create collection collection arc
     */
    async apiV2CollectionParentIdCollectionArcChildIdPostRaw(requestParameters: ApiV2CollectionParentIdCollectionArcChildIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['parentId'] == null) {
            throw new runtime.RequiredError(
                'parentId',
                'Required parameter "parentId" was null or undefined when calling apiV2CollectionParentIdCollectionArcChildIdPost().'
            );
        }

        if (requestParameters['childId'] == null) {
            throw new runtime.RequiredError(
                'childId',
                'Required parameter "childId" was null or undefined when calling apiV2CollectionParentIdCollectionArcChildIdPost().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling apiV2CollectionParentIdCollectionArcChildIdPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api-v2/collection/{parent_id}/collection-arc/{child_id}`.replace(`{${"parent_id"}}`, encodeURIComponent(String(requestParameters['parentId']))).replace(`{${"child_id"}}`, encodeURIComponent(String(requestParameters['childId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApiV2CollectionParentIdCollectionArcChildIdPutRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * TODO: Create collection collection arc
     */
    async apiV2CollectionParentIdCollectionArcChildIdPost(requestParameters: ApiV2CollectionParentIdCollectionArcChildIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.apiV2CollectionParentIdCollectionArcChildIdPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * USER Context: Update collection collection arc
     */
    async apiV2CollectionParentIdCollectionArcChildIdPutRaw(requestParameters: ApiV2CollectionParentIdCollectionArcChildIdPutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['parentId'] == null) {
            throw new runtime.RequiredError(
                'parentId',
                'Required parameter "parentId" was null or undefined when calling apiV2CollectionParentIdCollectionArcChildIdPut().'
            );
        }

        if (requestParameters['childId'] == null) {
            throw new runtime.RequiredError(
                'childId',
                'Required parameter "childId" was null or undefined when calling apiV2CollectionParentIdCollectionArcChildIdPut().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling apiV2CollectionParentIdCollectionArcChildIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api-v2/collection/{parent_id}/collection-arc/{child_id}`.replace(`{${"parent_id"}}`, encodeURIComponent(String(requestParameters['parentId']))).replace(`{${"child_id"}}`, encodeURIComponent(String(requestParameters['childId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ApiV2CollectionParentIdCollectionArcChildIdPutRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * USER Context: Update collection collection arc
     */
    async apiV2CollectionParentIdCollectionArcChildIdPut(requestParameters: ApiV2CollectionParentIdCollectionArcChildIdPutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.apiV2CollectionParentIdCollectionArcChildIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * USER Context: Create collection
     */
    async apiV2CollectionPostRaw(requestParameters: ApiV2CollectionPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiV2CollectionPost200Response>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling apiV2CollectionPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api-v2/collection`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApiV2CollectionPostRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiV2CollectionPost200ResponseFromJSON(jsonValue));
    }

    /**
     * USER Context: Create collection
     */
    async apiV2CollectionPost(requestParameters: ApiV2CollectionPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiV2CollectionPost200Response> {
        const response = await this.apiV2CollectionPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * USER Context: Query/List collections.
     */
    async apiV2CollectionsGetRaw(requestParameters: ApiV2CollectionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiV2CollectionsGet200Response>> {
        const queryParameters: any = {};

        if (requestParameters['meEditPermission'] != null) {
            queryParameters['me_edit_permission'] = requestParameters['meEditPermission'];
        }

        if (requestParameters['count'] != null) {
            queryParameters['count'] = requestParameters['count'];
        }

        if (requestParameters['meEditMetadataAndRelations'] != null) {
            queryParameters['me_edit_metadata_and_relations'] = requestParameters['meEditMetadataAndRelations'];
        }

        if (requestParameters['meGetMetadataAndPreviews'] != null) {
            queryParameters['me_get_metadata_and_previews'] = requestParameters['meGetMetadataAndPreviews'];
        }

        if (requestParameters['collectionId'] != null) {
            queryParameters['collection_id'] = requestParameters['collectionId'];
        }

        if (requestParameters['clipboardUserId'] != null) {
            queryParameters['clipboard_user_id'] = requestParameters['clipboardUserId'];
        }

        if (requestParameters['order'] != null) {
            queryParameters['order'] = requestParameters['order'];
        }

        if (requestParameters['responsibleDelegationId'] != null) {
            queryParameters['responsible_delegation_id'] = requestParameters['responsibleDelegationId'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['workflowId'] != null) {
            queryParameters['workflow_id'] = requestParameters['workflowId'];
        }

        if (requestParameters['responsibleUserId'] != null) {
            queryParameters['responsible_user_id'] = requestParameters['responsibleUserId'];
        }

        if (requestParameters['creatorId'] != null) {
            queryParameters['creator_id'] = requestParameters['creatorId'];
        }

        if (requestParameters['fullData'] != null) {
            queryParameters['full_data'] = requestParameters['fullData'];
        }

        if (requestParameters['publicGetMetadataAndPreviews'] != null) {
            queryParameters['public_get_metadata_and_previews'] = requestParameters['publicGetMetadataAndPreviews'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api-v2/collections`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiV2CollectionsGet200ResponseFromJSON(jsonValue));
    }

    /**
     * USER Context: Query/List collections.
     */
    async apiV2CollectionsGet(requestParameters: ApiV2CollectionsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiV2CollectionsGet200Response> {
        const response = await this.apiV2CollectionsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * PUBLIC Context: Query / List context_keys.
     */
    async apiV2ContextKeysGetRaw(requestParameters: ApiV2ContextKeysGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<object>>> {
        const queryParameters: any = {};

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        if (requestParameters['contextId'] != null) {
            queryParameters['context_id'] = requestParameters['contextId'];
        }

        if (requestParameters['metaKeyId'] != null) {
            queryParameters['meta_key_id'] = requestParameters['metaKeyId'];
        }

        if (requestParameters['isRequired'] != null) {
            queryParameters['is_required'] = requestParameters['isRequired'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api-v2/context-keys/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * PUBLIC Context: Query / List context_keys.
     */
    async apiV2ContextKeysGet(requestParameters: ApiV2ContextKeysGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<object>> {
        const response = await this.apiV2ContextKeysGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * PUBLIC Context: Get context_key by id.
     */
    async apiV2ContextKeysIdGetRaw(requestParameters: ApiV2ContextKeysIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiV2ContextKeysIdGet200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiV2ContextKeysIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api-v2/context-keys/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiV2ContextKeysIdGet200ResponseFromJSON(jsonValue));
    }

    /**
     * PUBLIC Context: Get context_key by id.
     */
    async apiV2ContextKeysIdGet(requestParameters: ApiV2ContextKeysIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiV2ContextKeysIdGet200Response> {
        const response = await this.apiV2ContextKeysIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * USER Context: List contexts.
     */
    async apiV2ContextsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<object>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api-v2/contexts/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * USER Context: List contexts.
     */
    async apiV2ContextsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<object>> {
        const response = await this.apiV2ContextsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * USER Context: Get contexts by id.
     */
    async apiV2ContextsIdGetRaw(requestParameters: ApiV2ContextsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiV2ContextsIdGet200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiV2ContextsIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api-v2/contexts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiV2ContextsIdGet200ResponseFromJSON(jsonValue));
    }

    /**
     * USER Context: Get contexts by id.
     */
    async apiV2ContextsIdGet(requestParameters: ApiV2ContextsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiV2ContextsIdGet200Response> {
        const response = await this.apiV2ContextsIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * USER Context: Query and list custom_urls.
     */
    async apiV2CustomUrlsGetRaw(requestParameters: ApiV2CustomUrlsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['fullData'] != null) {
            queryParameters['full_data'] = requestParameters['fullData'];
        }

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        if (requestParameters['mediaEntryId'] != null) {
            queryParameters['media_entry_id'] = requestParameters['mediaEntryId'];
        }

        if (requestParameters['collectionId'] != null) {
            queryParameters['collection_id'] = requestParameters['collectionId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api-v2/custom_urls/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * USER Context: Query and list custom_urls.
     */
    async apiV2CustomUrlsGet(requestParameters: ApiV2CustomUrlsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiV2CustomUrlsGetRaw(requestParameters, initOverrides);
    }

    /**
     * USER Context: Get custom_url.
     */
    async apiV2CustomUrlsIdGetRaw(requestParameters: ApiV2CustomUrlsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiV2CustomUrlsIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api-v2/custom_urls/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * USER Context: Get custom_url.
     */
    async apiV2CustomUrlsIdGet(requestParameters: ApiV2CustomUrlsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiV2CustomUrlsIdGetRaw(requestParameters, initOverrides);
    }

    /**
     * USER Context: List authed users edit_sessions.
     */
    async apiV2EditSessionsGetRaw(requestParameters: ApiV2EditSessionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['fullData'] != null) {
            queryParameters['full_data'] = requestParameters['fullData'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['count'] != null) {
            queryParameters['count'] = requestParameters['count'];
        }

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        if (requestParameters['mediaEntryId'] != null) {
            queryParameters['media_entry_id'] = requestParameters['mediaEntryId'];
        }

        if (requestParameters['collectionId'] != null) {
            queryParameters['collection_id'] = requestParameters['collectionId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api-v2/edit_sessions/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * USER Context: List authed users edit_sessions.
     */
    async apiV2EditSessionsGet(requestParameters: ApiV2EditSessionsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiV2EditSessionsGetRaw(requestParameters, initOverrides);
    }

    /**
     * USER Context: Get edit_session.
     */
    async apiV2EditSessionsIdGetRaw(requestParameters: ApiV2EditSessionsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiV2EditSessionsIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api-v2/edit_sessions/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * USER Context: Get edit_session.
     */
    async apiV2EditSessionsIdGet(requestParameters: ApiV2EditSessionsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiV2EditSessionsIdGetRaw(requestParameters, initOverrides);
    }

    /**
     * USER Context: List users favorite_collections.
     */
    async apiV2FavoriteCollectionsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiV2FavoriteCollectionsGet200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api-v2/favorite/collections`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiV2FavoriteCollectionsGet200ResponseFromJSON(jsonValue));
    }

    /**
     * USER Context: List users favorite_collections.
     */
    async apiV2FavoriteCollectionsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiV2FavoriteCollectionsGet200Response> {
        const response = await this.apiV2FavoriteCollectionsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * USER Context: List users favorites media_entries ids.
     */
    async apiV2FavoriteMediaEntriesGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiV2FavoriteMediaEntriesGet200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api-v2/favorite/media-entries`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiV2FavoriteMediaEntriesGet200ResponseFromJSON(jsonValue));
    }

    /**
     * USER Context: List users favorites media_entries ids.
     */
    async apiV2FavoriteMediaEntriesGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiV2FavoriteMediaEntriesGet200Response> {
        const response = await this.apiV2FavoriteMediaEntriesGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * USER Context: Query or list full_texts.
     */
    async apiV2FullTextsGetRaw(requestParameters: ApiV2FullTextsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['fullData'] != null) {
            queryParameters['full_data'] = requestParameters['fullData'];
        }

        if (requestParameters['mediaResourceId'] != null) {
            queryParameters['media_resource_id'] = requestParameters['mediaResourceId'];
        }

        if (requestParameters['text'] != null) {
            queryParameters['text'] = requestParameters['text'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['count'] != null) {
            queryParameters['count'] = requestParameters['count'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api-v2/full_texts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * USER Context: Query or list full_texts.
     */
    async apiV2FullTextsGet(requestParameters: ApiV2FullTextsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiV2FullTextsGetRaw(requestParameters, initOverrides);
    }

    /**
     * USER Context: Get full_text.
     */
    async apiV2FullTextsMediaResourceIdGetRaw(requestParameters: ApiV2FullTextsMediaResourceIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['mediaResourceId'] == null) {
            throw new runtime.RequiredError(
                'mediaResourceId',
                'Required parameter "mediaResourceId" was null or undefined when calling apiV2FullTextsMediaResourceIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api-v2/full_texts/{media_resource_id}`.replace(`{${"media_resource_id"}}`, encodeURIComponent(String(requestParameters['mediaResourceId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * USER Context: Get full_text.
     */
    async apiV2FullTextsMediaResourceIdGet(requestParameters: ApiV2FullTextsMediaResourceIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiV2FullTextsMediaResourceIdGetRaw(requestParameters, initOverrides);
    }

    /**
     * Get list of group ids. Paging is used as you get a limit of 100 entries.
     * Get all group ids
     */
    async apiV2GroupsGetRaw(requestParameters: ApiV2GroupsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiV2GroupsGet200Response>> {
        const queryParameters: any = {};

        if (requestParameters['institutionalId'] != null) {
            queryParameters['institutional_id'] = requestParameters['institutionalId'];
        }

        if (requestParameters['institutionalName'] != null) {
            queryParameters['institutional_name'] = requestParameters['institutionalName'];
        }

        if (requestParameters['searchable'] != null) {
            queryParameters['searchable'] = requestParameters['searchable'];
        }

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        if (requestParameters['count'] != null) {
            queryParameters['count'] = requestParameters['count'];
        }

        if (requestParameters['personId'] != null) {
            queryParameters['person_id'] = requestParameters['personId'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        if (requestParameters['type'] != null) {
            queryParameters['type'] = requestParameters['type'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['fullData'] != null) {
            queryParameters['full_data'] = requestParameters['fullData'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api-v2/groups/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiV2GroupsGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Get list of group ids. Paging is used as you get a limit of 100 entries.
     * Get all group ids
     */
    async apiV2GroupsGet(requestParameters: ApiV2GroupsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiV2GroupsGet200Response> {
        const response = await this.apiV2GroupsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get group by id. Returns 404, if no such group exists.
     * Get group by id
     */
    async apiV2GroupsIdGetRaw(requestParameters: ApiV2GroupsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiV2GroupsIdGet200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiV2GroupsIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api-v2/groups/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiV2GroupsIdGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Get group by id. Returns 404, if no such group exists.
     * Get group by id
     */
    async apiV2GroupsIdGet(requestParameters: ApiV2GroupsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiV2GroupsIdGet200Response> {
        const response = await this.apiV2GroupsIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * PUBLIC Context: Query / list keywords.
     */
    async apiV2KeywordsGetRaw(requestParameters: ApiV2KeywordsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiV2KeywordsGet200Response>> {
        const queryParameters: any = {};

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        if (requestParameters['metaKeyId'] != null) {
            queryParameters['meta_key_id'] = requestParameters['metaKeyId'];
        }

        if (requestParameters['term'] != null) {
            queryParameters['term'] = requestParameters['term'];
        }

        if (requestParameters['description'] != null) {
            queryParameters['description'] = requestParameters['description'];
        }

        if (requestParameters['rdfClass'] != null) {
            queryParameters['rdf_class'] = requestParameters['rdfClass'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['count'] != null) {
            queryParameters['count'] = requestParameters['count'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api-v2/keywords/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiV2KeywordsGet200ResponseFromJSON(jsonValue));
    }

    /**
     * PUBLIC Context: Query / list keywords.
     */
    async apiV2KeywordsGet(requestParameters: ApiV2KeywordsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiV2KeywordsGet200Response> {
        const response = await this.apiV2KeywordsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get keyword for id. Returns 404, if no such keyword exists.
     * PUBLIC Context: Get keyword for id.
     */
    async apiV2KeywordsIdGetRaw(requestParameters: ApiV2KeywordsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiV2KeywordsIdGet200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiV2KeywordsIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api-v2/keywords/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiV2KeywordsIdGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Get keyword for id. Returns 404, if no such keyword exists.
     * PUBLIC Context: Get keyword for id.
     */
    async apiV2KeywordsIdGet(requestParameters: ApiV2KeywordsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiV2KeywordsIdGet200Response> {
        const response = await this.apiV2KeywordsIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiV2ManagementShutdownPostRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api-v2/management/shutdown`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiV2ManagementShutdownPost(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiV2ManagementShutdownPostRaw(initOverrides);
    }

    /**
     */
    async apiV2ManagementStatusGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api-v2/management/status`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiV2ManagementStatusGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiV2ManagementStatusGetRaw(initOverrides);
    }

    /**
     * Query media-entries.
     */
    async apiV2MediaEntriesGetRaw(requestParameters: ApiV2MediaEntriesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiV2MediaEntriesGet200Response>> {
        const queryParameters: any = {};

        if (requestParameters['meEditMetadata'] != null) {
            queryParameters['me_edit_metadata'] = requestParameters['meEditMetadata'];
        }

        if (requestParameters['publicGetFullSize'] != null) {
            queryParameters['public_get_full_size'] = requestParameters['publicGetFullSize'];
        }

        if (requestParameters['meEditPermissions'] != null) {
            queryParameters['me_edit_permissions'] = requestParameters['meEditPermissions'];
        }

        if (requestParameters['count'] != null) {
            queryParameters['count'] = requestParameters['count'];
        }

        if (requestParameters['filterBy'] != null) {
            queryParameters['filter_by'] = requestParameters['filterBy'];
        }

        if (requestParameters['meGetMetadataAndPreviews'] != null) {
            queryParameters['me_get_metadata_and_previews'] = requestParameters['meGetMetadataAndPreviews'];
        }

        if (requestParameters['meGetFullSize'] != null) {
            queryParameters['me_get_full_size'] = requestParameters['meGetFullSize'];
        }

        if (requestParameters['collectionId'] != null) {
            queryParameters['collection_id'] = requestParameters['collectionId'];
        }

        if (requestParameters['order'] != null) {
            queryParameters['order'] = requestParameters['order'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['fullData'] != null) {
            queryParameters['full_data'] = requestParameters['fullData'];
        }

        if (requestParameters['publicGetMetadataAndPreviews'] != null) {
            queryParameters['public_get_metadata_and_previews'] = requestParameters['publicGetMetadataAndPreviews'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api-v2/media-entries`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiV2MediaEntriesGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Query media-entries.
     */
    async apiV2MediaEntriesGet(requestParameters: ApiV2MediaEntriesGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiV2MediaEntriesGet200Response> {
        const response = await this.apiV2MediaEntriesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Query media-entries with all related data.
     */
    async apiV2MediaEntriesRelatedDataGetRaw(requestParameters: ApiV2MediaEntriesRelatedDataGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiV2MediaEntriesRelatedDataGet200Response>> {
        const queryParameters: any = {};

        if (requestParameters['meEditMetadata'] != null) {
            queryParameters['me_edit_metadata'] = requestParameters['meEditMetadata'];
        }

        if (requestParameters['publicGetFullSize'] != null) {
            queryParameters['public_get_full_size'] = requestParameters['publicGetFullSize'];
        }

        if (requestParameters['meEditPermissions'] != null) {
            queryParameters['me_edit_permissions'] = requestParameters['meEditPermissions'];
        }

        if (requestParameters['count'] != null) {
            queryParameters['count'] = requestParameters['count'];
        }

        if (requestParameters['filterBy'] != null) {
            queryParameters['filter_by'] = requestParameters['filterBy'];
        }

        if (requestParameters['meGetMetadataAndPreviews'] != null) {
            queryParameters['me_get_metadata_and_previews'] = requestParameters['meGetMetadataAndPreviews'];
        }

        if (requestParameters['meGetFullSize'] != null) {
            queryParameters['me_get_full_size'] = requestParameters['meGetFullSize'];
        }

        if (requestParameters['collectionId'] != null) {
            queryParameters['collection_id'] = requestParameters['collectionId'];
        }

        if (requestParameters['order'] != null) {
            queryParameters['order'] = requestParameters['order'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['fullData'] != null) {
            queryParameters['full_data'] = requestParameters['fullData'];
        }

        if (requestParameters['publicGetMetadataAndPreviews'] != null) {
            queryParameters['public_get_metadata_and_previews'] = requestParameters['publicGetMetadataAndPreviews'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api-v2/media-entries-related-data`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiV2MediaEntriesRelatedDataGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Query media-entries with all related data.
     */
    async apiV2MediaEntriesRelatedDataGet(requestParameters: ApiV2MediaEntriesRelatedDataGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiV2MediaEntriesRelatedDataGet200Response> {
        const response = await this.apiV2MediaEntriesRelatedDataGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * TODO: Delete custom_url for media entry.
     */
    async apiV2MediaEntryMediaEntryIdCustomUrlDeleteRaw(requestParameters: ApiV2MediaEntryMediaEntryIdCustomUrlDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiV2CollectionCollectionIdCustomUrlPut200Response>> {
        if (requestParameters['mediaEntryId'] == null) {
            throw new runtime.RequiredError(
                'mediaEntryId',
                'Required parameter "mediaEntryId" was null or undefined when calling apiV2MediaEntryMediaEntryIdCustomUrlDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api-v2/media-entry/{media_entry_id}/custom_url`.replace(`{${"media_entry_id"}}`, encodeURIComponent(String(requestParameters['mediaEntryId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiV2CollectionCollectionIdCustomUrlPut200ResponseFromJSON(jsonValue));
    }

    /**
     * TODO: Delete custom_url for media entry.
     */
    async apiV2MediaEntryMediaEntryIdCustomUrlDelete(requestParameters: ApiV2MediaEntryMediaEntryIdCustomUrlDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiV2CollectionCollectionIdCustomUrlPut200Response> {
        const response = await this.apiV2MediaEntryMediaEntryIdCustomUrlDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get custom_url for media entry.
     */
    async apiV2MediaEntryMediaEntryIdCustomUrlGetRaw(requestParameters: ApiV2MediaEntryMediaEntryIdCustomUrlGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiV2CollectionCollectionIdCustomUrlPut200Response>> {
        if (requestParameters['mediaEntryId'] == null) {
            throw new runtime.RequiredError(
                'mediaEntryId',
                'Required parameter "mediaEntryId" was null or undefined when calling apiV2MediaEntryMediaEntryIdCustomUrlGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api-v2/media-entry/{media_entry_id}/custom_url`.replace(`{${"media_entry_id"}}`, encodeURIComponent(String(requestParameters['mediaEntryId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiV2CollectionCollectionIdCustomUrlPut200ResponseFromJSON(jsonValue));
    }

    /**
     * Get custom_url for media entry.
     */
    async apiV2MediaEntryMediaEntryIdCustomUrlGet(requestParameters: ApiV2MediaEntryMediaEntryIdCustomUrlGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiV2CollectionCollectionIdCustomUrlPut200Response> {
        const response = await this.apiV2MediaEntryMediaEntryIdCustomUrlGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * USER Context: Create custom_url for media entry.
     */
    async apiV2MediaEntryMediaEntryIdCustomUrlPostRaw(requestParameters: ApiV2MediaEntryMediaEntryIdCustomUrlPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiV2CollectionCollectionIdCustomUrlPut200Response>> {
        if (requestParameters['mediaEntryId'] == null) {
            throw new runtime.RequiredError(
                'mediaEntryId',
                'Required parameter "mediaEntryId" was null or undefined when calling apiV2MediaEntryMediaEntryIdCustomUrlPost().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling apiV2MediaEntryMediaEntryIdCustomUrlPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api-v2/media-entry/{media_entry_id}/custom_url`.replace(`{${"media_entry_id"}}`, encodeURIComponent(String(requestParameters['mediaEntryId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApiV2CollectionCollectionIdCustomUrlPostRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiV2CollectionCollectionIdCustomUrlPut200ResponseFromJSON(jsonValue));
    }

    /**
     * USER Context: Create custom_url for media entry.
     */
    async apiV2MediaEntryMediaEntryIdCustomUrlPost(requestParameters: ApiV2MediaEntryMediaEntryIdCustomUrlPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiV2CollectionCollectionIdCustomUrlPut200Response> {
        const response = await this.apiV2MediaEntryMediaEntryIdCustomUrlPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * USER Context: Update custom_url for media entry.
     */
    async apiV2MediaEntryMediaEntryIdCustomUrlPutRaw(requestParameters: ApiV2MediaEntryMediaEntryIdCustomUrlPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiV2CollectionCollectionIdCustomUrlPut200Response>> {
        if (requestParameters['mediaEntryId'] == null) {
            throw new runtime.RequiredError(
                'mediaEntryId',
                'Required parameter "mediaEntryId" was null or undefined when calling apiV2MediaEntryMediaEntryIdCustomUrlPut().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling apiV2MediaEntryMediaEntryIdCustomUrlPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api-v2/media-entry/{media_entry_id}/custom_url`.replace(`{${"media_entry_id"}}`, encodeURIComponent(String(requestParameters['mediaEntryId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ApiV2CollectionCollectionIdCustomUrlPutRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiV2CollectionCollectionIdCustomUrlPut200ResponseFromJSON(jsonValue));
    }

    /**
     * USER Context: Update custom_url for media entry.
     */
    async apiV2MediaEntryMediaEntryIdCustomUrlPut(requestParameters: ApiV2MediaEntryMediaEntryIdCustomUrlPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiV2CollectionCollectionIdCustomUrlPut200Response> {
        const response = await this.apiV2MediaEntryMediaEntryIdCustomUrlPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete media-entry for id.
     */
    async apiV2MediaEntryMediaEntryIdDeleteRaw(requestParameters: ApiV2MediaEntryMediaEntryIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['mediaEntryId'] == null) {
            throw new runtime.RequiredError(
                'mediaEntryId',
                'Required parameter "mediaEntryId" was null or undefined when calling apiV2MediaEntryMediaEntryIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api-v2/media-entry/{media_entry_id}`.replace(`{${"media_entry_id"}}`, encodeURIComponent(String(requestParameters['mediaEntryId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete media-entry for id.
     */
    async apiV2MediaEntryMediaEntryIdDelete(requestParameters: ApiV2MediaEntryMediaEntryIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiV2MediaEntryMediaEntryIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * PUBLIC/USER Context: Get edit_session list for media entry.
     */
    async apiV2MediaEntryMediaEntryIdEditSessionsGetRaw(requestParameters: ApiV2MediaEntryMediaEntryIdEditSessionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<object>>> {
        if (requestParameters['mediaEntryId'] == null) {
            throw new runtime.RequiredError(
                'mediaEntryId',
                'Required parameter "mediaEntryId" was null or undefined when calling apiV2MediaEntryMediaEntryIdEditSessionsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api-v2/media-entry/{media_entry_id}/edit_sessions`.replace(`{${"media_entry_id"}}`, encodeURIComponent(String(requestParameters['mediaEntryId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * PUBLIC/USER Context: Get edit_session list for media entry.
     */
    async apiV2MediaEntryMediaEntryIdEditSessionsGet(requestParameters: ApiV2MediaEntryMediaEntryIdEditSessionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<object>> {
        const response = await this.apiV2MediaEntryMediaEntryIdEditSessionsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * USER Context: Create edit session for media entry and authed user.
     */
    async apiV2MediaEntryMediaEntryIdEditSessionsPostRaw(requestParameters: ApiV2MediaEntryMediaEntryIdEditSessionsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiV2CollectionCollectionIdEditSessionsPost200Response>> {
        if (requestParameters['mediaEntryId'] == null) {
            throw new runtime.RequiredError(
                'mediaEntryId',
                'Required parameter "mediaEntryId" was null or undefined when calling apiV2MediaEntryMediaEntryIdEditSessionsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api-v2/media-entry/{media_entry_id}/edit_sessions`.replace(`{${"media_entry_id"}}`, encodeURIComponent(String(requestParameters['mediaEntryId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiV2CollectionCollectionIdEditSessionsPost200ResponseFromJSON(jsonValue));
    }

    /**
     * USER Context: Create edit session for media entry and authed user.
     */
    async apiV2MediaEntryMediaEntryIdEditSessionsPost(requestParameters: ApiV2MediaEntryMediaEntryIdEditSessionsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiV2CollectionCollectionIdEditSessionsPost200Response> {
        const response = await this.apiV2MediaEntryMediaEntryIdEditSessionsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * USER Context: Delete favorite_media_entry for authed user and media-entry.
     */
    async apiV2MediaEntryMediaEntryIdFavoriteDeleteRaw(requestParameters: ApiV2MediaEntryMediaEntryIdFavoriteDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiV2MediaEntryMediaEntryIdFavoriteGet200Response>> {
        if (requestParameters['mediaEntryId'] == null) {
            throw new runtime.RequiredError(
                'mediaEntryId',
                'Required parameter "mediaEntryId" was null or undefined when calling apiV2MediaEntryMediaEntryIdFavoriteDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api-v2/media-entry/{media_entry_id}/favorite`.replace(`{${"media_entry_id"}}`, encodeURIComponent(String(requestParameters['mediaEntryId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiV2MediaEntryMediaEntryIdFavoriteGet200ResponseFromJSON(jsonValue));
    }

    /**
     * USER Context: Delete favorite_media_entry for authed user and media-entry.
     */
    async apiV2MediaEntryMediaEntryIdFavoriteDelete(requestParameters: ApiV2MediaEntryMediaEntryIdFavoriteDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiV2MediaEntryMediaEntryIdFavoriteGet200Response> {
        const response = await this.apiV2MediaEntryMediaEntryIdFavoriteDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * USER Context: Get favorite_media_entry for authed user and media-entry.
     */
    async apiV2MediaEntryMediaEntryIdFavoriteGetRaw(requestParameters: ApiV2MediaEntryMediaEntryIdFavoriteGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiV2MediaEntryMediaEntryIdFavoriteGet200Response>> {
        if (requestParameters['mediaEntryId'] == null) {
            throw new runtime.RequiredError(
                'mediaEntryId',
                'Required parameter "mediaEntryId" was null or undefined when calling apiV2MediaEntryMediaEntryIdFavoriteGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api-v2/media-entry/{media_entry_id}/favorite`.replace(`{${"media_entry_id"}}`, encodeURIComponent(String(requestParameters['mediaEntryId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiV2MediaEntryMediaEntryIdFavoriteGet200ResponseFromJSON(jsonValue));
    }

    /**
     * USER Context: Get favorite_media_entry for authed user and media-entry.
     */
    async apiV2MediaEntryMediaEntryIdFavoriteGet(requestParameters: ApiV2MediaEntryMediaEntryIdFavoriteGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiV2MediaEntryMediaEntryIdFavoriteGet200Response> {
        const response = await this.apiV2MediaEntryMediaEntryIdFavoriteGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * USER Context: Create favorite_media_entry for authed user and media-entry.
     */
    async apiV2MediaEntryMediaEntryIdFavoritePostRaw(requestParameters: ApiV2MediaEntryMediaEntryIdFavoritePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiV2MediaEntryMediaEntryIdFavoriteGet200Response>> {
        if (requestParameters['mediaEntryId'] == null) {
            throw new runtime.RequiredError(
                'mediaEntryId',
                'Required parameter "mediaEntryId" was null or undefined when calling apiV2MediaEntryMediaEntryIdFavoritePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api-v2/media-entry/{media_entry_id}/favorite`.replace(`{${"media_entry_id"}}`, encodeURIComponent(String(requestParameters['mediaEntryId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiV2MediaEntryMediaEntryIdFavoriteGet200ResponseFromJSON(jsonValue));
    }

    /**
     * USER Context: Create favorite_media_entry for authed user and media-entry.
     */
    async apiV2MediaEntryMediaEntryIdFavoritePost(requestParameters: ApiV2MediaEntryMediaEntryIdFavoritePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiV2MediaEntryMediaEntryIdFavoriteGet200Response> {
        const response = await this.apiV2MediaEntryMediaEntryIdFavoritePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * USER Context: Delete full_text.
     */
    async apiV2MediaEntryMediaEntryIdFullTextDeleteRaw(requestParameters: ApiV2MediaEntryMediaEntryIdFullTextDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['mediaEntryId'] == null) {
            throw new runtime.RequiredError(
                'mediaEntryId',
                'Required parameter "mediaEntryId" was null or undefined when calling apiV2MediaEntryMediaEntryIdFullTextDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api-v2/media-entry/{media_entry_id}/full_text`.replace(`{${"media_entry_id"}}`, encodeURIComponent(String(requestParameters['mediaEntryId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * USER Context: Delete full_text.
     */
    async apiV2MediaEntryMediaEntryIdFullTextDelete(requestParameters: ApiV2MediaEntryMediaEntryIdFullTextDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiV2MediaEntryMediaEntryIdFullTextDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * PUBLIC/USER Context: Get full_text.
     */
    async apiV2MediaEntryMediaEntryIdFullTextGetRaw(requestParameters: ApiV2MediaEntryMediaEntryIdFullTextGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['mediaEntryId'] == null) {
            throw new runtime.RequiredError(
                'mediaEntryId',
                'Required parameter "mediaEntryId" was null or undefined when calling apiV2MediaEntryMediaEntryIdFullTextGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api-v2/media-entry/{media_entry_id}/full_text`.replace(`{${"media_entry_id"}}`, encodeURIComponent(String(requestParameters['mediaEntryId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * PUBLIC/USER Context: Get full_text.
     */
    async apiV2MediaEntryMediaEntryIdFullTextGet(requestParameters: ApiV2MediaEntryMediaEntryIdFullTextGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiV2MediaEntryMediaEntryIdFullTextGetRaw(requestParameters, initOverrides);
    }

    /**
     * USER Context: Create full_text for collection
     */
    async apiV2MediaEntryMediaEntryIdFullTextPostRaw(requestParameters: ApiV2MediaEntryMediaEntryIdFullTextPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['mediaEntryId'] == null) {
            throw new runtime.RequiredError(
                'mediaEntryId',
                'Required parameter "mediaEntryId" was null or undefined when calling apiV2MediaEntryMediaEntryIdFullTextPost().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling apiV2MediaEntryMediaEntryIdFullTextPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api-v2/media-entry/{media_entry_id}/full_text`.replace(`{${"media_entry_id"}}`, encodeURIComponent(String(requestParameters['mediaEntryId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApiV2CollectionCollectionIdFullTextPutRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * USER Context: Create full_text for collection
     */
    async apiV2MediaEntryMediaEntryIdFullTextPost(requestParameters: ApiV2MediaEntryMediaEntryIdFullTextPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiV2MediaEntryMediaEntryIdFullTextPostRaw(requestParameters, initOverrides);
    }

    /**
     * USER Context: Update full_text for collection.
     */
    async apiV2MediaEntryMediaEntryIdFullTextPutRaw(requestParameters: ApiV2MediaEntryMediaEntryIdFullTextPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['mediaEntryId'] == null) {
            throw new runtime.RequiredError(
                'mediaEntryId',
                'Required parameter "mediaEntryId" was null or undefined when calling apiV2MediaEntryMediaEntryIdFullTextPut().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling apiV2MediaEntryMediaEntryIdFullTextPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api-v2/media-entry/{media_entry_id}/full_text`.replace(`{${"media_entry_id"}}`, encodeURIComponent(String(requestParameters['mediaEntryId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ApiV2CollectionCollectionIdFullTextPutRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * USER Context: Update full_text for collection.
     */
    async apiV2MediaEntryMediaEntryIdFullTextPut(requestParameters: ApiV2MediaEntryMediaEntryIdFullTextPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiV2MediaEntryMediaEntryIdFullTextPutRaw(requestParameters, initOverrides);
    }

    /**
     * Get media-entry for id.
     */
    async apiV2MediaEntryMediaEntryIdGetRaw(requestParameters: ApiV2MediaEntryMediaEntryIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiV2MediaEntryMediaEntryIdGet200Response>> {
        if (requestParameters['mediaEntryId'] == null) {
            throw new runtime.RequiredError(
                'mediaEntryId',
                'Required parameter "mediaEntryId" was null or undefined when calling apiV2MediaEntryMediaEntryIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api-v2/media-entry/{media_entry_id}`.replace(`{${"media_entry_id"}}`, encodeURIComponent(String(requestParameters['mediaEntryId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiV2MediaEntryMediaEntryIdGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Get media-entry for id.
     */
    async apiV2MediaEntryMediaEntryIdGet(requestParameters: ApiV2MediaEntryMediaEntryIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiV2MediaEntryMediaEntryIdGet200Response> {
        const response = await this.apiV2MediaEntryMediaEntryIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * PUBLIC/USER Context: Get media-file data-stream for media-entry id.
     */
    async apiV2MediaEntryMediaEntryIdMediaFileDataStreamGetRaw(requestParameters: ApiV2MediaEntryMediaEntryIdMediaFileDataStreamGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['mediaEntryId'] == null) {
            throw new runtime.RequiredError(
                'mediaEntryId',
                'Required parameter "mediaEntryId" was null or undefined when calling apiV2MediaEntryMediaEntryIdMediaFileDataStreamGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api-v2/media-entry/{media_entry_id}/media-file/data-stream`.replace(`{${"media_entry_id"}}`, encodeURIComponent(String(requestParameters['mediaEntryId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * PUBLIC/USER Context: Get media-file data-stream for media-entry id.
     */
    async apiV2MediaEntryMediaEntryIdMediaFileDataStreamGet(requestParameters: ApiV2MediaEntryMediaEntryIdMediaFileDataStreamGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiV2MediaEntryMediaEntryIdMediaFileDataStreamGetRaw(requestParameters, initOverrides);
    }

    /**
     * PUBLIC/USER Context: Get media-file for media-entry id.
     */
    async apiV2MediaEntryMediaEntryIdMediaFileGetRaw(requestParameters: ApiV2MediaEntryMediaEntryIdMediaFileGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiV2MediaEntryMediaEntryIdMediaFileGet200Response>> {
        if (requestParameters['mediaEntryId'] == null) {
            throw new runtime.RequiredError(
                'mediaEntryId',
                'Required parameter "mediaEntryId" was null or undefined when calling apiV2MediaEntryMediaEntryIdMediaFileGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api-v2/media-entry/{media_entry_id}/media-file`.replace(`{${"media_entry_id"}}`, encodeURIComponent(String(requestParameters['mediaEntryId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiV2MediaEntryMediaEntryIdMediaFileGet200ResponseFromJSON(jsonValue));
    }

    /**
     * PUBLIC/USER Context: Get media-file for media-entry id.
     */
    async apiV2MediaEntryMediaEntryIdMediaFileGet(requestParameters: ApiV2MediaEntryMediaEntryIdMediaFileGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiV2MediaEntryMediaEntryIdMediaFileGet200Response> {
        const response = await this.apiV2MediaEntryMediaEntryIdMediaFileGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get meta-data for media-entry.
     */
    async apiV2MediaEntryMediaEntryIdMetaDataGetRaw(requestParameters: ApiV2MediaEntryMediaEntryIdMetaDataGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['mediaEntryId'] == null) {
            throw new runtime.RequiredError(
                'mediaEntryId',
                'Required parameter "mediaEntryId" was null or undefined when calling apiV2MediaEntryMediaEntryIdMetaDataGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['updatedAfter'] != null) {
            queryParameters['updated_after'] = requestParameters['updatedAfter'];
        }

        if (requestParameters['metaKeys'] != null) {
            queryParameters['meta_keys'] = requestParameters['metaKeys'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api-v2/media-entry/{media_entry_id}/meta-data`.replace(`{${"media_entry_id"}}`, encodeURIComponent(String(requestParameters['mediaEntryId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get meta-data for media-entry.
     */
    async apiV2MediaEntryMediaEntryIdMetaDataGet(requestParameters: ApiV2MediaEntryMediaEntryIdMetaDataGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.apiV2MediaEntryMediaEntryIdMetaDataGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get meta-data for media-entry.
     */
    async apiV2MediaEntryMediaEntryIdMetaDataRelatedGetRaw(requestParameters: ApiV2MediaEntryMediaEntryIdMetaDataRelatedGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['mediaEntryId'] == null) {
            throw new runtime.RequiredError(
                'mediaEntryId',
                'Required parameter "mediaEntryId" was null or undefined when calling apiV2MediaEntryMediaEntryIdMetaDataRelatedGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['updatedAfter'] != null) {
            queryParameters['updated_after'] = requestParameters['updatedAfter'];
        }

        if (requestParameters['metaKeys'] != null) {
            queryParameters['meta_keys'] = requestParameters['metaKeys'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api-v2/media-entry/{media_entry_id}/meta-data-related`.replace(`{${"media_entry_id"}}`, encodeURIComponent(String(requestParameters['mediaEntryId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get meta-data for media-entry.
     */
    async apiV2MediaEntryMediaEntryIdMetaDataRelatedGet(requestParameters: ApiV2MediaEntryMediaEntryIdMetaDataRelatedGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.apiV2MediaEntryMediaEntryIdMetaDataRelatedGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete meta-data for media-entry and meta-key
     */
    async apiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdDeleteRaw(requestParameters: ApiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['mediaEntryId'] == null) {
            throw new runtime.RequiredError(
                'mediaEntryId',
                'Required parameter "mediaEntryId" was null or undefined when calling apiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdDelete().'
            );
        }

        if (requestParameters['metaKeyId'] == null) {
            throw new runtime.RequiredError(
                'metaKeyId',
                'Required parameter "metaKeyId" was null or undefined when calling apiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api-v2/media-entry/{media_entry_id}/meta-datum/{meta_key_id}`.replace(`{${"media_entry_id"}}`, encodeURIComponent(String(requestParameters['mediaEntryId']))).replace(`{${"meta_key_id"}}`, encodeURIComponent(String(requestParameters['metaKeyId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Delete meta-data for media-entry and meta-key
     */
    async apiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdDelete(requestParameters: ApiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.apiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get meta-data for media-entry and meta-key.
     */
    async apiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdGetRaw(requestParameters: ApiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['mediaEntryId'] == null) {
            throw new runtime.RequiredError(
                'mediaEntryId',
                'Required parameter "mediaEntryId" was null or undefined when calling apiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdGet().'
            );
        }

        if (requestParameters['metaKeyId'] == null) {
            throw new runtime.RequiredError(
                'metaKeyId',
                'Required parameter "metaKeyId" was null or undefined when calling apiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api-v2/media-entry/{media_entry_id}/meta-datum/{meta_key_id}`.replace(`{${"media_entry_id"}}`, encodeURIComponent(String(requestParameters['mediaEntryId']))).replace(`{${"meta_key_id"}}`, encodeURIComponent(String(requestParameters['metaKeyId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get meta-data for media-entry and meta-key.
     */
    async apiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdGet(requestParameters: ApiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.apiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create meta-data json for media-entry
     */
    async apiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdJsonPostRaw(requestParameters: ApiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdJsonPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['mediaEntryId'] == null) {
            throw new runtime.RequiredError(
                'mediaEntryId',
                'Required parameter "mediaEntryId" was null or undefined when calling apiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdJsonPost().'
            );
        }

        if (requestParameters['metaKeyId'] == null) {
            throw new runtime.RequiredError(
                'metaKeyId',
                'Required parameter "metaKeyId" was null or undefined when calling apiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdJsonPost().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling apiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdJsonPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api-v2/media-entry/{media_entry_id}/meta-datum/{meta_key_id}/json`.replace(`{${"media_entry_id"}}`, encodeURIComponent(String(requestParameters['mediaEntryId']))).replace(`{${"meta_key_id"}}`, encodeURIComponent(String(requestParameters['metaKeyId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApiV2CollectionCollectionIdMetaDatumMetaKeyIdJsonPutRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Create meta-data json for media-entry
     */
    async apiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdJsonPost(requestParameters: ApiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdJsonPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.apiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdJsonPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update meta-data json for media-entry
     */
    async apiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdJsonPutRaw(requestParameters: ApiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdJsonPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['mediaEntryId'] == null) {
            throw new runtime.RequiredError(
                'mediaEntryId',
                'Required parameter "mediaEntryId" was null or undefined when calling apiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdJsonPut().'
            );
        }

        if (requestParameters['metaKeyId'] == null) {
            throw new runtime.RequiredError(
                'metaKeyId',
                'Required parameter "metaKeyId" was null or undefined when calling apiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdJsonPut().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling apiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdJsonPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api-v2/media-entry/{media_entry_id}/meta-datum/{meta_key_id}/json`.replace(`{${"media_entry_id"}}`, encodeURIComponent(String(requestParameters['mediaEntryId']))).replace(`{${"meta_key_id"}}`, encodeURIComponent(String(requestParameters['metaKeyId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ApiV2CollectionCollectionIdMetaDatumMetaKeyIdJsonPutRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Update meta-data json for media-entry
     */
    async apiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdJsonPut(requestParameters: ApiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdJsonPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.apiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdJsonPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get meta-data keywords for media-entries meta-key
     */
    async apiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdKeywordGetRaw(requestParameters: ApiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdKeywordGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['mediaEntryId'] == null) {
            throw new runtime.RequiredError(
                'mediaEntryId',
                'Required parameter "mediaEntryId" was null or undefined when calling apiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdKeywordGet().'
            );
        }

        if (requestParameters['metaKeyId'] == null) {
            throw new runtime.RequiredError(
                'metaKeyId',
                'Required parameter "metaKeyId" was null or undefined when calling apiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdKeywordGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api-v2/media-entry/{media_entry_id}/meta-datum/{meta_key_id}/keyword`.replace(`{${"media_entry_id"}}`, encodeURIComponent(String(requestParameters['mediaEntryId']))).replace(`{${"meta_key_id"}}`, encodeURIComponent(String(requestParameters['metaKeyId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get meta-data keywords for media-entries meta-key
     */
    async apiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdKeywordGet(requestParameters: ApiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdKeywordGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.apiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdKeywordGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete meta-data keyword for media-entry.
     */
    async apiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdKeywordKeywordIdDeleteRaw(requestParameters: ApiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdKeywordKeywordIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['mediaEntryId'] == null) {
            throw new runtime.RequiredError(
                'mediaEntryId',
                'Required parameter "mediaEntryId" was null or undefined when calling apiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdKeywordKeywordIdDelete().'
            );
        }

        if (requestParameters['metaKeyId'] == null) {
            throw new runtime.RequiredError(
                'metaKeyId',
                'Required parameter "metaKeyId" was null or undefined when calling apiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdKeywordKeywordIdDelete().'
            );
        }

        if (requestParameters['keywordId'] == null) {
            throw new runtime.RequiredError(
                'keywordId',
                'Required parameter "keywordId" was null or undefined when calling apiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdKeywordKeywordIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api-v2/media-entry/{media_entry_id}/meta-datum/{meta_key_id}/keyword/{keyword_id}`.replace(`{${"media_entry_id"}}`, encodeURIComponent(String(requestParameters['mediaEntryId']))).replace(`{${"meta_key_id"}}`, encodeURIComponent(String(requestParameters['metaKeyId']))).replace(`{${"keyword_id"}}`, encodeURIComponent(String(requestParameters['keywordId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Delete meta-data keyword for media-entry.
     */
    async apiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdKeywordKeywordIdDelete(requestParameters: ApiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdKeywordKeywordIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.apiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdKeywordKeywordIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create meta-data keyword for media-entry.
     */
    async apiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdKeywordKeywordIdPostRaw(requestParameters: ApiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdKeywordKeywordIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['mediaEntryId'] == null) {
            throw new runtime.RequiredError(
                'mediaEntryId',
                'Required parameter "mediaEntryId" was null or undefined when calling apiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdKeywordKeywordIdPost().'
            );
        }

        if (requestParameters['metaKeyId'] == null) {
            throw new runtime.RequiredError(
                'metaKeyId',
                'Required parameter "metaKeyId" was null or undefined when calling apiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdKeywordKeywordIdPost().'
            );
        }

        if (requestParameters['keywordId'] == null) {
            throw new runtime.RequiredError(
                'keywordId',
                'Required parameter "keywordId" was null or undefined when calling apiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdKeywordKeywordIdPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api-v2/media-entry/{media_entry_id}/meta-datum/{meta_key_id}/keyword/{keyword_id}`.replace(`{${"media_entry_id"}}`, encodeURIComponent(String(requestParameters['mediaEntryId']))).replace(`{${"meta_key_id"}}`, encodeURIComponent(String(requestParameters['metaKeyId']))).replace(`{${"keyword_id"}}`, encodeURIComponent(String(requestParameters['keywordId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Create meta-data keyword for media-entry.
     */
    async apiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdKeywordKeywordIdPost(requestParameters: ApiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdKeywordKeywordIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.apiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdKeywordKeywordIdPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get meta-data people for media-entries meta-key.
     */
    async apiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdPeopleGetRaw(requestParameters: ApiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdPeopleGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['mediaEntryId'] == null) {
            throw new runtime.RequiredError(
                'mediaEntryId',
                'Required parameter "mediaEntryId" was null or undefined when calling apiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdPeopleGet().'
            );
        }

        if (requestParameters['metaKeyId'] == null) {
            throw new runtime.RequiredError(
                'metaKeyId',
                'Required parameter "metaKeyId" was null or undefined when calling apiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdPeopleGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api-v2/media-entry/{media_entry_id}/meta-datum/{meta_key_id}/people`.replace(`{${"media_entry_id"}}`, encodeURIComponent(String(requestParameters['mediaEntryId']))).replace(`{${"meta_key_id"}}`, encodeURIComponent(String(requestParameters['metaKeyId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get meta-data people for media-entries meta-key.
     */
    async apiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdPeopleGet(requestParameters: ApiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdPeopleGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.apiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdPeopleGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete meta-data people for media-entry
     */
    async apiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdPeoplePersonIdDeleteRaw(requestParameters: ApiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdPeoplePersonIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['mediaEntryId'] == null) {
            throw new runtime.RequiredError(
                'mediaEntryId',
                'Required parameter "mediaEntryId" was null or undefined when calling apiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdPeoplePersonIdDelete().'
            );
        }

        if (requestParameters['metaKeyId'] == null) {
            throw new runtime.RequiredError(
                'metaKeyId',
                'Required parameter "metaKeyId" was null or undefined when calling apiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdPeoplePersonIdDelete().'
            );
        }

        if (requestParameters['personId'] == null) {
            throw new runtime.RequiredError(
                'personId',
                'Required parameter "personId" was null or undefined when calling apiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdPeoplePersonIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api-v2/media-entry/{media_entry_id}/meta-datum/{meta_key_id}/people/{person_id}`.replace(`{${"media_entry_id"}}`, encodeURIComponent(String(requestParameters['mediaEntryId']))).replace(`{${"meta_key_id"}}`, encodeURIComponent(String(requestParameters['metaKeyId']))).replace(`{${"person_id"}}`, encodeURIComponent(String(requestParameters['personId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Delete meta-data people for media-entry
     */
    async apiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdPeoplePersonIdDelete(requestParameters: ApiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdPeoplePersonIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.apiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdPeoplePersonIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create meta-data people for a media-entries meta-key.
     */
    async apiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdPeoplePersonIdPostRaw(requestParameters: ApiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdPeoplePersonIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['mediaEntryId'] == null) {
            throw new runtime.RequiredError(
                'mediaEntryId',
                'Required parameter "mediaEntryId" was null or undefined when calling apiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdPeoplePersonIdPost().'
            );
        }

        if (requestParameters['metaKeyId'] == null) {
            throw new runtime.RequiredError(
                'metaKeyId',
                'Required parameter "metaKeyId" was null or undefined when calling apiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdPeoplePersonIdPost().'
            );
        }

        if (requestParameters['personId'] == null) {
            throw new runtime.RequiredError(
                'personId',
                'Required parameter "personId" was null or undefined when calling apiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdPeoplePersonIdPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api-v2/media-entry/{media_entry_id}/meta-datum/{meta_key_id}/people/{person_id}`.replace(`{${"media_entry_id"}}`, encodeURIComponent(String(requestParameters['mediaEntryId']))).replace(`{${"meta_key_id"}}`, encodeURIComponent(String(requestParameters['metaKeyId']))).replace(`{${"person_id"}}`, encodeURIComponent(String(requestParameters['personId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Create meta-data people for a media-entries meta-key.
     */
    async apiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdPeoplePersonIdPost(requestParameters: ApiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdPeoplePersonIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.apiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdPeoplePersonIdPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get meta-data role for media-entry.
     */
    async apiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdRoleGetRaw(requestParameters: ApiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdRoleGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['mediaEntryId'] == null) {
            throw new runtime.RequiredError(
                'mediaEntryId',
                'Required parameter "mediaEntryId" was null or undefined when calling apiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdRoleGet().'
            );
        }

        if (requestParameters['metaKeyId'] == null) {
            throw new runtime.RequiredError(
                'metaKeyId',
                'Required parameter "metaKeyId" was null or undefined when calling apiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdRoleGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api-v2/media-entry/{media_entry_id}/meta-datum/{meta_key_id}/role`.replace(`{${"media_entry_id"}}`, encodeURIComponent(String(requestParameters['mediaEntryId']))).replace(`{${"meta_key_id"}}`, encodeURIComponent(String(requestParameters['metaKeyId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get meta-data role for media-entry.
     */
    async apiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdRoleGet(requestParameters: ApiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdRoleGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.apiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdRoleGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete meta-data role for media-entry.
     */
    async apiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdRoleRoleIdPersonIdDeleteRaw(requestParameters: ApiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdRoleRoleIdPersonIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['mediaEntryId'] == null) {
            throw new runtime.RequiredError(
                'mediaEntryId',
                'Required parameter "mediaEntryId" was null or undefined when calling apiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdRoleRoleIdPersonIdDelete().'
            );
        }

        if (requestParameters['metaKeyId'] == null) {
            throw new runtime.RequiredError(
                'metaKeyId',
                'Required parameter "metaKeyId" was null or undefined when calling apiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdRoleRoleIdPersonIdDelete().'
            );
        }

        if (requestParameters['roleId'] == null) {
            throw new runtime.RequiredError(
                'roleId',
                'Required parameter "roleId" was null or undefined when calling apiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdRoleRoleIdPersonIdDelete().'
            );
        }

        if (requestParameters['personId'] == null) {
            throw new runtime.RequiredError(
                'personId',
                'Required parameter "personId" was null or undefined when calling apiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdRoleRoleIdPersonIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api-v2/media-entry/{media_entry_id}/meta-datum/{meta_key_id}/role/{role_id}/{person_id}`.replace(`{${"media_entry_id"}}`, encodeURIComponent(String(requestParameters['mediaEntryId']))).replace(`{${"meta_key_id"}}`, encodeURIComponent(String(requestParameters['metaKeyId']))).replace(`{${"role_id"}}`, encodeURIComponent(String(requestParameters['roleId']))).replace(`{${"person_id"}}`, encodeURIComponent(String(requestParameters['personId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Delete meta-data role for media-entry.
     */
    async apiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdRoleRoleIdPersonIdDelete(requestParameters: ApiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdRoleRoleIdPersonIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.apiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdRoleRoleIdPersonIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create meta-data role for media-entry.
     */
    async apiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdRoleRoleIdPersonIdPositionPostRaw(requestParameters: ApiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdRoleRoleIdPersonIdPositionPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['mediaEntryId'] == null) {
            throw new runtime.RequiredError(
                'mediaEntryId',
                'Required parameter "mediaEntryId" was null or undefined when calling apiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdRoleRoleIdPersonIdPositionPost().'
            );
        }

        if (requestParameters['metaKeyId'] == null) {
            throw new runtime.RequiredError(
                'metaKeyId',
                'Required parameter "metaKeyId" was null or undefined when calling apiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdRoleRoleIdPersonIdPositionPost().'
            );
        }

        if (requestParameters['roleId'] == null) {
            throw new runtime.RequiredError(
                'roleId',
                'Required parameter "roleId" was null or undefined when calling apiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdRoleRoleIdPersonIdPositionPost().'
            );
        }

        if (requestParameters['personId'] == null) {
            throw new runtime.RequiredError(
                'personId',
                'Required parameter "personId" was null or undefined when calling apiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdRoleRoleIdPersonIdPositionPost().'
            );
        }

        if (requestParameters['position'] == null) {
            throw new runtime.RequiredError(
                'position',
                'Required parameter "position" was null or undefined when calling apiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdRoleRoleIdPersonIdPositionPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api-v2/media-entry/{media_entry_id}/meta-datum/{meta_key_id}/role/{role_id}/{person_id}/{position}`.replace(`{${"media_entry_id"}}`, encodeURIComponent(String(requestParameters['mediaEntryId']))).replace(`{${"meta_key_id"}}`, encodeURIComponent(String(requestParameters['metaKeyId']))).replace(`{${"role_id"}}`, encodeURIComponent(String(requestParameters['roleId']))).replace(`{${"person_id"}}`, encodeURIComponent(String(requestParameters['personId']))).replace(`{${"position"}}`, encodeURIComponent(String(requestParameters['position']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Create meta-data role for media-entry.
     */
    async apiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdRoleRoleIdPersonIdPositionPost(requestParameters: ApiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdRoleRoleIdPersonIdPositionPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.apiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdRoleRoleIdPersonIdPositionPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create meta-data text-date for media-entry
     */
    async apiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdTextDatePostRaw(requestParameters: ApiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdTextDatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['mediaEntryId'] == null) {
            throw new runtime.RequiredError(
                'mediaEntryId',
                'Required parameter "mediaEntryId" was null or undefined when calling apiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdTextDatePost().'
            );
        }

        if (requestParameters['metaKeyId'] == null) {
            throw new runtime.RequiredError(
                'metaKeyId',
                'Required parameter "metaKeyId" was null or undefined when calling apiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdTextDatePost().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling apiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdTextDatePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api-v2/media-entry/{media_entry_id}/meta-datum/{meta_key_id}/text-date`.replace(`{${"media_entry_id"}}`, encodeURIComponent(String(requestParameters['mediaEntryId']))).replace(`{${"meta_key_id"}}`, encodeURIComponent(String(requestParameters['metaKeyId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApiV2CollectionCollectionIdMetaDatumMetaKeyIdTextPutRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Create meta-data text-date for media-entry
     */
    async apiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdTextDatePost(requestParameters: ApiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdTextDatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.apiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdTextDatePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update meta-data text-date for media-entry
     */
    async apiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdTextDatePutRaw(requestParameters: ApiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdTextDatePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['mediaEntryId'] == null) {
            throw new runtime.RequiredError(
                'mediaEntryId',
                'Required parameter "mediaEntryId" was null or undefined when calling apiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdTextDatePut().'
            );
        }

        if (requestParameters['metaKeyId'] == null) {
            throw new runtime.RequiredError(
                'metaKeyId',
                'Required parameter "metaKeyId" was null or undefined when calling apiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdTextDatePut().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling apiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdTextDatePut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api-v2/media-entry/{media_entry_id}/meta-datum/{meta_key_id}/text-date`.replace(`{${"media_entry_id"}}`, encodeURIComponent(String(requestParameters['mediaEntryId']))).replace(`{${"meta_key_id"}}`, encodeURIComponent(String(requestParameters['metaKeyId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ApiV2CollectionCollectionIdMetaDatumMetaKeyIdTextPutRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Update meta-data text-date for media-entry
     */
    async apiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdTextDatePut(requestParameters: ApiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdTextDatePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.apiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdTextDatePutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create meta-data text for media-entry
     */
    async apiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdTextPostRaw(requestParameters: ApiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdTextPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['mediaEntryId'] == null) {
            throw new runtime.RequiredError(
                'mediaEntryId',
                'Required parameter "mediaEntryId" was null or undefined when calling apiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdTextPost().'
            );
        }

        if (requestParameters['metaKeyId'] == null) {
            throw new runtime.RequiredError(
                'metaKeyId',
                'Required parameter "metaKeyId" was null or undefined when calling apiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdTextPost().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling apiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdTextPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api-v2/media-entry/{media_entry_id}/meta-datum/{meta_key_id}/text`.replace(`{${"media_entry_id"}}`, encodeURIComponent(String(requestParameters['mediaEntryId']))).replace(`{${"meta_key_id"}}`, encodeURIComponent(String(requestParameters['metaKeyId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApiV2CollectionCollectionIdMetaDatumMetaKeyIdTextPutRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Create meta-data text for media-entry
     */
    async apiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdTextPost(requestParameters: ApiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdTextPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.apiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdTextPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update meta-data text for media-entry
     */
    async apiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdTextPutRaw(requestParameters: ApiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdTextPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['mediaEntryId'] == null) {
            throw new runtime.RequiredError(
                'mediaEntryId',
                'Required parameter "mediaEntryId" was null or undefined when calling apiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdTextPut().'
            );
        }

        if (requestParameters['metaKeyId'] == null) {
            throw new runtime.RequiredError(
                'metaKeyId',
                'Required parameter "metaKeyId" was null or undefined when calling apiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdTextPut().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling apiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdTextPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api-v2/media-entry/{media_entry_id}/meta-datum/{meta_key_id}/text`.replace(`{${"media_entry_id"}}`, encodeURIComponent(String(requestParameters['mediaEntryId']))).replace(`{${"meta_key_id"}}`, encodeURIComponent(String(requestParameters['metaKeyId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ApiV2CollectionCollectionIdMetaDatumMetaKeyIdTextPutRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Update meta-data text for media-entry
     */
    async apiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdTextPut(requestParameters: ApiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdTextPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.apiV2MediaEntryMediaEntryIdMetaDatumMetaKeyIdTextPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * PUBLIC/USER Context: List media-entry permissions.
     */
    async apiV2MediaEntryMediaEntryIdPermsGetRaw(requestParameters: ApiV2MediaEntryMediaEntryIdPermsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiV2CollectionCollectionIdPermsGet200Response>> {
        if (requestParameters['mediaEntryId'] == null) {
            throw new runtime.RequiredError(
                'mediaEntryId',
                'Required parameter "mediaEntryId" was null or undefined when calling apiV2MediaEntryMediaEntryIdPermsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api-v2/media-entry/{media_entry_id}/perms/`.replace(`{${"media_entry_id"}}`, encodeURIComponent(String(requestParameters['mediaEntryId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiV2CollectionCollectionIdPermsGet200ResponseFromJSON(jsonValue));
    }

    /**
     * PUBLIC/USER Context: List media-entry permissions.
     */
    async apiV2MediaEntryMediaEntryIdPermsGet(requestParameters: ApiV2MediaEntryMediaEntryIdPermsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiV2CollectionCollectionIdPermsGet200Response> {
        const response = await this.apiV2MediaEntryMediaEntryIdPermsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete media-entry group permissions.
     */
    async apiV2MediaEntryMediaEntryIdPermsGroupGroupIdDeleteRaw(requestParameters: ApiV2MediaEntryMediaEntryIdPermsGroupGroupIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiV2MediaEntryMediaEntryIdPermsGroupGroupIdGet200Response>> {
        if (requestParameters['mediaEntryId'] == null) {
            throw new runtime.RequiredError(
                'mediaEntryId',
                'Required parameter "mediaEntryId" was null or undefined when calling apiV2MediaEntryMediaEntryIdPermsGroupGroupIdDelete().'
            );
        }

        if (requestParameters['groupId'] == null) {
            throw new runtime.RequiredError(
                'groupId',
                'Required parameter "groupId" was null or undefined when calling apiV2MediaEntryMediaEntryIdPermsGroupGroupIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api-v2/media-entry/{media_entry_id}/perms/group/{group_id}`.replace(`{${"media_entry_id"}}`, encodeURIComponent(String(requestParameters['mediaEntryId']))).replace(`{${"group_id"}}`, encodeURIComponent(String(requestParameters['groupId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiV2MediaEntryMediaEntryIdPermsGroupGroupIdGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Delete media-entry group permissions.
     */
    async apiV2MediaEntryMediaEntryIdPermsGroupGroupIdDelete(requestParameters: ApiV2MediaEntryMediaEntryIdPermsGroupGroupIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiV2MediaEntryMediaEntryIdPermsGroupGroupIdGet200Response> {
        const response = await this.apiV2MediaEntryMediaEntryIdPermsGroupGroupIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get media-entry group permissions.
     */
    async apiV2MediaEntryMediaEntryIdPermsGroupGroupIdGetRaw(requestParameters: ApiV2MediaEntryMediaEntryIdPermsGroupGroupIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiV2MediaEntryMediaEntryIdPermsGroupGroupIdGet200Response>> {
        if (requestParameters['mediaEntryId'] == null) {
            throw new runtime.RequiredError(
                'mediaEntryId',
                'Required parameter "mediaEntryId" was null or undefined when calling apiV2MediaEntryMediaEntryIdPermsGroupGroupIdGet().'
            );
        }

        if (requestParameters['groupId'] == null) {
            throw new runtime.RequiredError(
                'groupId',
                'Required parameter "groupId" was null or undefined when calling apiV2MediaEntryMediaEntryIdPermsGroupGroupIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api-v2/media-entry/{media_entry_id}/perms/group/{group_id}`.replace(`{${"media_entry_id"}}`, encodeURIComponent(String(requestParameters['mediaEntryId']))).replace(`{${"group_id"}}`, encodeURIComponent(String(requestParameters['groupId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiV2MediaEntryMediaEntryIdPermsGroupGroupIdGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Get media-entry group permissions.
     */
    async apiV2MediaEntryMediaEntryIdPermsGroupGroupIdGet(requestParameters: ApiV2MediaEntryMediaEntryIdPermsGroupGroupIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiV2MediaEntryMediaEntryIdPermsGroupGroupIdGet200Response> {
        const response = await this.apiV2MediaEntryMediaEntryIdPermsGroupGroupIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Valid perm_name values are[\"get_metadata_and_previews\" \"get_full_size\" \"edit_metadata\" \"edit_permissions\"]
     * Update media-entry group permissions
     */
    async apiV2MediaEntryMediaEntryIdPermsGroupGroupIdPermNamePermValPutRaw(requestParameters: ApiV2MediaEntryMediaEntryIdPermsGroupGroupIdPermNamePermValPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiV2MediaEntryMediaEntryIdPermsGroupGroupIdGet200Response>> {
        if (requestParameters['mediaEntryId'] == null) {
            throw new runtime.RequiredError(
                'mediaEntryId',
                'Required parameter "mediaEntryId" was null or undefined when calling apiV2MediaEntryMediaEntryIdPermsGroupGroupIdPermNamePermValPut().'
            );
        }

        if (requestParameters['groupId'] == null) {
            throw new runtime.RequiredError(
                'groupId',
                'Required parameter "groupId" was null or undefined when calling apiV2MediaEntryMediaEntryIdPermsGroupGroupIdPermNamePermValPut().'
            );
        }

        if (requestParameters['permName'] == null) {
            throw new runtime.RequiredError(
                'permName',
                'Required parameter "permName" was null or undefined when calling apiV2MediaEntryMediaEntryIdPermsGroupGroupIdPermNamePermValPut().'
            );
        }

        if (requestParameters['permVal'] == null) {
            throw new runtime.RequiredError(
                'permVal',
                'Required parameter "permVal" was null or undefined when calling apiV2MediaEntryMediaEntryIdPermsGroupGroupIdPermNamePermValPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api-v2/media-entry/{media_entry_id}/perms/group/{group_id}/{perm_name}/{perm_val}`.replace(`{${"media_entry_id"}}`, encodeURIComponent(String(requestParameters['mediaEntryId']))).replace(`{${"group_id"}}`, encodeURIComponent(String(requestParameters['groupId']))).replace(`{${"perm_name"}}`, encodeURIComponent(String(requestParameters['permName']))).replace(`{${"perm_val"}}`, encodeURIComponent(String(requestParameters['permVal']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiV2MediaEntryMediaEntryIdPermsGroupGroupIdGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Valid perm_name values are[\"get_metadata_and_previews\" \"get_full_size\" \"edit_metadata\" \"edit_permissions\"]
     * Update media-entry group permissions
     */
    async apiV2MediaEntryMediaEntryIdPermsGroupGroupIdPermNamePermValPut(requestParameters: ApiV2MediaEntryMediaEntryIdPermsGroupGroupIdPermNamePermValPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiV2MediaEntryMediaEntryIdPermsGroupGroupIdGet200Response> {
        const response = await this.apiV2MediaEntryMediaEntryIdPermsGroupGroupIdPermNamePermValPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create media-entry group permissions.
     */
    async apiV2MediaEntryMediaEntryIdPermsGroupGroupIdPostRaw(requestParameters: ApiV2MediaEntryMediaEntryIdPermsGroupGroupIdPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiV2MediaEntryMediaEntryIdPermsGroupGroupIdGet200Response>> {
        if (requestParameters['mediaEntryId'] == null) {
            throw new runtime.RequiredError(
                'mediaEntryId',
                'Required parameter "mediaEntryId" was null or undefined when calling apiV2MediaEntryMediaEntryIdPermsGroupGroupIdPost().'
            );
        }

        if (requestParameters['groupId'] == null) {
            throw new runtime.RequiredError(
                'groupId',
                'Required parameter "groupId" was null or undefined when calling apiV2MediaEntryMediaEntryIdPermsGroupGroupIdPost().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling apiV2MediaEntryMediaEntryIdPermsGroupGroupIdPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api-v2/media-entry/{media_entry_id}/perms/group/{group_id}`.replace(`{${"media_entry_id"}}`, encodeURIComponent(String(requestParameters['mediaEntryId']))).replace(`{${"group_id"}}`, encodeURIComponent(String(requestParameters['groupId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApiV2MediaEntryMediaEntryIdPermsGroupGroupIdPostRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiV2MediaEntryMediaEntryIdPermsGroupGroupIdGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Create media-entry group permissions.
     */
    async apiV2MediaEntryMediaEntryIdPermsGroupGroupIdPost(requestParameters: ApiV2MediaEntryMediaEntryIdPermsGroupGroupIdPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiV2MediaEntryMediaEntryIdPermsGroupGroupIdGet200Response> {
        const response = await this.apiV2MediaEntryMediaEntryIdPermsGroupGroupIdPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Query media-entry group permissions.
     */
    async apiV2MediaEntryMediaEntryIdPermsGroupsGetRaw(requestParameters: ApiV2MediaEntryMediaEntryIdPermsGroupsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<object>>> {
        if (requestParameters['mediaEntryId'] == null) {
            throw new runtime.RequiredError(
                'mediaEntryId',
                'Required parameter "mediaEntryId" was null or undefined when calling apiV2MediaEntryMediaEntryIdPermsGroupsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api-v2/media-entry/{media_entry_id}/perms/groups`.replace(`{${"media_entry_id"}}`, encodeURIComponent(String(requestParameters['mediaEntryId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Query media-entry group permissions.
     */
    async apiV2MediaEntryMediaEntryIdPermsGroupsGet(requestParameters: ApiV2MediaEntryMediaEntryIdPermsGroupsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<object>> {
        const response = await this.apiV2MediaEntryMediaEntryIdPermsGroupsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Valid perm_name values are[\"get_metadata_and_previews\" \"get_full_size\" \"edit_metadata\" \"edit_permissions\"]
     * Update media-entry entity permissions
     */
    async apiV2MediaEntryMediaEntryIdPermsResourcePermNamePermValPutRaw(requestParameters: ApiV2MediaEntryMediaEntryIdPermsResourcePermNamePermValPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiV2MediaEntryMediaEntryIdPermsResourcesGet200Response>> {
        if (requestParameters['mediaEntryId'] == null) {
            throw new runtime.RequiredError(
                'mediaEntryId',
                'Required parameter "mediaEntryId" was null or undefined when calling apiV2MediaEntryMediaEntryIdPermsResourcePermNamePermValPut().'
            );
        }

        if (requestParameters['permName'] == null) {
            throw new runtime.RequiredError(
                'permName',
                'Required parameter "permName" was null or undefined when calling apiV2MediaEntryMediaEntryIdPermsResourcePermNamePermValPut().'
            );
        }

        if (requestParameters['permVal'] == null) {
            throw new runtime.RequiredError(
                'permVal',
                'Required parameter "permVal" was null or undefined when calling apiV2MediaEntryMediaEntryIdPermsResourcePermNamePermValPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api-v2/media-entry/{media_entry_id}/perms/resource/{perm_name}/{perm_val}`.replace(`{${"media_entry_id"}}`, encodeURIComponent(String(requestParameters['mediaEntryId']))).replace(`{${"perm_name"}}`, encodeURIComponent(String(requestParameters['permName']))).replace(`{${"perm_val"}}`, encodeURIComponent(String(requestParameters['permVal']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiV2MediaEntryMediaEntryIdPermsResourcesGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Valid perm_name values are[\"get_metadata_and_previews\" \"get_full_size\" \"edit_metadata\" \"edit_permissions\"]
     * Update media-entry entity permissions
     */
    async apiV2MediaEntryMediaEntryIdPermsResourcePermNamePermValPut(requestParameters: ApiV2MediaEntryMediaEntryIdPermsResourcePermNamePermValPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiV2MediaEntryMediaEntryIdPermsResourcesGet200Response> {
        const response = await this.apiV2MediaEntryMediaEntryIdPermsResourcePermNamePermValPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Query media-entry permissions.
     */
    async apiV2MediaEntryMediaEntryIdPermsResourcesGetRaw(requestParameters: ApiV2MediaEntryMediaEntryIdPermsResourcesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiV2MediaEntryMediaEntryIdPermsResourcesGet200Response>> {
        if (requestParameters['mediaEntryId'] == null) {
            throw new runtime.RequiredError(
                'mediaEntryId',
                'Required parameter "mediaEntryId" was null or undefined when calling apiV2MediaEntryMediaEntryIdPermsResourcesGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api-v2/media-entry/{media_entry_id}/perms/resources`.replace(`{${"media_entry_id"}}`, encodeURIComponent(String(requestParameters['mediaEntryId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiV2MediaEntryMediaEntryIdPermsResourcesGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Query media-entry permissions.
     */
    async apiV2MediaEntryMediaEntryIdPermsResourcesGet(requestParameters: ApiV2MediaEntryMediaEntryIdPermsResourcesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiV2MediaEntryMediaEntryIdPermsResourcesGet200Response> {
        const response = await this.apiV2MediaEntryMediaEntryIdPermsResourcesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Valid perm_name values are[\"get_metadata_and_previews\" \"get_full_size\" \"edit_metadata\" \"edit_permissions\"]
     * Update media-entry entity permissions
     */
    async apiV2MediaEntryMediaEntryIdPermsResourcesPutRaw(requestParameters: ApiV2MediaEntryMediaEntryIdPermsResourcesPutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiV2MediaEntryMediaEntryIdPermsResourcesGet200Response>> {
        if (requestParameters['mediaEntryId'] == null) {
            throw new runtime.RequiredError(
                'mediaEntryId',
                'Required parameter "mediaEntryId" was null or undefined when calling apiV2MediaEntryMediaEntryIdPermsResourcesPut().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling apiV2MediaEntryMediaEntryIdPermsResourcesPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api-v2/media-entry/{media_entry_id}/perms/resources`.replace(`{${"media_entry_id"}}`, encodeURIComponent(String(requestParameters['mediaEntryId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ApiV2MediaEntryMediaEntryIdPermsResourcesPutRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiV2MediaEntryMediaEntryIdPermsResourcesGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Valid perm_name values are[\"get_metadata_and_previews\" \"get_full_size\" \"edit_metadata\" \"edit_permissions\"]
     * Update media-entry entity permissions
     */
    async apiV2MediaEntryMediaEntryIdPermsResourcesPut(requestParameters: ApiV2MediaEntryMediaEntryIdPermsResourcesPutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiV2MediaEntryMediaEntryIdPermsResourcesGet200Response> {
        const response = await this.apiV2MediaEntryMediaEntryIdPermsResourcesPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete media-entry user permissions.
     */
    async apiV2MediaEntryMediaEntryIdPermsUserUserIdDeleteRaw(requestParameters: ApiV2MediaEntryMediaEntryIdPermsUserUserIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiV2MediaEntryMediaEntryIdPermsUserUserIdGet200Response>> {
        if (requestParameters['mediaEntryId'] == null) {
            throw new runtime.RequiredError(
                'mediaEntryId',
                'Required parameter "mediaEntryId" was null or undefined when calling apiV2MediaEntryMediaEntryIdPermsUserUserIdDelete().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling apiV2MediaEntryMediaEntryIdPermsUserUserIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api-v2/media-entry/{media_entry_id}/perms/user/{user_id}`.replace(`{${"media_entry_id"}}`, encodeURIComponent(String(requestParameters['mediaEntryId']))).replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiV2MediaEntryMediaEntryIdPermsUserUserIdGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Delete media-entry user permissions.
     */
    async apiV2MediaEntryMediaEntryIdPermsUserUserIdDelete(requestParameters: ApiV2MediaEntryMediaEntryIdPermsUserUserIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiV2MediaEntryMediaEntryIdPermsUserUserIdGet200Response> {
        const response = await this.apiV2MediaEntryMediaEntryIdPermsUserUserIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get media-entry user permissions.
     */
    async apiV2MediaEntryMediaEntryIdPermsUserUserIdGetRaw(requestParameters: ApiV2MediaEntryMediaEntryIdPermsUserUserIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiV2MediaEntryMediaEntryIdPermsUserUserIdGet200Response>> {
        if (requestParameters['mediaEntryId'] == null) {
            throw new runtime.RequiredError(
                'mediaEntryId',
                'Required parameter "mediaEntryId" was null or undefined when calling apiV2MediaEntryMediaEntryIdPermsUserUserIdGet().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling apiV2MediaEntryMediaEntryIdPermsUserUserIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api-v2/media-entry/{media_entry_id}/perms/user/{user_id}`.replace(`{${"media_entry_id"}}`, encodeURIComponent(String(requestParameters['mediaEntryId']))).replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiV2MediaEntryMediaEntryIdPermsUserUserIdGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Get media-entry user permissions.
     */
    async apiV2MediaEntryMediaEntryIdPermsUserUserIdGet(requestParameters: ApiV2MediaEntryMediaEntryIdPermsUserUserIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiV2MediaEntryMediaEntryIdPermsUserUserIdGet200Response> {
        const response = await this.apiV2MediaEntryMediaEntryIdPermsUserUserIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Valid perm_name values are[\"get_metadata_and_previews\" \"get_full_size\" \"edit_metadata\" \"edit_permissions\"]
     * Update media-entry user permissions
     */
    async apiV2MediaEntryMediaEntryIdPermsUserUserIdPermNamePermValPutRaw(requestParameters: ApiV2MediaEntryMediaEntryIdPermsUserUserIdPermNamePermValPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiV2MediaEntryMediaEntryIdPermsUserUserIdGet200Response>> {
        if (requestParameters['mediaEntryId'] == null) {
            throw new runtime.RequiredError(
                'mediaEntryId',
                'Required parameter "mediaEntryId" was null or undefined when calling apiV2MediaEntryMediaEntryIdPermsUserUserIdPermNamePermValPut().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling apiV2MediaEntryMediaEntryIdPermsUserUserIdPermNamePermValPut().'
            );
        }

        if (requestParameters['permName'] == null) {
            throw new runtime.RequiredError(
                'permName',
                'Required parameter "permName" was null or undefined when calling apiV2MediaEntryMediaEntryIdPermsUserUserIdPermNamePermValPut().'
            );
        }

        if (requestParameters['permVal'] == null) {
            throw new runtime.RequiredError(
                'permVal',
                'Required parameter "permVal" was null or undefined when calling apiV2MediaEntryMediaEntryIdPermsUserUserIdPermNamePermValPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api-v2/media-entry/{media_entry_id}/perms/user/{user_id}/{perm_name}/{perm_val}`.replace(`{${"media_entry_id"}}`, encodeURIComponent(String(requestParameters['mediaEntryId']))).replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters['userId']))).replace(`{${"perm_name"}}`, encodeURIComponent(String(requestParameters['permName']))).replace(`{${"perm_val"}}`, encodeURIComponent(String(requestParameters['permVal']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiV2MediaEntryMediaEntryIdPermsUserUserIdGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Valid perm_name values are[\"get_metadata_and_previews\" \"get_full_size\" \"edit_metadata\" \"edit_permissions\"]
     * Update media-entry user permissions
     */
    async apiV2MediaEntryMediaEntryIdPermsUserUserIdPermNamePermValPut(requestParameters: ApiV2MediaEntryMediaEntryIdPermsUserUserIdPermNamePermValPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiV2MediaEntryMediaEntryIdPermsUserUserIdGet200Response> {
        const response = await this.apiV2MediaEntryMediaEntryIdPermsUserUserIdPermNamePermValPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create media-entry user permissions.
     */
    async apiV2MediaEntryMediaEntryIdPermsUserUserIdPostRaw(requestParameters: ApiV2MediaEntryMediaEntryIdPermsUserUserIdPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiV2MediaEntryMediaEntryIdPermsUserUserIdGet200Response>> {
        if (requestParameters['mediaEntryId'] == null) {
            throw new runtime.RequiredError(
                'mediaEntryId',
                'Required parameter "mediaEntryId" was null or undefined when calling apiV2MediaEntryMediaEntryIdPermsUserUserIdPost().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling apiV2MediaEntryMediaEntryIdPermsUserUserIdPost().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling apiV2MediaEntryMediaEntryIdPermsUserUserIdPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api-v2/media-entry/{media_entry_id}/perms/user/{user_id}`.replace(`{${"media_entry_id"}}`, encodeURIComponent(String(requestParameters['mediaEntryId']))).replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApiV2MediaEntryMediaEntryIdPermsUserUserIdPostRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiV2MediaEntryMediaEntryIdPermsUserUserIdGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Create media-entry user permissions.
     */
    async apiV2MediaEntryMediaEntryIdPermsUserUserIdPost(requestParameters: ApiV2MediaEntryMediaEntryIdPermsUserUserIdPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiV2MediaEntryMediaEntryIdPermsUserUserIdGet200Response> {
        const response = await this.apiV2MediaEntryMediaEntryIdPermsUserUserIdPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Query media-entry user permissions.
     */
    async apiV2MediaEntryMediaEntryIdPermsUsersGetRaw(requestParameters: ApiV2MediaEntryMediaEntryIdPermsUsersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<object>>> {
        if (requestParameters['mediaEntryId'] == null) {
            throw new runtime.RequiredError(
                'mediaEntryId',
                'Required parameter "mediaEntryId" was null or undefined when calling apiV2MediaEntryMediaEntryIdPermsUsersGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api-v2/media-entry/{media_entry_id}/perms/users`.replace(`{${"media_entry_id"}}`, encodeURIComponent(String(requestParameters['mediaEntryId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Query media-entry user permissions.
     */
    async apiV2MediaEntryMediaEntryIdPermsUsersGet(requestParameters: ApiV2MediaEntryMediaEntryIdPermsUsersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<object>> {
        const response = await this.apiV2MediaEntryMediaEntryIdPermsUsersGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get preview for media-entry id.
     */
    async apiV2MediaEntryMediaEntryIdPreviewDataStreamGetRaw(requestParameters: ApiV2MediaEntryMediaEntryIdPreviewDataStreamGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['mediaEntryId'] == null) {
            throw new runtime.RequiredError(
                'mediaEntryId',
                'Required parameter "mediaEntryId" was null or undefined when calling apiV2MediaEntryMediaEntryIdPreviewDataStreamGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api-v2/media-entry/{media_entry_id}/preview/data-stream`.replace(`{${"media_entry_id"}}`, encodeURIComponent(String(requestParameters['mediaEntryId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get preview for media-entry id.
     */
    async apiV2MediaEntryMediaEntryIdPreviewDataStreamGet(requestParameters: ApiV2MediaEntryMediaEntryIdPreviewDataStreamGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiV2MediaEntryMediaEntryIdPreviewDataStreamGetRaw(requestParameters, initOverrides);
    }

    /**
     * Get preview for media-entry id.
     */
    async apiV2MediaEntryMediaEntryIdPreviewGetRaw(requestParameters: ApiV2MediaEntryMediaEntryIdPreviewGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiV2MediaEntryMediaEntryIdPreviewGet200Response>> {
        if (requestParameters['mediaEntryId'] == null) {
            throw new runtime.RequiredError(
                'mediaEntryId',
                'Required parameter "mediaEntryId" was null or undefined when calling apiV2MediaEntryMediaEntryIdPreviewGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api-v2/media-entry/{media_entry_id}/preview`.replace(`{${"media_entry_id"}}`, encodeURIComponent(String(requestParameters['mediaEntryId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiV2MediaEntryMediaEntryIdPreviewGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Get preview for media-entry id.
     */
    async apiV2MediaEntryMediaEntryIdPreviewGet(requestParameters: ApiV2MediaEntryMediaEntryIdPreviewGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiV2MediaEntryMediaEntryIdPreviewGet200Response> {
        const response = await this.apiV2MediaEntryMediaEntryIdPreviewGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Try publish media-entry for id.
     */
    async apiV2MediaEntryMediaEntryIdPublishPutRaw(requestParameters: ApiV2MediaEntryMediaEntryIdPublishPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiV2MediaEntryMediaEntryIdGet200Response>> {
        if (requestParameters['mediaEntryId'] == null) {
            throw new runtime.RequiredError(
                'mediaEntryId',
                'Required parameter "mediaEntryId" was null or undefined when calling apiV2MediaEntryMediaEntryIdPublishPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api-v2/media-entry/{media_entry_id}/publish`.replace(`{${"media_entry_id"}}`, encodeURIComponent(String(requestParameters['mediaEntryId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiV2MediaEntryMediaEntryIdGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Try publish media-entry for id.
     */
    async apiV2MediaEntryMediaEntryIdPublishPut(requestParameters: ApiV2MediaEntryMediaEntryIdPublishPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiV2MediaEntryMediaEntryIdGet200Response> {
        const response = await this.apiV2MediaEntryMediaEntryIdPublishPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * TODO: Create media-entry. Only for testing. Use webapp until media-encoder is ready
     */
    async apiV2MediaEntryPostRaw(requestParameters: ApiV2MediaEntryPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['copyMeId'] != null) {
            queryParameters['copy_me_id'] = requestParameters['copyMeId'];
        }

        if (requestParameters['collectionId'] != null) {
            queryParameters['collection_id'] = requestParameters['collectionId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['file'] != null) {
            formParams.append('file', requestParameters['file'] as any);
        }

        const response = await this.request({
            path: `/api-v2/media-entry`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * TODO: Create media-entry. Only for testing. Use webapp until media-encoder is ready
     */
    async apiV2MediaEntryPost(requestParameters: ApiV2MediaEntryPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiV2MediaEntryPostRaw(requestParameters, initOverrides);
    }

    /**
     * PUBLIC/USER Context: Get media-file data-stream for id.
     */
    async apiV2MediaFileMediaFileIdDataStreamGetRaw(requestParameters: ApiV2MediaFileMediaFileIdDataStreamGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['mediaFileId'] == null) {
            throw new runtime.RequiredError(
                'mediaFileId',
                'Required parameter "mediaFileId" was null or undefined when calling apiV2MediaFileMediaFileIdDataStreamGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api-v2/media-file/{media_file_id}/data-stream`.replace(`{${"media_file_id"}}`, encodeURIComponent(String(requestParameters['mediaFileId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * PUBLIC/USER Context: Get media-file data-stream for id.
     */
    async apiV2MediaFileMediaFileIdDataStreamGet(requestParameters: ApiV2MediaFileMediaFileIdDataStreamGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiV2MediaFileMediaFileIdDataStreamGetRaw(requestParameters, initOverrides);
    }

    /**
     * PUBLIC/USER Context: Get media-file for id.
     */
    async apiV2MediaFileMediaFileIdGetRaw(requestParameters: ApiV2MediaFileMediaFileIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiV2MediaEntryMediaEntryIdMediaFileGet200Response>> {
        if (requestParameters['mediaFileId'] == null) {
            throw new runtime.RequiredError(
                'mediaFileId',
                'Required parameter "mediaFileId" was null or undefined when calling apiV2MediaFileMediaFileIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api-v2/media-file/{media_file_id}`.replace(`{${"media_file_id"}}`, encodeURIComponent(String(requestParameters['mediaFileId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiV2MediaEntryMediaEntryIdMediaFileGet200ResponseFromJSON(jsonValue));
    }

    /**
     * PUBLIC/USER Context: Get media-file for id.
     */
    async apiV2MediaFileMediaFileIdGet(requestParameters: ApiV2MediaFileMediaFileIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiV2MediaEntryMediaEntryIdMediaFileGet200Response> {
        const response = await this.apiV2MediaFileMediaFileIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get meta-data data-stream.
     * Get meta-data data-stream.
     */
    async apiV2MetaDataMetaDatumIdDataStreamGetRaw(requestParameters: ApiV2MetaDataMetaDatumIdDataStreamGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['metaDatumId'] == null) {
            throw new runtime.RequiredError(
                'metaDatumId',
                'Required parameter "metaDatumId" was null or undefined when calling apiV2MetaDataMetaDatumIdDataStreamGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api-v2/meta-data/{meta_datum_id}/data-stream`.replace(`{${"meta_datum_id"}}`, encodeURIComponent(String(requestParameters['metaDatumId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get meta-data data-stream.
     * Get meta-data data-stream.
     */
    async apiV2MetaDataMetaDatumIdDataStreamGet(requestParameters: ApiV2MetaDataMetaDatumIdDataStreamGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiV2MetaDataMetaDatumIdDataStreamGetRaw(requestParameters, initOverrides);
    }

    /**
     * Get meta-data for id. TODO: should return 404, if no such meta-data role exists.
     * Get meta-data for id
     */
    async apiV2MetaDataMetaDatumIdGetRaw(requestParameters: ApiV2MetaDataMetaDatumIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['metaDatumId'] == null) {
            throw new runtime.RequiredError(
                'metaDatumId',
                'Required parameter "metaDatumId" was null or undefined when calling apiV2MetaDataMetaDatumIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api-v2/meta-data/{meta_datum_id}`.replace(`{${"meta_datum_id"}}`, encodeURIComponent(String(requestParameters['metaDatumId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get meta-data for id. TODO: should return 404, if no such meta-data role exists.
     * Get meta-data for id
     */
    async apiV2MetaDataMetaDatumIdGet(requestParameters: ApiV2MetaDataMetaDatumIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.apiV2MetaDataMetaDatumIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get meta-data role for id. TODO: should return 404, if no such meta-data role exists.
     * Get meta-data role for id
     */
    async apiV2MetaDataMetaDatumIdRoleGetRaw(requestParameters: ApiV2MetaDataMetaDatumIdRoleGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['metaDatumId'] == null) {
            throw new runtime.RequiredError(
                'metaDatumId',
                'Required parameter "metaDatumId" was null or undefined when calling apiV2MetaDataMetaDatumIdRoleGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api-v2/meta-data/{meta_datum_id}/role`.replace(`{${"meta_datum_id"}}`, encodeURIComponent(String(requestParameters['metaDatumId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get meta-data role for id. TODO: should return 404, if no such meta-data role exists.
     * Get meta-data role for id
     */
    async apiV2MetaDataMetaDatumIdRoleGet(requestParameters: ApiV2MetaDataMetaDatumIdRoleGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.apiV2MetaDataMetaDatumIdRoleGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get list of meta-key ids. Paging is used as you get a limit of 100 entries.
     * PUBLIC/USER Context: Get all meta-key ids
     */
    async apiV2MetaKeysGetRaw(requestParameters: ApiV2MetaKeysGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiV2MetaKeysGet200Response>> {
        const queryParameters: any = {};

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        if (requestParameters['vocabularyId'] != null) {
            queryParameters['vocabulary_id'] = requestParameters['vocabularyId'];
        }

        if (requestParameters['metaDatumObjectType'] != null) {
            queryParameters['meta_datum_object_type'] = requestParameters['metaDatumObjectType'];
        }

        if (requestParameters['isEnabledForCollections'] != null) {
            queryParameters['is_enabled_for_collections'] = requestParameters['isEnabledForCollections'];
        }

        if (requestParameters['isEnabledForMediaEntries'] != null) {
            queryParameters['is_enabled_for_media_entries'] = requestParameters['isEnabledForMediaEntries'];
        }

        if (requestParameters['scope'] != null) {
            queryParameters['scope'] = requestParameters['scope'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['count'] != null) {
            queryParameters['count'] = requestParameters['count'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api-v2/meta-keys/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiV2MetaKeysGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Get list of meta-key ids. Paging is used as you get a limit of 100 entries.
     * PUBLIC/USER Context: Get all meta-key ids
     */
    async apiV2MetaKeysGet(requestParameters: ApiV2MetaKeysGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiV2MetaKeysGet200Response> {
        const response = await this.apiV2MetaKeysGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get meta-key by id. Returns 404, if no such meta-key exists.
     * PUBLIC/USER Context: Get meta-key by id
     */
    async apiV2MetaKeysIdGetRaw(requestParameters: ApiV2MetaKeysIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiV2MetaKeysIdGet200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiV2MetaKeysIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api-v2/meta-keys/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiV2MetaKeysIdGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Get meta-key by id. Returns 404, if no such meta-key exists.
     * PUBLIC/USER Context: Get meta-key by id
     */
    async apiV2MetaKeysIdGet(requestParameters: ApiV2MetaKeysIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiV2MetaKeysIdGet200Response> {
        const response = await this.apiV2MetaKeysIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Query list of people only for ids or full-data. Optional Paging.
     * PUBLIC Context: Get all people ids
     */
    async apiV2PeopleGetRaw(requestParameters: ApiV2PeopleGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiV2PeopleGet200Response>> {
        const queryParameters: any = {};

        if (requestParameters['subtype'] != null) {
            queryParameters['subtype'] = requestParameters['subtype'];
        }

        if (requestParameters['institutionalId'] != null) {
            queryParameters['institutional_id'] = requestParameters['institutionalId'];
        }

        if (requestParameters['searchable'] != null) {
            queryParameters['searchable'] = requestParameters['searchable'];
        }

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        if (requestParameters['count'] != null) {
            queryParameters['count'] = requestParameters['count'];
        }

        if (requestParameters['pseudonym'] != null) {
            queryParameters['pseudonym'] = requestParameters['pseudonym'];
        }

        if (requestParameters['lastName'] != null) {
            queryParameters['last_name'] = requestParameters['lastName'];
        }

        if (requestParameters['firstName'] != null) {
            queryParameters['first_name'] = requestParameters['firstName'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['fullData'] != null) {
            queryParameters['full_data'] = requestParameters['fullData'];
        }

        if (requestParameters['description'] != null) {
            queryParameters['description'] = requestParameters['description'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api-v2/people/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiV2PeopleGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Query list of people only for ids or full-data. Optional Paging.
     * PUBLIC Context: Get all people ids
     */
    async apiV2PeopleGet(requestParameters: ApiV2PeopleGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiV2PeopleGet200Response> {
        const response = await this.apiV2PeopleGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get person by id. Returns 404, if no such person exists. TODO query params.
     * PUBLIC Context: Get person by id
     */
    async apiV2PeopleIdGetRaw(requestParameters: ApiV2PeopleIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiV2PeopleIdGet200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiV2PeopleIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api-v2/people/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiV2PeopleIdGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Get person by id. Returns 404, if no such person exists. TODO query params.
     * PUBLIC Context: Get person by id
     */
    async apiV2PeopleIdGet(requestParameters: ApiV2PeopleIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiV2PeopleIdGet200Response> {
        const response = await this.apiV2PeopleIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get preview data-stream for id.
     */
    async apiV2PreviewsPreviewIdDataStreamGetRaw(requestParameters: ApiV2PreviewsPreviewIdDataStreamGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['previewId'] == null) {
            throw new runtime.RequiredError(
                'previewId',
                'Required parameter "previewId" was null or undefined when calling apiV2PreviewsPreviewIdDataStreamGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api-v2/previews/{preview_id}/data-stream`.replace(`{${"preview_id"}}`, encodeURIComponent(String(requestParameters['previewId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get preview data-stream for id.
     */
    async apiV2PreviewsPreviewIdDataStreamGet(requestParameters: ApiV2PreviewsPreviewIdDataStreamGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiV2PreviewsPreviewIdDataStreamGetRaw(requestParameters, initOverrides);
    }

    /**
     * Get preview for id.
     */
    async apiV2PreviewsPreviewIdGetRaw(requestParameters: ApiV2PreviewsPreviewIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['previewId'] == null) {
            throw new runtime.RequiredError(
                'previewId',
                'Required parameter "previewId" was null or undefined when calling apiV2PreviewsPreviewIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api-v2/previews/{preview_id}`.replace(`{${"preview_id"}}`, encodeURIComponent(String(requestParameters['previewId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get preview for id.
     */
    async apiV2PreviewsPreviewIdGet(requestParameters: ApiV2PreviewsPreviewIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiV2PreviewsPreviewIdGetRaw(requestParameters, initOverrides);
    }

    /**
     * Get list of roles.
     * Get list of roles.
     */
    async apiV2RolesGetRaw(requestParameters: ApiV2RolesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiV2RolesGet200Response>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['count'] != null) {
            queryParameters['count'] = requestParameters['count'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api-v2/roles/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiV2RolesGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Get list of roles.
     * Get list of roles.
     */
    async apiV2RolesGet(requestParameters: ApiV2RolesGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiV2RolesGet200Response> {
        const response = await this.apiV2RolesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a role by id. Returns 404, if no such role exists.
     * Get role by id
     */
    async apiV2RolesIdGetRaw(requestParameters: ApiV2RolesIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiV2RolesIdGet200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiV2RolesIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api-v2/roles/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiV2RolesIdGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Get a role by id. Returns 404, if no such role exists.
     * Get role by id
     */
    async apiV2RolesIdGet(requestParameters: ApiV2RolesIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiV2RolesIdGet200Response> {
        const response = await this.apiV2RolesIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * PUBLIC Context: List usage_terms.
     */
    async apiV2UsageTermsGetRaw(requestParameters: ApiV2UsageTermsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<object>>> {
        const queryParameters: any = {};

        if (requestParameters['fullData'] != null) {
            queryParameters['full_data'] = requestParameters['fullData'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api-v2/usage-terms/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * PUBLIC Context: List usage_terms.
     */
    async apiV2UsageTermsGet(requestParameters: ApiV2UsageTermsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<object>> {
        const response = await this.apiV2UsageTermsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * PUBLIC Context: Get usage_terms by id.
     */
    async apiV2UsageTermsIdGetRaw(requestParameters: ApiV2UsageTermsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiV2UsageTermsIdGet200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiV2UsageTermsIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api-v2/usage-terms/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiV2UsageTermsIdGet200ResponseFromJSON(jsonValue));
    }

    /**
     * PUBLIC Context: Get usage_terms by id.
     */
    async apiV2UsageTermsIdGet(requestParameters: ApiV2UsageTermsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiV2UsageTermsIdGet200Response> {
        const response = await this.apiV2UsageTermsIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get list of users ids.
     * USER Context: Get list of users ids.
     */
    async apiV2UsersGetRaw(requestParameters: ApiV2UsersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiV2UsersGet200Response>> {
        const queryParameters: any = {};

        if (requestParameters['autocomplete'] != null) {
            queryParameters['autocomplete'] = requestParameters['autocomplete'];
        }

        if (requestParameters['institutionalId'] != null) {
            queryParameters['institutional_id'] = requestParameters['institutionalId'];
        }

        if (requestParameters['searchable'] != null) {
            queryParameters['searchable'] = requestParameters['searchable'];
        }

        if (requestParameters['email'] != null) {
            queryParameters['email'] = requestParameters['email'];
        }

        if (requestParameters['count'] != null) {
            queryParameters['count'] = requestParameters['count'];
        }

        if (requestParameters['personId'] != null) {
            queryParameters['person_id'] = requestParameters['personId'];
        }

        if (requestParameters['institution'] != null) {
            queryParameters['institution'] = requestParameters['institution'];
        }

        if (requestParameters['notes'] != null) {
            queryParameters['notes'] = requestParameters['notes'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['fullData'] != null) {
            queryParameters['full_data'] = requestParameters['fullData'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api-v2/users/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiV2UsersGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Get list of users ids.
     * USER Context: Get list of users ids.
     */
    async apiV2UsersGet(requestParameters: ApiV2UsersGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiV2UsersGet200Response> {
        const response = await this.apiV2UsersGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a user by id. Returns 404, if no such users exists.
     * USER Context: Get user by id
     */
    async apiV2UsersIdGetRaw(requestParameters: ApiV2UsersIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiV2UsersIdGet200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiV2UsersIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api-v2/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiV2UsersIdGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Get a user by id. Returns 404, if no such users exists.
     * USER Context: Get user by id
     */
    async apiV2UsersIdGet(requestParameters: ApiV2UsersIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiV2UsersIdGet200Response> {
        const response = await this.apiV2UsersIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get list of vocabularies ids.
     * Get list of vocabularies ids.
     */
    async apiV2VocabulariesGetRaw(requestParameters: ApiV2VocabulariesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiV2VocabulariesGet200Response>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api-v2/vocabularies/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiV2VocabulariesGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Get list of vocabularies ids.
     * Get list of vocabularies ids.
     */
    async apiV2VocabulariesGet(requestParameters: ApiV2VocabulariesGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiV2VocabulariesGet200Response> {
        const response = await this.apiV2VocabulariesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a vocabulary by id. Returns 404, if no such vocabulary exists.
     * Get vocabulary by id.
     */
    async apiV2VocabulariesIdGetRaw(requestParameters: ApiV2VocabulariesIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiV2VocabulariesIdGet200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiV2VocabulariesIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api-v2/vocabularies/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiV2VocabulariesIdGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Get a vocabulary by id. Returns 404, if no such vocabulary exists.
     * Get vocabulary by id.
     */
    async apiV2VocabulariesIdGet(requestParameters: ApiV2VocabulariesIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiV2VocabulariesIdGet200Response> {
        const response = await this.apiV2VocabulariesIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ADMIN Context: List workflows.
     */
    async apiV2WorkflowsGetRaw(requestParameters: ApiV2WorkflowsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<object>>> {
        const queryParameters: any = {};

        if (requestParameters['fullData'] != null) {
            queryParameters['full_data'] = requestParameters['fullData'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api-v2/workflows/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * ADMIN Context: List workflows.
     */
    async apiV2WorkflowsGet(requestParameters: ApiV2WorkflowsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<object>> {
        const response = await this.apiV2WorkflowsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ADMIN Context: Delete workflow by id.
     */
    async apiV2WorkflowsIdDeleteRaw(requestParameters: ApiV2WorkflowsIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiV2WorkflowsPost200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiV2WorkflowsIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api-v2/workflows/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiV2WorkflowsPost200ResponseFromJSON(jsonValue));
    }

    /**
     * ADMIN Context: Delete workflow by id.
     */
    async apiV2WorkflowsIdDelete(requestParameters: ApiV2WorkflowsIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiV2WorkflowsPost200Response> {
        const response = await this.apiV2WorkflowsIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ADMIN Context: Get workflow by id.
     */
    async apiV2WorkflowsIdGetRaw(requestParameters: ApiV2WorkflowsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiV2WorkflowsPost200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiV2WorkflowsIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api-v2/workflows/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiV2WorkflowsPost200ResponseFromJSON(jsonValue));
    }

    /**
     * ADMIN Context: Get workflow by id.
     */
    async apiV2WorkflowsIdGet(requestParameters: ApiV2WorkflowsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiV2WorkflowsPost200Response> {
        const response = await this.apiV2WorkflowsIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ADMIN Context: Update workflow with id.
     */
    async apiV2WorkflowsIdPutRaw(requestParameters: ApiV2WorkflowsIdPutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiV2WorkflowsPost200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiV2WorkflowsIdPut().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling apiV2WorkflowsIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api-v2/workflows/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ApiV2WorkflowsIdPutRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiV2WorkflowsPost200ResponseFromJSON(jsonValue));
    }

    /**
     * ADMIN Context: Update workflow with id.
     */
    async apiV2WorkflowsIdPut(requestParameters: ApiV2WorkflowsIdPutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiV2WorkflowsPost200Response> {
        const response = await this.apiV2WorkflowsIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ADMIN Context: Create workflow.
     */
    async apiV2WorkflowsPostRaw(requestParameters: ApiV2WorkflowsPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiV2WorkflowsPost200Response>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling apiV2WorkflowsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api-v2/workflows/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApiV2WorkflowsPostRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiV2WorkflowsPost200ResponseFromJSON(jsonValue));
    }

    /**
     * ADMIN Context: Create workflow.
     */
    async apiV2WorkflowsPost(requestParameters: ApiV2WorkflowsPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiV2WorkflowsPost200Response> {
        const response = await this.apiV2WorkflowsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async testExceptionGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/test/exception`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async testExceptionGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.testExceptionGetRaw(initOverrides);
    }

    /**
     */
    async testOkGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/test/ok`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async testOkGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.testOkGetRaw(initOverrides);
    }

}

/**
 * @export
 */
export const ApiV2CollectionCollectionIdPermsGroupGroupIdPermNamePermValPutPermNameEnum = {
    GetMetadataAndPreviews: 'get_metadata_and_previews',
    EditMetadataAndRelations: 'edit_metadata_and_relations'
} as const;
export type ApiV2CollectionCollectionIdPermsGroupGroupIdPermNamePermValPutPermNameEnum = typeof ApiV2CollectionCollectionIdPermsGroupGroupIdPermNamePermValPutPermNameEnum[keyof typeof ApiV2CollectionCollectionIdPermsGroupGroupIdPermNamePermValPutPermNameEnum];
/**
 * @export
 */
export const ApiV2CollectionCollectionIdPermsResourcePermNamePermValPutPermNameEnum = {
    GetMetadataAndPreviews: 'get_metadata_and_previews'
} as const;
export type ApiV2CollectionCollectionIdPermsResourcePermNamePermValPutPermNameEnum = typeof ApiV2CollectionCollectionIdPermsResourcePermNamePermValPutPermNameEnum[keyof typeof ApiV2CollectionCollectionIdPermsResourcePermNamePermValPutPermNameEnum];
/**
 * @export
 */
export const ApiV2CollectionCollectionIdPermsUserUserIdPermNamePermValPutPermNameEnum = {
    GetMetadataAndPreviews: 'get_metadata_and_previews',
    EditPermissions: 'edit_permissions',
    EditMetadataAndRelations: 'edit_metadata_and_relations'
} as const;
export type ApiV2CollectionCollectionIdPermsUserUserIdPermNamePermValPutPermNameEnum = typeof ApiV2CollectionCollectionIdPermsUserUserIdPermNamePermValPutPermNameEnum[keyof typeof ApiV2CollectionCollectionIdPermsUserUserIdPermNamePermValPutPermNameEnum];
/**
 * @export
 */
export const ApiV2MediaEntryMediaEntryIdPermsGroupGroupIdPermNamePermValPutPermNameEnum = {
    GetMetadataAndPreviews: 'get_metadata_and_previews',
    EditMetadata: 'edit_metadata',
    GetFullSize: 'get_full_size'
} as const;
export type ApiV2MediaEntryMediaEntryIdPermsGroupGroupIdPermNamePermValPutPermNameEnum = typeof ApiV2MediaEntryMediaEntryIdPermsGroupGroupIdPermNamePermValPutPermNameEnum[keyof typeof ApiV2MediaEntryMediaEntryIdPermsGroupGroupIdPermNamePermValPutPermNameEnum];
/**
 * @export
 */
export const ApiV2MediaEntryMediaEntryIdPermsResourcePermNamePermValPutPermNameEnum = {
    GetMetadataAndPreviews: 'get_metadata_and_previews',
    GetFullSize: 'get_full_size'
} as const;
export type ApiV2MediaEntryMediaEntryIdPermsResourcePermNamePermValPutPermNameEnum = typeof ApiV2MediaEntryMediaEntryIdPermsResourcePermNamePermValPutPermNameEnum[keyof typeof ApiV2MediaEntryMediaEntryIdPermsResourcePermNamePermValPutPermNameEnum];
/**
 * @export
 */
export const ApiV2MediaEntryMediaEntryIdPermsUserUserIdPermNamePermValPutPermNameEnum = {
    GetMetadataAndPreviews: 'get_metadata_and_previews',
    EditMetadata: 'edit_metadata',
    EditPermissions: 'edit_permissions',
    GetFullSize: 'get_full_size'
} as const;
export type ApiV2MediaEntryMediaEntryIdPermsUserUserIdPermNamePermValPutPermNameEnum = typeof ApiV2MediaEntryMediaEntryIdPermsUserUserIdPermNamePermValPutPermNameEnum[keyof typeof ApiV2MediaEntryMediaEntryIdPermsUserUserIdPermNamePermValPutPermNameEnum];
/**
 * @export
 */
export const ApiV2MetaKeysGetScopeEnum = {
    Use: 'use',
    View: 'view'
} as const;
export type ApiV2MetaKeysGetScopeEnum = typeof ApiV2MetaKeysGetScopeEnum[keyof typeof ApiV2MetaKeysGetScopeEnum];
/**
 * @export
 */
export const ApiV2PeopleGetSubtypeEnum = {
    PeopleInstitutionalGroup: 'PeopleInstitutionalGroup',
    Person: 'Person',
    PeopleGroup: 'PeopleGroup'
} as const;
export type ApiV2PeopleGetSubtypeEnum = typeof ApiV2PeopleGetSubtypeEnum[keyof typeof ApiV2PeopleGetSubtypeEnum];

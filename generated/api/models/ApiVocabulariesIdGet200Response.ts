/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI
 * OpenAPI
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ApiVocabulariesIdGet200Response
 */
export interface ApiVocabulariesIdGet200Response {
    /**
     * 
     * @type {string}
     * @memberof ApiVocabulariesIdGet200Response
     */
    id: string;
    /**
     * 
     * @type {boolean}
     * @memberof ApiVocabulariesIdGet200Response
     */
    enabledForPublicView: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ApiVocabulariesIdGet200Response
     */
    enabledForPublicUse: boolean;
    /**
     * 
     * @type {number}
     * @memberof ApiVocabulariesIdGet200Response
     */
    position: number;
    /**
     * 
     * @type {object}
     * @memberof ApiVocabulariesIdGet200Response
     */
    labels: object | null;
    /**
     * 
     * @type {object}
     * @memberof ApiVocabulariesIdGet200Response
     */
    descriptions: object | null;
    /**
     * 
     * @type {string}
     * @memberof ApiVocabulariesIdGet200Response
     */
    adminComment?: string | null;
}

/**
 * Check if a given object implements the ApiVocabulariesIdGet200Response interface.
 */
export function instanceOfApiVocabulariesIdGet200Response(value: object): value is ApiVocabulariesIdGet200Response {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('enabledForPublicView' in value) || value['enabledForPublicView'] === undefined) return false;
    if (!('enabledForPublicUse' in value) || value['enabledForPublicUse'] === undefined) return false;
    if (!('position' in value) || value['position'] === undefined) return false;
    if (!('labels' in value) || value['labels'] === undefined) return false;
    if (!('descriptions' in value) || value['descriptions'] === undefined) return false;
    return true;
}

export function ApiVocabulariesIdGet200ResponseFromJSON(json: any): ApiVocabulariesIdGet200Response {
    return ApiVocabulariesIdGet200ResponseFromJSONTyped(json, false);
}

export function ApiVocabulariesIdGet200ResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): ApiVocabulariesIdGet200Response {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'enabledForPublicView': json['enabled_for_public_view'],
        'enabledForPublicUse': json['enabled_for_public_use'],
        'position': json['position'],
        'labels': json['labels'],
        'descriptions': json['descriptions'],
        'adminComment': json['admin_comment'] == null ? undefined : json['admin_comment'],
    };
}

export function ApiVocabulariesIdGet200ResponseToJSON(json: any): ApiVocabulariesIdGet200Response {
    return ApiVocabulariesIdGet200ResponseToJSONTyped(json, false);
}

export function ApiVocabulariesIdGet200ResponseToJSONTyped(value?: ApiVocabulariesIdGet200Response | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'enabled_for_public_view': value['enabledForPublicView'],
        'enabled_for_public_use': value['enabledForPublicUse'],
        'position': value['position'],
        'labels': value['labels'],
        'descriptions': value['descriptions'],
        'admin_comment': value['adminComment'],
    };
}


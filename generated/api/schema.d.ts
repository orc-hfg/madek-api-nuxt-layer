/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/api-v2/auth-info": {
    get: {
      responses: {
        /** Authentication info */
        200: {
          schema: {
            status: string;
            data: {
              type: string;
              /** Format: uuid */
              id: string;
              login: string;
              /** Format: date-time */
              created_at?: string;
              first_name?: string;
              last_name?: string;
              /** Format: email */
              email_address?: string;
              "authentication-method"?: string;
            };
          };
        };
      };
    };
  };
  "/api-v2/app-settings": {
    get: {
      parameters: {};
      responses: {
        200: {
          schema: {
            available_locales?: string[];
            catalog_subtitles?: {
              de?: string;
              en?: string;
            };
            /** Format: uuid */
            media_entry_default_license_id?: string;
            contexts_for_entry_edit?: string[];
            contexts_for_entry_validation?: string[];
            copyright_notice_default_text?: string;
            featured_set_subtitles?: {
              de?: string;
              en?: string;
            };
            media_entry_default_license_usage_meta_key?: string;
            /** Format: uuid */
            featured_set_id?: string;
            /** Format: uuid */
            teaser_set_id?: string;
            /** Format: int32 */
            id?: number;
            contexts_for_entry_extra?: string[];
            provenance_notices?: {
              de?: string;
              en?: string;
            };
            media_entry_default_license_usage_text?: string;
            time_zone?: string;
            updated_at?: unknown;
            welcome_titles?: {
              de?: string;
              en?: string;
            };
            welcome_texts?: {
              de?: string;
              en?: string;
            };
            sitemap?: unknown;
            copyright_notice_templates?: string[];
            catalog_titles?: {
              de?: string;
              en?: string;
            };
            support_urls?: {
              de?: string;
              en?: string;
            };
            contexts_for_collection_extra?: string[];
            edit_meta_data_power_users_group_id?: string;
            about_pages?: {
              de?: string;
              en?: string;
            };
            contexts_for_collection_edit?: string[];
            site_titles?: {
              de?: string;
              en?: string;
            };
            context_for_entry_summary?: string;
            created_at?: unknown;
            media_entry_default_license_meta_key?: string;
            default_locale?: string;
            /** Format: uuid */
            splashscreen_slideshow_set_id?: string;
            catalog_context_keys?: string[];
            brand_texts?: {
              de?: string;
              en?: string;
            };
            contexts_for_dynamic_filters?: string[];
            brand_logo_url?: string;
            contexts_for_list_details?: string[];
            featured_set_titles?: {
              de?: string;
              en?: string;
            };
            ignored_keyword_keys_for_browsing?: string;
            section_meta_key_id?: string;
            context_for_collection_summary?: string;
          };
        };
      };
    };
  };
  "/api-v2/context-keys/": {
    get: {
      parameters: {
        query: {
          id?: string;
          context_id?: string;
          meta_key_id?: string;
          is_required?: boolean;
        };
      };
      responses: {
        200: {
          schema: {
            descriptions: {
              de?: string;
              en?: string;
            };
            documentation_urls: {
              de?: string;
              en?: string;
            };
            /** Format: uuid */
            id: string;
            is_required: boolean;
            context_id: string;
            /** Format: int32 */
            position: number;
            labels: {
              de?: string;
              en?: string;
            };
            hints: {
              de?: string;
              en?: string;
            };
            /** Format: int32 */
            length_max: number;
            /** Format: int32 */
            length_min: number;
            meta_key_id: string;
          }[];
        };
        406: {
          schema: unknown;
        };
      };
    };
  };
  "/api-v2/context-keys/{id}": {
    get: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        200: {
          schema: {
            descriptions: {
              de?: string;
              en?: string;
            };
            documentation_urls: {
              de?: string;
              en?: string;
            };
            /** Format: uuid */
            id: string;
            is_required: boolean;
            context_id: string;
            /** Format: int32 */
            position: number;
            labels: {
              de?: string;
              en?: string;
            };
            hints: {
              de?: string;
              en?: string;
            };
            /** Format: int32 */
            length_max: number;
            /** Format: int32 */
            length_min: number;
            meta_key_id: string;
          };
        };
        404: {
          schema: unknown;
        };
      };
    };
  };
  "/api-v2/contexts/": {
    get: {
      parameters: {};
      responses: {
        200: {
          schema: {
            id: string;
            labels: {
              de?: string;
              en?: string;
            };
            descriptions: {
              de?: string;
              en?: string;
            };
          }[];
        };
        406: {
          schema: unknown;
        };
      };
    };
  };
  "/api-v2/contexts/{id}": {
    get: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        200: {
          schema: {
            id: string;
            labels: {
              de?: string;
              en?: string;
            };
            descriptions: {
              de?: string;
              en?: string;
            };
          };
        };
        404: {
          schema: unknown;
        };
      };
    };
  };
  "/api-v2/keywords/": {
    get: {
      parameters: {
        query: {
          id?: string;
          meta_key_id?: string;
          term?: string;
          description?: string;
          rdf_class?: string;
          page?: number;
          count?: number;
        };
      };
      responses: {
        200: {
          schema: {
            keywords: {
              /** Format: uuid */
              id: string;
              meta_key_id: string;
              term: string;
              description: string;
              /** Format: int32 */
              position: number;
              external_uris: unknown[];
              external_uri: string;
              rdf_class: string;
            }[];
          };
        };
      };
    };
  };
  "/api-v2/keywords/{id}": {
    /** Get keyword for id. Returns 404, if no such keyword exists. */
    get: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        200: {
          schema: {
            /** Format: uuid */
            id: string;
            meta_key_id: string;
            term: string;
            description: string;
            /** Format: int32 */
            position: number;
            external_uris: unknown[];
            external_uri: string;
            rdf_class: string;
          };
        };
        404: {
          schema: unknown;
        };
      };
    };
  };
  "/api-v2/meta-keys/": {
    /** Get list of meta-key ids. Paging is used as you get a limit of 100 entries. */
    get: {
      parameters: {
        query: {
          id?: string;
          vocabulary_id?: string;
          meta_datum_object_type?: string;
          is_enabled_for_collections?: boolean;
          is_enabled_for_media_entries?: boolean;
          scope?: "use" | "view";
          page?: number;
          count?: number;
        };
      };
      responses: {
        200: {
          schema: {
            "meta-keys": {
              descriptions: {
                de?: string;
                en?: string;
              };
              meta_datum_object_type?: string;
              is_extensible_list?: boolean;
              is_enabled_for_collections?: boolean;
              allowed_rdf_class?: string;
              documentation_urls: {
                de?: string;
                en?: string;
              };
              vocabulary_id: string;
              is_enabled_for_media_entries?: boolean;
              id: string;
              /** Format: int32 */
              position?: number;
              /** Format: int32 */
              position_2?: number;
              labels: {
                de?: string;
                en?: string;
              };
              hints: {
                de?: string;
                en?: string;
              };
              keywords_alphabetical_order?: boolean;
              enabled_for_public_view?: boolean;
              text_type?: string;
              allowed_people_subtypes?: string[];
              id_2?: string;
              labels_2?: unknown;
              descriptions_2?: unknown;
              io_mappings?: unknown;
              enabled_for_public_use?: boolean;
            }[];
          };
        };
      };
    };
  };
  "/api-v2/meta-keys/{id}": {
    /** Get meta-key by id. Returns 404, if no such meta-key exists. */
    get: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        200: {
          schema: {
            descriptions: {
              de?: string;
              en?: string;
            };
            meta_datum_object_type?: string;
            is_extensible_list?: boolean;
            is_enabled_for_collections?: boolean;
            allowed_rdf_class?: string;
            documentation_urls: {
              de?: string;
              en?: string;
            };
            vocabulary_id: string;
            is_enabled_for_media_entries?: boolean;
            id: string;
            /** Format: int32 */
            position?: number;
            /** Format: int32 */
            position_2?: number;
            labels: {
              de?: string;
              en?: string;
            };
            hints: {
              de?: string;
              en?: string;
            };
            keywords_alphabetical_order?: boolean;
            enabled_for_public_view?: boolean;
            text_type?: string;
            allowed_people_subtypes?: string[];
            id_2?: string;
            labels_2?: unknown;
            descriptions_2?: unknown;
            io_mappings?: unknown;
            enabled_for_public_use?: boolean;
          };
        };
        404: {
          schema: {
            message: string;
          };
        };
        422: {
          schema: {
            message: string;
          };
        };
      };
    };
  };
  "/api-v2/people/": {
    /** Query list of people only for ids or full-data. Optional Paging. */
    get: {
      parameters: {
        query: {
          subtype?: "PeopleInstitutionalGroup" | "Person" | "PeopleGroup";
          institutional_id?: string;
          searchable?: string;
          id?: string;
          count?: number;
          pseudonym?: string;
          last_name?: string;
          first_name?: string;
          page?: number;
          full_data?: boolean;
          description?: string;
        };
      };
      responses: {
        200: {
          schema: {
            people: {
              /** @enum {string} */
              subtype: "PeopleInstitutionalGroup" | "Person" | "PeopleGroup";
              institutional_id?: string;
              searchable?: string;
              external_uris?: string[];
              /** Format: uuid */
              id: string;
              pseudonym?: string;
              updated_at?: unknown;
              last_name?: string;
              first_name?: string;
              created_at?: unknown;
              external_uri?: string;
              description?: string;
            }[];
          };
        };
      };
    };
  };
  "/api-v2/people/{id}": {
    /** Get person by id. Returns 404, if no such person exists. TODO query params. */
    get: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        200: {
          schema: {
            /** @enum {string} */
            subtype: "PeopleInstitutionalGroup" | "Person" | "PeopleGroup";
            institutional_id: string;
            external_uris: string[];
            /** Format: uuid */
            id: string;
            pseudonym: string;
            updated_at: unknown;
            last_name: string;
            first_name: string;
            created_at: unknown;
            external_uri: string;
            description: string;
          };
        };
        404: {
          schema: string;
        };
      };
    };
  };
  "/api-v2/collections": {
    get: {
      parameters: {
        query: {
          me_edit_permission?: boolean;
          count?: number;
          me_edit_metadata_and_relations?: boolean;
          me_get_metadata_and_previews?: boolean;
          collection_id?: string;
          clipboard_user_id?: string;
          order?: string;
          responsible_delegation_id?: string;
          page?: number;
          workflow_id?: string;
          responsible_user_id?: string;
          creator_id?: string;
          full_data?: boolean;
          public_get_metadata_and_previews?: boolean;
        };
      };
      responses: {
        200: {
          schema: {
            collections: {
              /** @enum {string} */
              default_resource_type?: "collection" | "entries" | "all";
              get_metadata_and_previews?: boolean;
              edit_session_updated_at?: unknown;
              is_master?: boolean;
              /** Format: uuid */
              default_context_id?: string;
              /** Format: uuid */
              id: string;
              updated_at?: unknown;
              /** @enum {string} */
              layout?: "list" | "grid" | "tiles" | "miniature";
              /** Format: uuid */
              clipboard_user_id?: string;
              created_at?: unknown;
              /** Format: uuid */
              responsible_delegation_id?: string;
              /** @enum {string} */
              sorting?:
                | "manual DESC"
                | "manual ASC"
                | "title ASC"
                | "created_at DESC"
                | "title DESC"
                | "created_at ASC"
                | "last_change";
              /** Format: uuid */
              workflow_id?: string;
              meta_data_updated_at?: unknown;
              /** Format: uuid */
              responsible_user_id?: string;
              /** Format: uuid */
              creator_id?: string;
            }[];
          };
        };
      };
    };
  };
  "/api-v2/collection": {
    post: {
      parameters: {
        body: {
          body: {
            /** @enum {string} */
            default_resource_type?: "collection" | "entries" | "all";
            get_metadata_and_previews?: boolean;
            is_master?: boolean;
            /** Format: uuid */
            default_context_id?: string;
            /** @enum {string} */
            layout?: "list" | "grid" | "tiles" | "miniature";
            /** Format: uuid */
            responsible_delegation_id?: string;
            /** @enum {string} */
            sorting?:
              | "manual DESC"
              | "manual ASC"
              | "title ASC"
              | "created_at DESC"
              | "title DESC"
              | "created_at ASC"
              | "last_change";
            /** Format: uuid */
            workflow_id?: string;
            /** Format: uuid */
            responsible_user_id?: string;
          };
        };
      };
      responses: {
        200: {
          schema: {
            /** @enum {string} */
            default_resource_type?: "collection" | "entries" | "all";
            get_metadata_and_previews?: boolean;
            edit_session_updated_at?: unknown;
            is_master?: boolean;
            /** Format: uuid */
            default_context_id?: string;
            /** Format: uuid */
            id: string;
            updated_at?: unknown;
            /** @enum {string} */
            layout?: "list" | "grid" | "tiles" | "miniature";
            /** Format: uuid */
            clipboard_user_id?: string;
            created_at?: unknown;
            /** Format: uuid */
            responsible_delegation_id?: string;
            /** @enum {string} */
            sorting?:
              | "manual DESC"
              | "manual ASC"
              | "title ASC"
              | "created_at DESC"
              | "title DESC"
              | "created_at ASC"
              | "last_change";
            /** Format: uuid */
            workflow_id?: string;
            meta_data_updated_at?: unknown;
            /** Format: uuid */
            responsible_user_id?: string;
            /** Format: uuid */
            creator_id?: string;
          };
        };
        406: {
          schema: unknown;
        };
      };
    };
  };
  "/api-v2/collection/{collection_id}": {
    get: {
      parameters: {
        path: {
          collection_id: string;
        };
      };
      responses: {
        200: {
          schema: {
            /** @enum {string} */
            default_resource_type?: "collection" | "entries" | "all";
            get_metadata_and_previews?: boolean;
            edit_session_updated_at?: unknown;
            is_master?: boolean;
            /** Format: uuid */
            default_context_id?: string;
            /** Format: uuid */
            id: string;
            updated_at?: unknown;
            /** @enum {string} */
            layout?: "list" | "grid" | "tiles" | "miniature";
            /** Format: uuid */
            clipboard_user_id?: string;
            created_at?: unknown;
            /** Format: uuid */
            responsible_delegation_id?: string;
            /** @enum {string} */
            sorting?:
              | "manual DESC"
              | "manual ASC"
              | "title ASC"
              | "created_at DESC"
              | "title DESC"
              | "created_at ASC"
              | "last_change";
            /** Format: uuid */
            workflow_id?: string;
            meta_data_updated_at?: unknown;
            /** Format: uuid */
            responsible_user_id?: string;
            /** Format: uuid */
            creator_id?: string;
          };
        };
        404: {
          schema: unknown;
        };
        422: {
          schema: unknown;
        };
      };
    };
    put: {
      parameters: {
        path: {
          collection_id: string;
        };
        body: {
          body: {
            /** @enum {string} */
            layout?: "list" | "grid" | "tiles" | "miniature";
            is_master?: boolean;
            /** @enum {string} */
            sorting?:
              | "manual DESC"
              | "manual ASC"
              | "title ASC"
              | "created_at DESC"
              | "title DESC"
              | "created_at ASC"
              | "last_change";
            /** Format: uuid */
            default_context_id?: string;
            /** Format: uuid */
            workflow_id?: string;
            /** @enum {string} */
            default_resource_type?: "collection" | "entries" | "all";
          };
        };
      };
      responses: {
        200: {
          schema: {
            /** @enum {string} */
            default_resource_type?: "collection" | "entries" | "all";
            get_metadata_and_previews?: boolean;
            edit_session_updated_at?: unknown;
            is_master?: boolean;
            /** Format: uuid */
            default_context_id?: string;
            /** Format: uuid */
            id: string;
            updated_at?: unknown;
            /** @enum {string} */
            layout?: "list" | "grid" | "tiles" | "miniature";
            /** Format: uuid */
            clipboard_user_id?: string;
            created_at?: unknown;
            /** Format: uuid */
            responsible_delegation_id?: string;
            /** @enum {string} */
            sorting?:
              | "manual DESC"
              | "manual ASC"
              | "title ASC"
              | "created_at DESC"
              | "title DESC"
              | "created_at ASC"
              | "last_change";
            /** Format: uuid */
            workflow_id?: string;
            meta_data_updated_at?: unknown;
            /** Format: uuid */
            responsible_user_id?: string;
            /** Format: uuid */
            creator_id?: string;
          };
        };
        404: {
          schema: unknown;
        };
        422: {
          schema: unknown;
        };
      };
    };
    delete: {
      parameters: {
        path: {
          collection_id: string;
        };
      };
      responses: {
        200: {
          schema: {
            /** @enum {string} */
            default_resource_type?: "collection" | "entries" | "all";
            get_metadata_and_previews?: boolean;
            edit_session_updated_at?: unknown;
            is_master?: boolean;
            /** Format: uuid */
            default_context_id?: string;
            /** Format: uuid */
            id: string;
            updated_at?: unknown;
            /** @enum {string} */
            layout?: "list" | "grid" | "tiles" | "miniature";
            /** Format: uuid */
            clipboard_user_id?: string;
            created_at?: unknown;
            /** Format: uuid */
            responsible_delegation_id?: string;
            /** @enum {string} */
            sorting?:
              | "manual DESC"
              | "manual ASC"
              | "title ASC"
              | "created_at DESC"
              | "title DESC"
              | "created_at ASC"
              | "last_change";
            /** Format: uuid */
            workflow_id?: string;
            meta_data_updated_at?: unknown;
            /** Format: uuid */
            responsible_user_id?: string;
            /** Format: uuid */
            creator_id?: string;
          };
        };
        404: {
          schema: unknown;
        };
        422: {
          schema: unknown;
        };
      };
    };
  };
  "/api-v2/collection/{collection_id}/meta-data": {
    get: {
      parameters: {
        path: {
          collection_id: string;
        };
        query: {
          updated_after?: string;
          meta_keys?: string;
        };
      };
      responses: {
        200: {
          schema: unknown;
        };
      };
    };
  };
  "/api-v2/collection/{collection_id}/meta-data-related": {
    get: {
      parameters: {
        path: {
          collection_id: string;
        };
        query: {
          updated_after?: string;
          meta_keys?: string;
        };
      };
      responses: {
        200: {
          schema: unknown;
        };
      };
    };
  };
  "/api-v2/collection/{collection_id}/meta-datum/{meta_key_id}": {
    get: {
      parameters: {
        path: {
          collection_id: string;
          meta_key_id: string;
        };
      };
      responses: {
        200: {
          schema: unknown;
        };
      };
    };
    delete: {
      parameters: {
        path: {
          collection_id: string;
          meta_key_id: string;
        };
      };
      responses: {
        200: {
          schema: unknown;
        };
      };
    };
  };
  "/api-v2/collection/{collection_id}/meta-datum/{meta_key_id}/text": {
    put: {
      parameters: {
        path: {
          collection_id: string;
          meta_key_id: string;
        };
        body: {
          body: {
            string: string;
          };
        };
      };
      responses: {
        200: {
          schema: unknown;
        };
      };
    };
    post: {
      parameters: {
        path: {
          collection_id: string;
          meta_key_id: string;
        };
        body: {
          body: {
            string: string;
          };
        };
      };
      responses: {
        200: {
          schema: unknown;
        };
      };
    };
  };
  "/api-v2/collection/{collection_id}/meta-datum/{meta_key_id}/text-date": {
    put: {
      parameters: {
        path: {
          collection_id: string;
          meta_key_id: string;
        };
        body: {
          body: {
            string: string;
          };
        };
      };
      responses: {
        200: {
          schema: unknown;
        };
      };
    };
    post: {
      parameters: {
        path: {
          collection_id: string;
          meta_key_id: string;
        };
        body: {
          body: {
            string: string;
          };
        };
      };
      responses: {
        200: {
          schema: unknown;
        };
      };
    };
  };
  "/api-v2/collection/{collection_id}/meta-datum/{meta_key_id}/json": {
    put: {
      parameters: {
        path: {
          collection_id: string;
          meta_key_id: string;
        };
        body: {
          body: {
            json: unknown;
          };
        };
      };
      responses: {
        200: {
          schema: unknown;
        };
      };
    };
    post: {
      parameters: {
        path: {
          collection_id: string;
          meta_key_id: string;
        };
        body: {
          body: {
            json: unknown;
          };
        };
      };
      responses: {
        200: {
          schema: unknown;
        };
      };
    };
  };
  "/api-v2/collection/{collection_id}/meta-datum/{meta_key_id}/keyword": {
    get: {
      parameters: {
        path: {
          collection_id: string;
          meta_key_id: string;
        };
      };
      responses: {
        200: {
          schema: unknown;
        };
      };
    };
  };
  "/api-v2/collection/{collection_id}/meta-datum/{meta_key_id}/keyword/{keyword_id}": {
    post: {
      parameters: {
        path: {
          collection_id: string;
          meta_key_id: string;
          keyword_id: string;
        };
      };
      responses: {
        200: {
          schema: unknown;
        };
      };
    };
    delete: {
      parameters: {
        path: {
          collection_id: string;
          meta_key_id: string;
          keyword_id: string;
        };
      };
      responses: {
        200: {
          schema: unknown;
        };
      };
    };
  };
  "/api-v2/collection/{collection_id}/meta-datum/{meta_key_id}/people": {
    get: {
      parameters: {
        path: {
          collection_id: string;
          meta_key_id: string;
        };
      };
      responses: {
        200: {
          schema: unknown;
        };
      };
    };
  };
  "/api-v2/collection/{collection_id}/meta-datum/{meta_key_id}/people/{person_id}": {
    post: {
      parameters: {
        path: {
          collection_id: string;
          meta_key_id: string;
          person_id: string;
        };
      };
      responses: {
        200: {
          schema: unknown;
        };
      };
    };
    delete: {
      parameters: {
        path: {
          collection_id: string;
          meta_key_id: string;
          person_id: string;
        };
      };
      responses: {
        200: {
          schema: unknown;
        };
      };
    };
  };
  "/api-v2/collection/{collection_id}/meta-datum/{meta_key_id}/role/{role_id}": {
    post: {
      parameters: {
        path: {
          media_entry_id: string;
          meta_key_id: string;
          role_id: string;
        };
      };
      responses: {
        200: {
          schema: unknown;
        };
      };
    };
  };
  "/api-v2/collection/{collection_id}/custom_url": {
    get: {
      parameters: {
        path: {
          collection_id: string;
        };
      };
      responses: {
        default: unknown;
      };
    };
    put: {
      parameters: {
        path: {
          collection_id: string;
        };
        body: {
          body: {
            id?: string;
            is_primary?: boolean;
          };
        };
      };
      responses: {
        200: {
          schema: {
            id: string;
            is_primary: boolean;
            /** Format: uuid */
            creator_id: string;
            /** Format: uuid */
            updator_id: string;
            updated_at: unknown;
            created_at: unknown;
            /** Format: uuid */
            media_entry_id: string;
            /** Format: uuid */
            collection_id: string;
          };
        };
        406: {
          schema: unknown;
        };
      };
    };
    post: {
      parameters: {
        path: {
          collection_id: string;
        };
        body: {
          body: {
            id: string;
            is_primary: boolean;
          };
        };
      };
      responses: {
        200: {
          schema: {
            id: string;
            is_primary: boolean;
            /** Format: uuid */
            creator_id: string;
            /** Format: uuid */
            updator_id: string;
            updated_at: unknown;
            created_at: unknown;
            /** Format: uuid */
            media_entry_id: string;
            /** Format: uuid */
            collection_id: string;
          };
        };
        406: {
          schema: unknown;
        };
      };
    };
    delete: {
      parameters: {
        path: {
          collection_id: string;
        };
      };
      responses: {
        200: {
          schema: {
            id: string;
            is_primary: boolean;
            /** Format: uuid */
            creator_id: string;
            /** Format: uuid */
            updator_id: string;
            updated_at: unknown;
            created_at: unknown;
            /** Format: uuid */
            media_entry_id: string;
            /** Format: uuid */
            collection_id: string;
          };
        };
        404: {
          schema: unknown;
        };
      };
    };
  };
  "/api-v2/collection/{collection_id}/edit_sessions": {
    get: {
      parameters: {
        path: {
          collection_id: string;
        };
      };
      responses: {
        200: {
          schema: {
            /** Format: uuid */
            id: string;
            /** Format: uuid */
            user_id: string;
            created_at: unknown;
            /** Format: uuid */
            media_entry_id: string;
            /** Format: uuid */
            collection_id: string;
          }[];
        };
        404: {
          schema: unknown;
        };
      };
    };
    post: {
      parameters: {
        path: {
          collection_id: string;
        };
      };
      responses: {
        200: {
          schema: {
            /** Format: uuid */
            id: string;
            /** Format: uuid */
            user_id: string;
            created_at: unknown;
            /** Format: uuid */
            media_entry_id: string;
            /** Format: uuid */
            collection_id: string;
          };
        };
        404: {
          schema: unknown;
        };
      };
    };
  };
  "/api-v2/collection/{collection_id}/favorite": {
    get: {
      parameters: {
        path: {
          collection_id: string;
        };
      };
      responses: {
        default: unknown;
      };
    };
    post: {
      parameters: {
        path: {
          collection_id: string;
        };
      };
      responses: {
        default: unknown;
      };
    };
    delete: {
      parameters: {
        path: {
          collection_id: string;
        };
      };
      responses: {
        default: unknown;
      };
    };
  };
  "/api-v2/collection/{collection_id}/perms/": {
    get: {
      parameters: {
        path: {
          collection_id: string;
        };
      };
      responses: {
        200: {
          schema: {
            "media-resource": {
              /** Format: uuid */
              id: string;
              /** Format: uuid */
              creator_id: string;
              get_metadata_and_previews?: boolean;
              /** Format: uuid */
              responsible_user_id?: string;
              /** Format: uuid */
              clipboard_user_id?: string;
              /** Format: uuid */
              workflow_id?: string;
              /** Format: uuid */
              responsible_delegation_id?: string;
            };
            users: {
              /** Format: uuid */
              user_id: string;
              get_metadata_and_previews: boolean;
              edit_permissions: boolean;
              /** Format: uuid */
              delegation_id: string;
              edit_metadata_and_relations: boolean;
              /** Format: uuid */
              id: string;
              /** Format: uuid */
              updator_id: string;
              updated_at: unknown;
              /** Format: uuid */
              collection_id: string;
              created_at: unknown;
            }[];
            groups: {
              /** Format: uuid */
              id: string;
              /** Format: uuid */
              updator_id: string;
              /** Format: uuid */
              collection_id: string;
              /** Format: uuid */
              group_id: string;
              get_metadata_and_previews: boolean;
              edit_metadata_and_relations: boolean;
              created_at: unknown;
              updated_at: unknown;
            }[];
          };
        };
      };
    };
  };
  "/api-v2/collection/{collection_id}/perms/resources": {
    get: {
      parameters: {
        path: {
          collection_id: string;
        };
      };
      responses: {
        200: {
          schema: {
            /** Format: uuid */
            id: string;
            /** Format: uuid */
            creator_id: string;
            get_metadata_and_previews?: boolean;
            /** Format: uuid */
            responsible_user_id?: string;
            /** Format: uuid */
            clipboard_user_id?: string;
            /** Format: uuid */
            workflow_id?: string;
            /** Format: uuid */
            responsible_delegation_id?: string;
          };
        };
      };
    };
    /** Valid perm_name values are["get_metadata_and_previews" "get_full_size" "edit_metadata" "edit_permissions"] */
    put: {
      parameters: {
        path: {
          collection_id: string;
        };
        body: {
          body: {
            get_metadata_and_previews?: boolean;
            /** Format: uuid */
            responsible_user_id?: string;
            /** Format: uuid */
            clipboard_user_id?: string;
            /** Format: uuid */
            workflow_id?: string;
            /** Format: uuid */
            responsible_delegation_id?: string;
          };
        };
      };
      responses: {
        200: {
          schema: {
            /** Format: uuid */
            id: string;
            /** Format: uuid */
            creator_id: string;
            get_metadata_and_previews?: boolean;
            /** Format: uuid */
            responsible_user_id?: string;
            /** Format: uuid */
            clipboard_user_id?: string;
            /** Format: uuid */
            workflow_id?: string;
            /** Format: uuid */
            responsible_delegation_id?: string;
          };
        };
      };
    };
  };
  "/api-v2/collection/{collection_id}/perms/resource/{perm_name}/{perm_val}": {
    /** Valid perm_name values are["get_metadata_and_previews" "get_full_size" "edit_metadata" "edit_permissions"] */
    put: {
      parameters: {
        path: {
          collection_id: string;
          perm_name: "get_metadata_and_previews";
          perm_val: boolean;
        };
      };
      responses: {
        200: {
          schema: {
            /** Format: uuid */
            id: string;
            /** Format: uuid */
            creator_id: string;
            get_metadata_and_previews?: boolean;
            /** Format: uuid */
            responsible_user_id?: string;
            /** Format: uuid */
            clipboard_user_id?: string;
            /** Format: uuid */
            workflow_id?: string;
            /** Format: uuid */
            responsible_delegation_id?: string;
          };
        };
      };
    };
  };
  "/api-v2/collection/{collection_id}/perms/users": {
    get: {
      parameters: {
        path: {
          collection_id: string;
        };
      };
      responses: {
        200: {
          schema: {
            /** Format: uuid */
            user_id: string;
            get_metadata_and_previews: boolean;
            edit_permissions: boolean;
            /** Format: uuid */
            delegation_id: string;
            edit_metadata_and_relations: boolean;
            /** Format: uuid */
            id: string;
            /** Format: uuid */
            updator_id: string;
            updated_at: unknown;
            /** Format: uuid */
            collection_id: string;
            created_at: unknown;
          }[];
        };
      };
    };
  };
  "/api-v2/collection/{collection_id}/perms/user/{user_id}": {
    get: {
      parameters: {
        path: {
          collection_id: string;
          user_id: string;
        };
      };
      responses: {
        200: {
          schema: {
            /** Format: uuid */
            user_id: string;
            get_metadata_and_previews: boolean;
            edit_permissions: boolean;
            /** Format: uuid */
            delegation_id: string;
            edit_metadata_and_relations: boolean;
            /** Format: uuid */
            id: string;
            /** Format: uuid */
            updator_id: string;
            updated_at: unknown;
            /** Format: uuid */
            collection_id: string;
            created_at: unknown;
          };
        };
      };
    };
    post: {
      parameters: {
        path: {
          collection_id: string;
          user_id: string;
        };
        body: {
          body: {
            get_metadata_and_previews: boolean;
            edit_metadata_and_relations: boolean;
            edit_permissions: boolean;
          };
        };
      };
      responses: {
        200: {
          schema: {
            /** Format: uuid */
            user_id: string;
            get_metadata_and_previews: boolean;
            edit_permissions: boolean;
            /** Format: uuid */
            delegation_id: string;
            edit_metadata_and_relations: boolean;
            /** Format: uuid */
            id: string;
            /** Format: uuid */
            updator_id: string;
            updated_at: unknown;
            /** Format: uuid */
            collection_id: string;
            created_at: unknown;
          };
        };
      };
    };
    delete: {
      parameters: {
        path: {
          collection_id: string;
          user_id: string;
        };
      };
      responses: {
        200: {
          schema: {
            /** Format: uuid */
            user_id: string;
            get_metadata_and_previews: boolean;
            edit_permissions: boolean;
            /** Format: uuid */
            delegation_id: string;
            edit_metadata_and_relations: boolean;
            /** Format: uuid */
            id: string;
            /** Format: uuid */
            updator_id: string;
            updated_at: unknown;
            /** Format: uuid */
            collection_id: string;
            created_at: unknown;
          };
        };
      };
    };
  };
  "/api-v2/collection/{collection_id}/perms/user/{user_id}/{perm_name}/{perm_val}": {
    put: {
      parameters: {
        path: {
          collection_id: string;
          user_id: string;
          perm_name:
            | "get_metadata_and_previews"
            | "edit_permissions"
            | "edit_metadata_and_relations";
          perm_val: boolean;
        };
      };
      responses: {
        200: {
          schema: {
            /** Format: uuid */
            user_id: string;
            get_metadata_and_previews: boolean;
            edit_permissions: boolean;
            /** Format: uuid */
            delegation_id: string;
            edit_metadata_and_relations: boolean;
            /** Format: uuid */
            id: string;
            /** Format: uuid */
            updator_id: string;
            updated_at: unknown;
            /** Format: uuid */
            collection_id: string;
            created_at: unknown;
          };
        };
      };
    };
  };
  "/api-v2/collection/{collection_id}/perms/groups": {
    get: {
      parameters: {
        path: {
          collection_id: string;
        };
      };
      responses: {
        200: {
          schema: {
            /** Format: uuid */
            id: string;
            /** Format: uuid */
            updator_id: string;
            /** Format: uuid */
            collection_id: string;
            /** Format: uuid */
            group_id: string;
            get_metadata_and_previews: boolean;
            edit_metadata_and_relations: boolean;
            created_at: unknown;
            updated_at: unknown;
          }[];
        };
      };
    };
  };
  "/api-v2/collection/{collection_id}/perms/group/{group_id}": {
    get: {
      parameters: {
        path: {
          collection_id: string;
          group_id: string;
        };
      };
      responses: {
        200: {
          schema: {
            /** Format: uuid */
            id: string;
            /** Format: uuid */
            updator_id: string;
            /** Format: uuid */
            collection_id: string;
            /** Format: uuid */
            group_id: string;
            get_metadata_and_previews: boolean;
            edit_metadata_and_relations: boolean;
            created_at: unknown;
            updated_at: unknown;
          };
        };
      };
    };
    post: {
      parameters: {
        path: {
          collection_id: string;
          group_id: string;
        };
        body: {
          body: {
            get_metadata_and_previews: boolean;
            edit_metadata_and_relations: boolean;
          };
        };
      };
      responses: {
        200: {
          schema: {
            /** Format: uuid */
            id: string;
            /** Format: uuid */
            updator_id: string;
            /** Format: uuid */
            collection_id: string;
            /** Format: uuid */
            group_id: string;
            get_metadata_and_previews: boolean;
            edit_metadata_and_relations: boolean;
            created_at: unknown;
            updated_at: unknown;
          };
        };
      };
    };
    delete: {
      parameters: {
        path: {
          collection_id: string;
          group_id: string;
        };
      };
      responses: {
        200: {
          schema: {
            /** Format: uuid */
            id: string;
            /** Format: uuid */
            updator_id: string;
            /** Format: uuid */
            collection_id: string;
            /** Format: uuid */
            group_id: string;
            get_metadata_and_previews: boolean;
            edit_metadata_and_relations: boolean;
            created_at: unknown;
            updated_at: unknown;
          };
        };
      };
    };
  };
  "/api-v2/collection/{collection_id}/perms/group/{group_id}/{perm_name}/{perm_val}": {
    /** Valid perm_name values are["get_metadata_and_previews" "get_full_size" "edit_metadata" "edit_permissions"] */
    put: {
      parameters: {
        path: {
          collection_id: string;
          group_id: string;
          perm_name:
            | "get_metadata_and_previews"
            | "edit_metadata_and_relations";
          perm_val: boolean;
        };
      };
      responses: {
        200: {
          schema: {
            /** Format: uuid */
            id: string;
            /** Format: uuid */
            updator_id: string;
            /** Format: uuid */
            collection_id: string;
            /** Format: uuid */
            group_id: string;
            get_metadata_and_previews: boolean;
            edit_metadata_and_relations: boolean;
            created_at: unknown;
            updated_at: unknown;
          };
        };
      };
    };
  };
  "/api-v2/collection/{collection_id}/media-entry-arcs": {
    get: {
      parameters: {
        path: {
          collection_id: string;
        };
      };
      responses: {
        200: {
          schema: {
            "collection-media-entry-arcs": {
              cover: boolean;
              /** Format: uuid */
              id: string;
              /** Format: int32 */
              position: number;
              /** Format: uuid */
              media_entry_id: string;
              updated_at: unknown;
              /** Format: uuid */
              collection_id: string;
              /** Format: double */
              order: number;
              created_at: unknown;
              highlight: boolean;
            }[];
          };
        };
      };
    };
  };
  "/api-v2/collection/{collection_id}/media-entry-arc/{media_entry_id}": {
    put: {
      parameters: {
        path: {
          collection_id: string;
          media_entry_id: string;
        };
        body: {
          body: {
            highlight?: boolean;
            cover?: boolean;
            /** Format: double */
            order?: number;
            /** Format: int32 */
            position?: number;
          };
        };
      };
      responses: {
        200: {
          schema: unknown;
        };
        404: {
          schema: unknown;
        };
        406: {
          schema: unknown;
        };
      };
    };
    post: {
      parameters: {
        path: {
          collection_id: string;
          media_entry_id: string;
        };
        body: {
          body: {
            highlight?: boolean;
            cover?: boolean;
            /** Format: double */
            order?: number;
            /** Format: int32 */
            position?: number;
          };
        };
      };
      responses: {
        200: {
          schema: unknown;
        };
        404: {
          schema: unknown;
        };
        406: {
          schema: unknown;
        };
        500: {
          schema: unknown;
        };
      };
    };
    delete: {
      parameters: {
        path: {
          collection_id: string;
          media_entry_id: string;
        };
      };
      responses: {
        200: {
          schema: unknown;
        };
        404: {
          schema: unknown;
        };
        406: {
          schema: unknown;
        };
      };
    };
  };
  "/api-v2/collection/{parent_id}/collection-arc/{child_id}": {
    get: {
      parameters: {
        path: {
          parent_id: string;
          child_id: string;
        };
      };
      responses: {
        200: {
          schema: unknown;
        };
        404: {
          schema: unknown;
        };
      };
    };
    put: {
      parameters: {
        path: {
          parent_id: string;
          child_id: string;
        };
        body: {
          body: {
            highlight?: boolean;
            /** Format: double */
            order?: number;
            /** Format: int32 */
            position?: number;
          };
        };
      };
      responses: {
        200: {
          schema: unknown;
        };
        404: {
          schema: unknown;
        };
        406: {
          schema: unknown;
        };
      };
    };
    post: {
      parameters: {
        path: {
          parent_id: string;
          child_id: string;
        };
        body: {
          body: {
            highlight?: boolean;
            /** Format: double */
            order?: number;
            /** Format: int32 */
            position?: number;
          };
        };
      };
      responses: {
        200: {
          schema: unknown;
        };
        406: {
          schema: unknown;
        };
      };
    };
    delete: {
      parameters: {
        path: {
          parent_id: string;
          child_id: string;
        };
      };
      responses: {
        200: {
          schema: unknown;
        };
        404: {
          schema: unknown;
        };
        406: {
          schema: unknown;
        };
      };
    };
  };
  "/api-v2/collection-media-entry-arcs/": {
    get: {
      parameters: {
        query: {
          collection_id?: string;
          media_entry_id?: string;
        };
      };
      responses: {
        200: {
          schema: unknown;
        };
      };
    };
  };
  "/api-v2/collection-media-entry-arcs/{id}": {
    get: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        200: {
          schema: unknown;
        };
        404: {
          schema: unknown;
        };
      };
    };
  };
  "/api-v2/collection-collection-arcs/": {
    get: {
      parameters: {
        query: {
          child_id?: string;
          parent_id?: string;
          page?: number;
          count?: number;
        };
      };
      responses: {
        200: {
          schema: unknown;
        };
      };
    };
  };
  "/api-v2/collection-collection-arcs/{id}": {
    get: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        200: {
          schema: unknown;
        };
        404: {
          schema: unknown;
        };
      };
    };
  };
  "/api-v2/collection/{collection_id}/full_text": {
    get: {
      parameters: {
        path: {
          collection_id: string;
        };
      };
      responses: {
        default: unknown;
      };
    };
    put: {
      parameters: {
        path: {
          collection_id: string;
        };
        body: {
          body: {
            text: string;
          };
        };
      };
      responses: {
        default: unknown;
      };
    };
    post: {
      parameters: {
        path: {
          collection_id: string;
        };
        body: {
          body: {
            text: string;
          };
        };
      };
      responses: {
        default: unknown;
      };
    };
    delete: {
      parameters: {
        path: {
          collection_id: string;
        };
      };
      responses: {
        default: unknown;
      };
    };
  };
  "/api-v2/custom_urls/": {
    get: {
      parameters: {
        query: {
          full_data?: boolean;
          id?: string;
          media_entry_id?: string;
          collection_id?: string;
        };
      };
      responses: {
        default: unknown;
      };
    };
  };
  "/api-v2/custom_urls/{id}": {
    get: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        default: unknown;
      };
    };
  };
  "/api-v2/edit_sessions/": {
    get: {
      parameters: {
        query: {
          full_data?: boolean;
          page?: number;
          count?: number;
          id?: string;
          media_entry_id?: string;
          collection_id?: string;
        };
      };
      responses: {
        default: unknown;
      };
    };
  };
  "/api-v2/edit_sessions/{id}": {
    get: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        default: unknown;
      };
    };
  };
  "/api-v2/favorite/media-entries": {
    get: {
      parameters: {};
      responses: {
        200: {
          schema: {
            media_entry_ids: string[];
          };
        };
      };
    };
  };
  "/api-v2/favorite/collections": {
    get: {
      parameters: {};
      responses: {
        200: {
          schema: {
            collection_ids: string[];
          };
        };
      };
    };
  };
  "/api-v2/full_texts": {
    get: {
      parameters: {
        query: {
          full_data?: boolean;
          media_resource_id?: string;
          text?: string;
          page?: string;
          count?: string;
        };
      };
      responses: {
        default: unknown;
      };
    };
  };
  "/api-v2/full_texts/{media_resource_id}": {
    get: {
      parameters: {
        path: {
          media_resource_id: string;
        };
      };
      responses: {
        default: unknown;
      };
    };
  };
  "/api-v2/media-entries": {
    get: {
      parameters: {
        query: {
          me_edit_metadata?: boolean;
          public_get_full_size?: boolean;
          me_edit_permissions?: boolean;
          count?: number;
          filter_by?: string;
          me_get_metadata_and_previews?: boolean;
          me_get_full_size?: boolean;
          collection_id?: string;
          order?: string;
          page?: number;
          full_data?: boolean;
          public_get_metadata_and_previews?: boolean;
        };
      };
      responses: {
        200: {
          schema: {
            media_entries: {
              get_metadata_and_previews?: boolean;
              edit_session_updated_at?: unknown;
              get_full_size?: boolean;
              /** Format: uuid */
              id: string;
              updated_at?: unknown;
              is_published?: boolean;
              created_at?: unknown;
              /** Format: uuid */
              responsible_delegation_id?: string;
              meta_data_updated_at?: unknown;
              /** Format: uuid */
              responsible_user_id?: string;
              /** Format: uuid */
              creator_id?: string;
            }[];
            col_arcs?: {
              /** Format: uuid */
              media_entry_id: string;
              /** Format: uuid */
              id: string;
              /** Format: double */
              order: number;
              /** Format: int32 */
              position: number;
              created_at: unknown;
              updated_at: unknown;
            }[];
          };
        };
        422: {
          schema: unknown;
        };
      };
    };
  };
  "/api-v2/media-entries-related-data": {
    get: {
      parameters: {
        query: {
          me_edit_metadata?: boolean;
          public_get_full_size?: boolean;
          me_edit_permissions?: boolean;
          count?: number;
          filter_by?: string;
          me_get_metadata_and_previews?: boolean;
          me_get_full_size?: boolean;
          collection_id?: string;
          order?: string;
          page?: number;
          full_data?: boolean;
          public_get_metadata_and_previews?: boolean;
        };
      };
      responses: {
        200: {
          schema: {
            media_entries: {
              get_metadata_and_previews?: boolean;
              edit_session_updated_at?: unknown;
              get_full_size?: boolean;
              /** Format: uuid */
              id: string;
              updated_at?: unknown;
              is_published?: boolean;
              created_at?: unknown;
              /** Format: uuid */
              responsible_delegation_id?: string;
              meta_data_updated_at?: unknown;
              /** Format: uuid */
              responsible_user_id?: string;
              /** Format: uuid */
              creator_id?: string;
            }[];
            meta_data: {
              json: string;
              string: string;
              /** Format: uuid */
              other_media_entry_id: string;
              /** Format: uuid */
              id: string;
              /** Format: uuid */
              media_entry_id: string;
              /** Format: uuid */
              collection_id: string;
              type: string;
              meta_key_id: string;
              meta_data_updated_at: unknown;
            }[][];
            media_files: {
              /** Format: int32 */
              width: number;
              /** Format: int32 */
              height: number;
              /** Format: uuid */
              uploader_id: string;
              /** Format: uuid */
              id: string;
              extension: string;
              /** Format: uuid */
              media_entry_id: string;
              updated_at: unknown;
              media_type: string;
              conversion_profiles: unknown[];
              access_hash: string;
              created_at: unknown;
              meta_data: string;
              /** Format: int32 */
              size: number;
              guid: string;
              content_type: string;
              filename: string;
            }[];
            previews: {
              /** Format: int32 */
              width: number;
              /** Format: int32 */
              height: number;
              /** Format: uuid */
              id: string;
              thumbnail: string;
              updated_at: unknown;
              media_type: string;
              conversion_profile: string;
              created_at: unknown;
              /** Format: uuid */
              media_file_id: string;
              content_type: string;
              filename: string;
            }[][];
            col_arcs?: {
              /** Format: uuid */
              media_entry_id: string;
              /** Format: uuid */
              id: string;
              /** Format: double */
              order: number;
              /** Format: int32 */
              position: number;
              created_at: unknown;
              updated_at: unknown;
            }[];
            col_meta_data?: {
              json: string;
              string: string;
              /** Format: uuid */
              other_media_entry_id: string;
              /** Format: uuid */
              id: string;
              /** Format: uuid */
              media_entry_id: string;
              /** Format: uuid */
              collection_id: string;
              type: string;
              meta_key_id: string;
              meta_data_updated_at: unknown;
            }[];
          };
        };
      };
    };
  };
  "/api-v2/media-entry": {
    post: {
      parameters: {
        query: {
          copy_me_id?: string;
          collection_id?: string;
        };
        formData: {
          file: {
            filename: string;
            "content-type": string;
            tempfile: unknown;
            /** Format: int64 */
            size: number;
          };
        };
      };
      responses: {
        default: unknown;
      };
    };
  };
  "/api-v2/media-entry/{media_entry_id}": {
    get: {
      parameters: {
        path: {
          media_entry_id: string;
        };
      };
      responses: {
        200: {
          schema: {
            get_metadata_and_previews?: boolean;
            edit_session_updated_at?: unknown;
            get_full_size?: boolean;
            /** Format: uuid */
            id: string;
            updated_at?: unknown;
            is_published?: boolean;
            created_at?: unknown;
            /** Format: uuid */
            responsible_delegation_id?: string;
            meta_data_updated_at?: unknown;
            /** Format: uuid */
            responsible_user_id?: string;
            /** Format: uuid */
            creator_id?: string;
          };
        };
        404: {
          schema: unknown;
        };
      };
    };
    delete: {
      parameters: {
        path: {
          media_entry_id: string;
        };
      };
      responses: {
        default: unknown;
      };
    };
  };
  "/api-v2/media-entry/{media_entry_id}/publish": {
    put: {
      parameters: {
        path: {
          media_entry_id: string;
        };
      };
      responses: {
        200: {
          schema: {
            get_metadata_and_previews?: boolean;
            edit_session_updated_at?: unknown;
            get_full_size?: boolean;
            /** Format: uuid */
            id: string;
            updated_at?: unknown;
            is_published?: boolean;
            created_at?: unknown;
            /** Format: uuid */
            responsible_delegation_id?: string;
            meta_data_updated_at?: unknown;
            /** Format: uuid */
            responsible_user_id?: string;
            /** Format: uuid */
            creator_id?: string;
          };
        };
        406: {
          schema: {
            message: {
              is_publishable: boolean;
              /** Format: uuid */
              media_entry_id: string;
              has_meta_data: { [key: string]: boolean }[];
            };
          };
        };
      };
    };
  };
  "/api-v2/media-entry/{media_entry_id}/preview": {
    get: {
      parameters: {
        path: {
          media_entry_id: string;
        };
        query: {
          size?: string;
        };
      };
      responses: {
        200: {
          schema: {
            /** Format: int32 */
            width: number;
            /** Format: int32 */
            height: number;
            /** Format: uuid */
            id: string;
            thumbnail: string;
            updated_at: unknown;
            media_type: string;
            conversion_profile: string;
            created_at: unknown;
            /** Format: uuid */
            media_file_id: string;
            content_type: string;
            filename: string;
          };
        };
        404: {
          schema: unknown;
        };
      };
    };
  };
  "/api-v2/media-entry/{media_entry_id}/preview/data-stream": {
    get: {
      parameters: {
        path: {
          media_entry_id: string;
        };
        query: {
          size?: string;
        };
      };
      responses: {
        default: unknown;
      };
    };
  };
  "/api-v2/media-entry/{media_entry_id}/meta-data": {
    get: {
      parameters: {
        path: {
          media_entry_id: string;
        };
        query: {
          updated_after?: string;
          meta_keys?: string;
        };
      };
      responses: {
        200: {
          schema: unknown;
        };
      };
    };
  };
  "/api-v2/media-entry/{media_entry_id}/meta-data-related": {
    get: {
      parameters: {
        path: {
          media_entry_id: string;
        };
        query: {
          updated_after?: string;
          meta_keys?: string;
        };
      };
      responses: {
        200: {
          schema: unknown;
        };
      };
    };
  };
  "/api-v2/media-entry/{media_entry_id}/meta-datum/{meta_key_id}": {
    get: {
      parameters: {
        path: {
          media_entry_id: string;
          meta_key_id: string;
        };
      };
      responses: {
        200: {
          schema: unknown;
        };
      };
    };
    delete: {
      parameters: {
        path: {
          media_entry_id: string;
          meta_key_id: string;
        };
      };
      responses: {
        200: {
          schema: unknown;
        };
      };
    };
  };
  "/api-v2/media-entry/{media_entry_id}/meta-datum/{meta_key_id}/text": {
    put: {
      parameters: {
        path: {
          media_entry_id: string;
          meta_key_id: string;
        };
        body: {
          body: {
            string: string;
          };
        };
      };
      responses: {
        200: {
          schema: unknown;
        };
      };
    };
    post: {
      parameters: {
        path: {
          media_entry_id: string;
          meta_key_id: string;
        };
        body: {
          body: {
            string: string;
          };
        };
      };
      responses: {
        200: {
          schema: unknown;
        };
      };
    };
  };
  "/api-v2/media-entry/{media_entry_id}/meta-datum/{meta_key_id}/text-date": {
    put: {
      parameters: {
        path: {
          media_entry_id: string;
          meta_key_id: string;
        };
        body: {
          body: {
            string: string;
          };
        };
      };
      responses: {
        200: {
          schema: unknown;
        };
      };
    };
    post: {
      parameters: {
        path: {
          media_entry_id: string;
          meta_key_id: string;
        };
        body: {
          body: {
            string: string;
          };
        };
      };
      responses: {
        200: {
          schema: unknown;
        };
      };
    };
  };
  "/api-v2/media-entry/{media_entry_id}/meta-datum/{meta_key_id}/json": {
    put: {
      parameters: {
        path: {
          media_entry_id: string;
          meta_key_id: string;
        };
        body: {
          body: {
            json: unknown;
          };
        };
      };
      responses: {
        200: {
          schema: unknown;
        };
      };
    };
    post: {
      parameters: {
        path: {
          media_entry_id: string;
          meta_key_id: string;
        };
        body: {
          body: {
            json: unknown;
          };
        };
      };
      responses: {
        200: {
          schema: unknown;
        };
      };
    };
  };
  "/api-v2/media-entry/{media_entry_id}/meta-datum/{meta_key_id}/keyword": {
    get: {
      parameters: {
        path: {
          media_entry_id: string;
          meta_key_id: string;
        };
      };
      responses: {
        200: {
          schema: unknown;
        };
      };
    };
  };
  "/api-v2/media-entry/{media_entry_id}/meta-datum/{meta_key_id}/keyword/{keyword_id}": {
    post: {
      parameters: {
        path: {
          media_entry_id: string;
          meta_key_id: string;
          keyword_id: string;
        };
      };
      responses: {
        200: {
          schema: unknown;
        };
      };
    };
    delete: {
      parameters: {
        path: {
          media_entry_id: string;
          meta_key_id: string;
          keyword_id: string;
        };
      };
      responses: {
        200: {
          schema: unknown;
        };
      };
    };
  };
  "/api-v2/media-entry/{media_entry_id}/meta-datum/{meta_key_id}/people": {
    get: {
      parameters: {
        path: {
          media_entry_id: string;
          meta_key_id: string;
        };
      };
      responses: {
        200: {
          schema: unknown;
        };
      };
    };
  };
  "/api-v2/media-entry/{media_entry_id}/meta-datum/{meta_key_id}/people/{person_id}": {
    post: {
      parameters: {
        path: {
          media_entry_id: string;
          meta_key_id: string;
          person_id: string;
        };
      };
      responses: {
        200: {
          schema: unknown;
        };
      };
    };
    delete: {
      parameters: {
        path: {
          media_entry_id: string;
          meta_key_id: string;
          person_id: string;
        };
      };
      responses: {
        200: {
          schema: unknown;
        };
      };
    };
  };
  "/api-v2/media-entry/{media_entry_id}/meta-datum/{meta_key_id}/role": {
    get: {
      parameters: {
        path: {
          media_entry_id: string;
          meta_key_id: string;
        };
      };
      responses: {
        200: {
          schema: unknown;
        };
      };
    };
  };
  "/api-v2/media-entry/{media_entry_id}/meta-datum/{meta_key_id}/role/{role_id}/{person_id}": {
    delete: {
      parameters: {
        path: {
          media_entry_id: string;
          meta_key_id: string;
          role_id: string;
          person_id: string;
        };
      };
      responses: {
        200: {
          schema: unknown;
        };
      };
    };
  };
  "/api-v2/media-entry/{media_entry_id}/meta-datum/{meta_key_id}/role/{role_id}/{person_id}/{position}": {
    post: {
      parameters: {
        path: {
          media_entry_id: string;
          meta_key_id: string;
          role_id: string;
          person_id: string;
          position: number;
        };
      };
      responses: {
        200: {
          schema: unknown;
        };
      };
    };
  };
  "/api-v2/media-entry/{media_entry_id}/custom_url": {
    get: {
      parameters: {
        path: {
          media_entry_id: string;
        };
      };
      responses: {
        200: {
          schema: {
            id: string;
            is_primary: boolean;
            /** Format: uuid */
            creator_id: string;
            /** Format: uuid */
            updator_id: string;
            updated_at: unknown;
            created_at: unknown;
            /** Format: uuid */
            media_entry_id: string;
            /** Format: uuid */
            collection_id: string;
          };
        };
        404: {
          schema: unknown;
        };
      };
    };
    put: {
      parameters: {
        path: {
          media_entry_id: string;
        };
        body: {
          body: {
            id?: string;
            is_primary?: boolean;
          };
        };
      };
      responses: {
        200: {
          schema: {
            id: string;
            is_primary: boolean;
            /** Format: uuid */
            creator_id: string;
            /** Format: uuid */
            updator_id: string;
            updated_at: unknown;
            created_at: unknown;
            /** Format: uuid */
            media_entry_id: string;
            /** Format: uuid */
            collection_id: string;
          };
        };
        406: {
          schema: unknown;
        };
      };
    };
    post: {
      parameters: {
        path: {
          media_entry_id: string;
        };
        body: {
          body: {
            id: string;
            is_primary: boolean;
          };
        };
      };
      responses: {
        200: {
          schema: {
            id: string;
            is_primary: boolean;
            /** Format: uuid */
            creator_id: string;
            /** Format: uuid */
            updator_id: string;
            updated_at: unknown;
            created_at: unknown;
            /** Format: uuid */
            media_entry_id: string;
            /** Format: uuid */
            collection_id: string;
          };
        };
        406: {
          schema: unknown;
        };
      };
    };
    delete: {
      parameters: {
        path: {
          media_entry_id: string;
        };
      };
      responses: {
        200: {
          schema: {
            id: string;
            is_primary: boolean;
            /** Format: uuid */
            creator_id: string;
            /** Format: uuid */
            updator_id: string;
            updated_at: unknown;
            created_at: unknown;
            /** Format: uuid */
            media_entry_id: string;
            /** Format: uuid */
            collection_id: string;
          };
        };
        404: {
          schema: unknown;
        };
      };
    };
  };
  "/api-v2/media-entry/{media_entry_id}/edit_sessions": {
    get: {
      parameters: {
        path: {
          media_entry_id: string;
        };
      };
      responses: {
        200: {
          schema: {
            /** Format: uuid */
            id: string;
            /** Format: uuid */
            user_id: string;
            created_at: unknown;
            /** Format: uuid */
            media_entry_id: string;
            /** Format: uuid */
            collection_id: string;
          }[];
        };
        404: {
          schema: unknown;
        };
      };
    };
    post: {
      parameters: {
        path: {
          media_entry_id: string;
        };
      };
      responses: {
        200: {
          schema: {
            /** Format: uuid */
            id: string;
            /** Format: uuid */
            user_id: string;
            created_at: unknown;
            /** Format: uuid */
            media_entry_id: string;
            /** Format: uuid */
            collection_id: string;
          };
        };
        404: {
          schema: unknown;
        };
      };
    };
  };
  "/api-v2/media-entry/{media_entry_id}/favorite": {
    get: {
      parameters: {
        path: {
          media_entry_id: string;
        };
      };
      responses: {
        200: {
          schema: {
            /** Format: uuid */
            user_id: string;
            /** Format: uuid */
            media_entry_id: string;
            updated_at: unknown;
            created_at: unknown;
          };
        };
        404: {
          schema: unknown;
        };
        406: {
          schema: unknown;
        };
      };
    };
    post: {
      parameters: {
        path: {
          media_entry_id: string;
        };
      };
      responses: {
        200: {
          schema: {
            /** Format: uuid */
            user_id: string;
            /** Format: uuid */
            media_entry_id: string;
            updated_at: unknown;
            created_at: unknown;
          };
        };
        404: {
          schema: unknown;
        };
        406: {
          schema: unknown;
        };
      };
    };
    delete: {
      parameters: {
        path: {
          media_entry_id: string;
        };
      };
      responses: {
        200: {
          schema: {
            /** Format: uuid */
            user_id: string;
            /** Format: uuid */
            media_entry_id: string;
            updated_at: unknown;
            created_at: unknown;
          };
        };
        404: {
          schema: unknown;
        };
        406: {
          schema: unknown;
        };
      };
    };
  };
  "/api-v2/media-entry/{media_entry_id}/media-file": {
    get: {
      parameters: {
        path: {
          media_entry_id: string;
        };
      };
      responses: {
        200: {
          schema: {
            previews: unknown;
            /** Format: uuid */
            id: string;
            /** Format: uuid */
            media_entry_id: string;
            updated_at: unknown;
            media_type: string;
            created_at: unknown;
            /** Format: int32 */
            size: number;
            content_type: string;
            filename: string;
          };
        };
        404: {
          schema: unknown;
        };
      };
    };
  };
  "/api-v2/media-entry/{media_entry_id}/media-file/data-stream": {
    get: {
      parameters: {
        path: {
          media_entry_id: string;
        };
      };
      responses: {
        default: unknown;
      };
    };
  };
  "/api-v2/media-entry/{media_entry_id}/perms/": {
    get: {
      parameters: {
        path: {
          media_entry_id: string;
        };
      };
      responses: {
        200: {
          schema: {
            "media-resource": {
              /** Format: uuid */
              id: string;
              /** Format: uuid */
              creator_id: string;
              is_published: boolean;
              get_metadata_and_previews?: boolean;
              get_full_size?: boolean;
              /** Format: uuid */
              responsible_user_id?: string;
              /** Format: uuid */
              responsible_delegation_id?: string;
            };
            users: {
              /** Format: uuid */
              user_id: string;
              get_metadata_and_previews: boolean;
              edit_metadata: boolean;
              edit_permissions: boolean;
              /** Format: uuid */
              delegation_id: string;
              get_full_size: boolean;
              /** Format: uuid */
              id: string;
              /** Format: uuid */
              updator_id: string;
              /** Format: uuid */
              media_entry_id: string;
              updated_at: unknown;
              created_at: unknown;
            }[];
            groups: {
              get_metadata_and_previews: boolean;
              edit_metadata: boolean;
              get_full_size: boolean;
              /** Format: uuid */
              group_id: string;
              /** Format: uuid */
              id: string;
              /** Format: uuid */
              updator_id: string;
              /** Format: uuid */
              media_entry_id: string;
              updated_at: unknown;
              created_at: unknown;
            }[];
          };
        };
      };
    };
  };
  "/api-v2/media-entry/{media_entry_id}/perms/resources": {
    get: {
      parameters: {
        path: {
          media_entry_id: string;
        };
      };
      responses: {
        200: {
          schema: {
            /** Format: uuid */
            id: string;
            /** Format: uuid */
            creator_id: string;
            is_published: boolean;
            get_metadata_and_previews?: boolean;
            get_full_size?: boolean;
            /** Format: uuid */
            responsible_user_id?: string;
            /** Format: uuid */
            responsible_delegation_id?: string;
          };
        };
      };
    };
    /** Valid perm_name values are["get_metadata_and_previews" "get_full_size" "edit_metadata" "edit_permissions"] */
    put: {
      parameters: {
        path: {
          media_entry_id: string;
        };
        body: {
          body: {
            get_metadata_and_previews?: boolean;
            get_full_size?: boolean;
            /** Format: uuid */
            responsible_user_id?: string;
            /** Format: uuid */
            responsible_delegation_id?: string;
          };
        };
      };
      responses: {
        200: {
          schema: {
            /** Format: uuid */
            id: string;
            /** Format: uuid */
            creator_id: string;
            is_published: boolean;
            get_metadata_and_previews?: boolean;
            get_full_size?: boolean;
            /** Format: uuid */
            responsible_user_id?: string;
            /** Format: uuid */
            responsible_delegation_id?: string;
          };
        };
      };
    };
  };
  "/api-v2/media-entry/{media_entry_id}/perms/resource/{perm_name}/{perm_val}": {
    /** Valid perm_name values are["get_metadata_and_previews" "get_full_size" "edit_metadata" "edit_permissions"] */
    put: {
      parameters: {
        path: {
          media_entry_id: string;
          perm_name: "get_metadata_and_previews" | "get_full_size";
          perm_val: boolean;
        };
      };
      responses: {
        200: {
          schema: {
            /** Format: uuid */
            id: string;
            /** Format: uuid */
            creator_id: string;
            is_published: boolean;
            get_metadata_and_previews?: boolean;
            get_full_size?: boolean;
            /** Format: uuid */
            responsible_user_id?: string;
            /** Format: uuid */
            responsible_delegation_id?: string;
          };
        };
      };
    };
  };
  "/api-v2/media-entry/{media_entry_id}/perms/users": {
    get: {
      parameters: {
        path: {
          media_entry_id: string;
        };
      };
      responses: {
        200: {
          schema: {
            /** Format: uuid */
            user_id: string;
            get_metadata_and_previews: boolean;
            edit_metadata: boolean;
            edit_permissions: boolean;
            /** Format: uuid */
            delegation_id: string;
            get_full_size: boolean;
            /** Format: uuid */
            id: string;
            /** Format: uuid */
            updator_id: string;
            /** Format: uuid */
            media_entry_id: string;
            updated_at: unknown;
            created_at: unknown;
          }[];
        };
      };
    };
  };
  "/api-v2/media-entry/{media_entry_id}/perms/user/{user_id}": {
    get: {
      parameters: {
        path: {
          media_entry_id: string;
          user_id: string;
        };
      };
      responses: {
        200: {
          schema: {
            /** Format: uuid */
            user_id: string;
            get_metadata_and_previews: boolean;
            edit_metadata: boolean;
            edit_permissions: boolean;
            /** Format: uuid */
            delegation_id: string;
            get_full_size: boolean;
            /** Format: uuid */
            id: string;
            /** Format: uuid */
            updator_id: string;
            /** Format: uuid */
            media_entry_id: string;
            updated_at: unknown;
            created_at: unknown;
          };
        };
      };
    };
    post: {
      parameters: {
        path: {
          media_entry_id: string;
          user_id: string;
        };
        body: {
          body: {
            get_metadata_and_previews: boolean;
            get_full_size: boolean;
            edit_metadata: boolean;
            edit_permissions: boolean;
          };
        };
      };
      responses: {
        200: {
          schema: {
            /** Format: uuid */
            user_id: string;
            get_metadata_and_previews: boolean;
            edit_metadata: boolean;
            edit_permissions: boolean;
            /** Format: uuid */
            delegation_id: string;
            get_full_size: boolean;
            /** Format: uuid */
            id: string;
            /** Format: uuid */
            updator_id: string;
            /** Format: uuid */
            media_entry_id: string;
            updated_at: unknown;
            created_at: unknown;
          };
        };
      };
    };
    delete: {
      parameters: {
        path: {
          media_entry_id: string;
          user_id: string;
        };
      };
      responses: {
        200: {
          schema: {
            /** Format: uuid */
            user_id: string;
            get_metadata_and_previews: boolean;
            edit_metadata: boolean;
            edit_permissions: boolean;
            /** Format: uuid */
            delegation_id: string;
            get_full_size: boolean;
            /** Format: uuid */
            id: string;
            /** Format: uuid */
            updator_id: string;
            /** Format: uuid */
            media_entry_id: string;
            updated_at: unknown;
            created_at: unknown;
          };
        };
      };
    };
  };
  "/api-v2/media-entry/{media_entry_id}/perms/user/{user_id}/{perm_name}/{perm_val}": {
    /** Valid perm_name values are["get_metadata_and_previews" "get_full_size" "edit_metadata" "edit_permissions"] */
    put: {
      parameters: {
        path: {
          media_entry_id: string;
          user_id: string;
          perm_name:
            | "get_metadata_and_previews"
            | "edit_metadata"
            | "edit_permissions"
            | "get_full_size";
          perm_val: boolean;
        };
      };
      responses: {
        200: {
          schema: {
            /** Format: uuid */
            user_id: string;
            get_metadata_and_previews: boolean;
            edit_metadata: boolean;
            edit_permissions: boolean;
            /** Format: uuid */
            delegation_id: string;
            get_full_size: boolean;
            /** Format: uuid */
            id: string;
            /** Format: uuid */
            updator_id: string;
            /** Format: uuid */
            media_entry_id: string;
            updated_at: unknown;
            created_at: unknown;
          };
        };
      };
    };
  };
  "/api-v2/media-entry/{media_entry_id}/perms/groups": {
    get: {
      parameters: {
        path: {
          media_entry_id: string;
        };
      };
      responses: {
        200: {
          schema: {
            get_metadata_and_previews: boolean;
            edit_metadata: boolean;
            get_full_size: boolean;
            /** Format: uuid */
            group_id: string;
            /** Format: uuid */
            id: string;
            /** Format: uuid */
            updator_id: string;
            /** Format: uuid */
            media_entry_id: string;
            updated_at: unknown;
            created_at: unknown;
          }[];
        };
      };
    };
  };
  "/api-v2/media-entry/{media_entry_id}/perms/group/{group_id}": {
    get: {
      parameters: {
        path: {
          media_entry_id: string;
          group_id: string;
        };
      };
      responses: {
        200: {
          schema: {
            get_metadata_and_previews: boolean;
            edit_metadata: boolean;
            get_full_size: boolean;
            /** Format: uuid */
            group_id: string;
            /** Format: uuid */
            id: string;
            /** Format: uuid */
            updator_id: string;
            /** Format: uuid */
            media_entry_id: string;
            updated_at: unknown;
            created_at: unknown;
          };
        };
      };
    };
    post: {
      parameters: {
        path: {
          media_entry_id: string;
          group_id: string;
        };
        body: {
          body: {
            get_metadata_and_previews: boolean;
            get_full_size: boolean;
            edit_metadata: boolean;
          };
        };
      };
      responses: {
        200: {
          schema: {
            get_metadata_and_previews: boolean;
            edit_metadata: boolean;
            get_full_size: boolean;
            /** Format: uuid */
            group_id: string;
            /** Format: uuid */
            id: string;
            /** Format: uuid */
            updator_id: string;
            /** Format: uuid */
            media_entry_id: string;
            updated_at: unknown;
            created_at: unknown;
          };
        };
      };
    };
    delete: {
      parameters: {
        path: {
          media_entry_id: string;
          group_id: string;
        };
      };
      responses: {
        200: {
          schema: {
            get_metadata_and_previews: boolean;
            edit_metadata: boolean;
            get_full_size: boolean;
            /** Format: uuid */
            group_id: string;
            /** Format: uuid */
            id: string;
            /** Format: uuid */
            updator_id: string;
            /** Format: uuid */
            media_entry_id: string;
            updated_at: unknown;
            created_at: unknown;
          };
        };
      };
    };
  };
  "/api-v2/media-entry/{media_entry_id}/perms/group/{group_id}/{perm_name}/{perm_val}": {
    /** Valid perm_name values are["get_metadata_and_previews" "get_full_size" "edit_metadata" "edit_permissions"] */
    put: {
      parameters: {
        path: {
          media_entry_id: string;
          group_id: string;
          perm_name:
            | "get_metadata_and_previews"
            | "edit_metadata"
            | "get_full_size";
          perm_val: boolean;
        };
      };
      responses: {
        200: {
          schema: {
            get_metadata_and_previews: boolean;
            edit_metadata: boolean;
            get_full_size: boolean;
            /** Format: uuid */
            group_id: string;
            /** Format: uuid */
            id: string;
            /** Format: uuid */
            updator_id: string;
            /** Format: uuid */
            media_entry_id: string;
            updated_at: unknown;
            created_at: unknown;
          };
        };
      };
    };
  };
  "/api-v2/media-entry/{media_entry_id}/full_text": {
    get: {
      parameters: {
        path: {
          media_entry_id: string;
        };
      };
      responses: {
        default: unknown;
      };
    };
    put: {
      parameters: {
        path: {
          media_entry_id: string;
        };
        body: {
          body: {
            text: string;
          };
        };
      };
      responses: {
        default: unknown;
      };
    };
    post: {
      parameters: {
        path: {
          media_entry_id: string;
        };
        body: {
          body: {
            text: string;
          };
        };
      };
      responses: {
        default: unknown;
      };
    };
    delete: {
      parameters: {
        path: {
          media_entry_id: string;
        };
      };
      responses: {
        default: unknown;
      };
    };
  };
  "/api-v2/media-file/{media_file_id}": {
    get: {
      parameters: {
        path: {
          media_file_id: string;
        };
      };
      responses: {
        200: {
          schema: {
            previews: unknown;
            /** Format: uuid */
            id: string;
            /** Format: uuid */
            media_entry_id: string;
            updated_at: unknown;
            media_type: string;
            created_at: unknown;
            /** Format: int32 */
            size: number;
            content_type: string;
            filename: string;
          };
        };
        404: {
          schema: unknown;
        };
      };
    };
  };
  "/api-v2/media-file/{media_file_id}/data-stream": {
    get: {
      parameters: {
        path: {
          media_file_id: string;
        };
      };
      responses: {
        default: unknown;
      };
    };
  };
  "/api-v2/meta-data/{meta_datum_id}": {
    /** Get meta-data for id. TODO: should return 404, if no such meta-data role exists. */
    get: {
      parameters: {
        path: {
          meta_datum_id: string;
        };
      };
      responses: {
        200: {
          schema: unknown;
        };
        401: {
          schema: unknown;
        };
        403: {
          schema: unknown;
        };
        500: {
          schema: unknown;
        };
      };
    };
  };
  "/api-v2/meta-data/{meta_datum_id}/data-stream": {
    /** Get meta-data data-stream. */
    get: {
      parameters: {
        path: {
          meta_datum_id: string;
        };
      };
      responses: {
        default: unknown;
      };
    };
  };
  "/api-v2/meta-data/{meta_datum_id}/role": {
    /** Get meta-data role for id. TODO: should return 404, if no such meta-data role exists. */
    get: {
      parameters: {
        path: {
          meta_datum_id: string;
        };
      };
      responses: {
        200: {
          schema: unknown;
        };
      };
    };
  };
  "/api-v2/previews/{preview_id}": {
    get: {
      parameters: {
        path: {
          preview_id: string;
        };
      };
      responses: {
        default: unknown;
      };
    };
  };
  "/api-v2/previews/{preview_id}/data-stream": {
    get: {
      parameters: {
        path: {
          preview_id: string;
        };
      };
      responses: {
        default: unknown;
      };
    };
  };
  "/api-v2/roles/": {
    /** Get list of roles. */
    get: {
      parameters: {
        query: {
          page?: number;
          count?: number;
        };
      };
      responses: {
        200: {
          schema: {
            roles: {
              /** Format: uuid */
              id: string;
              meta_key_id: string;
              labels: {
                de?: string;
                en?: string;
              };
              /** Format: uuid */
              creator_id?: string;
              created_at?: unknown;
              updated_at?: unknown;
            }[];
          };
        };
      };
    };
  };
  "/api-v2/roles/{id}": {
    /** Get a role by id. Returns 404, if no such role exists. */
    get: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        200: {
          schema: {
            /** Format: uuid */
            id: string;
            meta_key_id: string;
            labels: {
              de?: string;
              en?: string;
            };
            /** Format: uuid */
            creator_id?: string;
            created_at?: unknown;
            updated_at?: unknown;
          };
        };
        404: {
          schema: unknown;
        };
      };
    };
  };
  "/api-v2/users/": {
    /** Get list of users ids. */
    get: {
      parameters: {
        query: {
          autocomplete?: string;
          institutional_id?: string;
          searchable?: string;
          email?: string;
          count?: number;
          person_id?: string;
          institution?: string;
          notes?: string;
          page?: number;
          full_data?: boolean;
        };
      };
      responses: {
        200: {
          schema: {
            users: {
              autocomplete?: string;
              institutional_id?: string;
              settings?: unknown;
              searchable?: string;
              is_deactivated?: boolean;
              /** Format: uuid */
              id: string;
              email?: string;
              /** Format: uuid */
              person_id?: string;
              /** Format: uuid */
              accepted_usage_terms_id?: string;
              updated_at?: unknown;
              institution?: string;
              created_at?: unknown;
              notes?: string;
              login?: string;
              last_signed_in_at?: unknown;
            }[];
          };
        };
      };
    };
  };
  "/api-v2/users/{id}": {
    /** Get a user by id. Returns 404, if no such users exists. */
    get: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        200: {
          schema: {
            autocomplete?: string;
            institutional_id?: string;
            settings?: unknown;
            searchable?: string;
            is_deactivated?: boolean;
            /** Format: uuid */
            id: string;
            email?: string;
            /** Format: uuid */
            person_id?: string;
            /** Format: uuid */
            accepted_usage_terms_id?: string;
            updated_at?: unknown;
            institution?: string;
            created_at?: unknown;
            notes?: string;
            login?: string;
            last_signed_in_at?: unknown;
          };
        };
        404: {
          schema: unknown;
        };
      };
    };
  };
  "/api-v2/groups/": {
    /** Get list of group ids. Paging is used as you get a limit of 100 entries. */
    get: {
      parameters: {
        query: {
          institutional_id?: string;
          institutional_name?: string;
          searchable?: string;
          id?: string;
          count?: number;
          person_id?: string;
          name?: string;
          type?: string;
          page?: number;
          full_data?: boolean;
        };
      };
      responses: {
        200: {
          schema: {
            groups: {
              /** Format: uuid */
              id: string;
              name?: string;
              type?: string;
              institutional_id?: string;
              institutional_name?: string;
              /** Format: uuid */
              person_id?: string;
              searchable?: string;
            }[];
          };
        };
      };
    };
  };
  "/api-v2/groups/{id}": {
    /** Get group by id. Returns 404, if no such group exists. */
    get: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        200: {
          schema: {
            /** Format: uuid */
            id: string;
            name?: string;
            type?: string;
            institutional_id?: string;
            institutional_name?: string;
            /** Format: uuid */
            person_id?: string;
            searchable?: string;
          };
        };
        404: {
          schema: unknown;
        };
      };
    };
  };
  "/api-v2/usage-terms/": {
    get: {
      parameters: {
        query: {
          full_data?: boolean;
        };
      };
      responses: {
        200: {
          schema: {
            /** Format: uuid */
            id: string;
            title?: string;
            version?: string;
            intro?: string;
            body?: string;
            created_at?: unknown;
            updated_at?: unknown;
          }[];
        };
      };
    };
  };
  "/api-v2/usage-terms/{id}": {
    get: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        200: {
          schema: {
            /** Format: uuid */
            id: string;
            title?: string;
            version?: string;
            intro?: string;
            body?: string;
            created_at?: unknown;
            updated_at?: unknown;
          };
        };
        404: {
          schema: unknown;
        };
      };
    };
  };
  "/api-v2/vocabularies/": {
    /** Get list of vocabularies ids. */
    get: {
      parameters: {
        query: {
          page?: number;
        };
      };
      responses: {
        200: {
          schema: {
            vocabularies: {
              id: string;
              enabled_for_public_view: boolean;
              enabled_for_public_use: boolean;
              /** Format: int32 */
              position: number;
              labels: {
                de?: string;
                en?: string;
              };
              descriptions: {
                de?: string;
                en?: string;
              };
              admin_comment?: string;
            }[];
          };
        };
      };
    };
  };
  "/api-v2/vocabularies/{id}": {
    /** Get a vocabulary by id. Returns 404, if no such vocabulary exists. */
    get: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        200: {
          schema: {
            id: string;
            enabled_for_public_view: boolean;
            enabled_for_public_use: boolean;
            /** Format: int32 */
            position: number;
            labels: {
              de?: string;
              en?: string;
            };
            descriptions: {
              de?: string;
              en?: string;
            };
            admin_comment?: string;
          };
        };
        404: {
          schema: unknown;
        };
      };
    };
  };
  "/api-v2/workflows/": {
    get: {
      parameters: {
        query: {
          full_data?: boolean;
        };
      };
      responses: {
        200: {
          schema: {
            /** Format: uuid */
            id: string;
            name?: string;
            is_active?: boolean;
            configuration?: unknown;
            /** Format: uuid */
            creator_id?: string;
            created_at?: unknown;
            updated_at?: unknown;
          }[];
        };
        406: {
          schema: unknown;
        };
      };
    };
    post: {
      parameters: {
        body: {
          body: {
            name: string;
            is_active?: boolean;
            configuration?: unknown;
          };
        };
      };
      responses: {
        200: {
          schema: {
            /** Format: uuid */
            id: string;
            name?: string;
            is_active?: boolean;
            configuration?: unknown;
            /** Format: uuid */
            creator_id?: string;
            created_at?: unknown;
            updated_at?: unknown;
          };
        };
        406: {
          schema: unknown;
        };
      };
    };
  };
  "/api-v2/workflows/{id}": {
    get: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        200: {
          schema: {
            /** Format: uuid */
            id: string;
            name?: string;
            is_active?: boolean;
            configuration?: unknown;
            /** Format: uuid */
            creator_id?: string;
            created_at?: unknown;
            updated_at?: unknown;
          };
        };
        404: {
          schema: unknown;
        };
      };
    };
    put: {
      parameters: {
        path: {
          id: string;
        };
        body: {
          body: {
            name?: string;
            is_active?: boolean;
            configuration?: unknown;
          };
        };
      };
      responses: {
        200: {
          schema: {
            /** Format: uuid */
            id: string;
            name?: string;
            is_active?: boolean;
            configuration?: unknown;
            /** Format: uuid */
            creator_id?: string;
            created_at?: unknown;
            updated_at?: unknown;
          };
        };
        404: {
          schema: unknown;
        };
        406: {
          schema: unknown;
        };
      };
    };
    delete: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        200: {
          schema: {
            /** Format: uuid */
            id: string;
            name?: string;
            is_active?: boolean;
            configuration?: unknown;
            /** Format: uuid */
            creator_id?: string;
            created_at?: unknown;
            updated_at?: unknown;
          };
        };
        404: {
          schema: unknown;
        };
      };
    };
  };
  "/api-v2/management/status": {
    get: {
      responses: {
        default: unknown;
      };
    };
  };
  "/api-v2/management/shutdown": {
    post: {
      responses: {
        default: unknown;
      };
    };
  };
  "/test/exception": {
    get: {
      responses: {
        default: unknown;
      };
    };
  };
  "/test/ok": {
    get: {
      responses: {
        default: unknown;
      };
    };
  };
}

export interface operations {}

export interface external {}

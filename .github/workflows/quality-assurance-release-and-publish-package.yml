# Quality assurance, release and publish package workflow
#
# This workflow handles the complete release pipeline: quality assurance, GitHub release creation,
# and package publishing to GitHub Packages. It's triggered automatically when version tags are pushed.
#
# Design decisions:
# 1. **Tag-based triggering**: Only runs on version tags (v*) to ensure releases are intentional
#    and follow semantic versioning conventions.
#
# 2. **All-in-one pipeline**: Combines quality assurance, release creation, and publishing in a single workflow
#    to ensure atomicity - if any step fails, the entire release process is aborted.
#
# 3. **Version validation**: Strict validation between package.json version and git tag prevents
#    deployment of mismatched versions that could cause confusion or dependency issues.
#
# 4. **Pre-release detection**: Automatically detects pre-release versions (containing "-dev.")
#    and marks them appropriately in GitHub releases to prevent accidental production usage.
#
# 5. **Comprehensive release notes**: Generates detailed release information including:
#    - Build metadata (date, SHA, commit count)
#    - Contributor attribution
#    - Installation instructions
#    - Usage examples
#
# 6. **GitHub packages publishing**: Automatically publishes to GitHub Packages with proper
#    access controls and authentication via GITHUB_TOKEN.
#
# 7. **Concurrency control**: Prevents parallel releases for the same tag to avoid race
#    conditions during package publishing and release creation.

name: Quality assurance, release and publish package

on:
  push:
    tags:
      - 'v*'

# Prevent parallel releases for the same tag to ensure data consistency
# and avoid race conditions during package publishing
concurrency:
  group: layer-release-${{ github.ref }}
  cancel-in-progress: false

jobs:
  quality-assurance-release-and-publish:
    name: Quality assurance, release and publish package
    runs-on: ubuntu-latest

    permissions:
      contents: write
      packages: write
      # Required for npm provenance generation
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # Required for git history analysis (tag comparison, contributor extraction, commit counting)
          fetch-depth: 0

      - name: Validate package version vs. release tag
        run: |
          PKG=$(npm pkg get version | tr -d '"')
          TAG=${GITHUB_REF#refs/tags/}
          echo "pkg=$PKG" >> $GITHUB_OUTPUT
          echo "tag=${TAG#v}" >> $GITHUB_OUTPUT

          echo "Version Validation: package.json ($PKG) vs. git tag (${TAG#v})"

          if [ "$PKG" != "${TAG#v}" ]; then
            echo "::error::Version mismatch: package.json ($PKG) â‰  git tag (${TAG})"
            exit 1
          fi

          echo "Version validation passed: $PKG"

      - name: Setup Node and install dependencies
        uses: ./.github/actions/setup-node-dependencies

      - name: Prepare Nuxt environment
        run: npm run dev:prepare

      - name: Run quality assurance
        uses: ./.github/actions/quality-assurance

      - name: Build application
        run: npm run build

      - name: Get tag info
        id: tag_info
        uses: ./.github/actions/extract-tag-info

      - name: Generate release info
        id: release_info
        uses: ./.github/actions/generate-release-info
        with:
          tag_name: ${{ steps.tag_info.outputs.tag_name }}

      - name: Create release
        uses: ./.github/actions/create-github-release
        with:
          tag_name: ${{ steps.tag_info.outputs.tag_name }}
          release_title: ${{ steps.tag_info.outputs.release_title }}
          release_body: ${{ steps.tag_info.outputs.release_body }}
          is_prerelease: ${{ steps.tag_info.outputs.is_prerelease }}
          build_date: ${{ steps.release_info.outputs.build_date }}
          build_sha: ${{ steps.release_info.outputs.build_sha }}
          commit_count: ${{ steps.release_info.outputs.commit_count }}
          contributors: ${{ steps.release_info.outputs.contributors }}
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish package to GitHub Packages
        uses: ./.github/actions/publish-package
        with:
          is_prerelease: ${{ steps.tag_info.outputs.is_prerelease }}
          node_auth_token: ${{ secrets.GITHUB_TOKEN }}

name: Quality Assurance, Release & Publish Package

on:
  push:
    tags:
      - 'v*'

# Prevent parallel releases for the same tag to ensure data consistency
# and avoid race conditions during package publishing
concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false

jobs:
  qa-release-and-publish:
    name: Quality Assurance, Release & Publish Package
    runs-on: ubuntu-latest

    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # Required for git history analysis (tag comparison, contributor extraction, commit counting)
          fetch-depth: 0

      - name: Setup Node.js + npm cache
        uses: actions/setup-node@v4
        with:
          node-version-file: .nvmrc
          cache: npm
          cache-dependency-path: package-lock.json
          registry-url: https://npm.pkg.github.com

      - name: Get tag info
        id: tag_info
        run: |
          # Get tag name
          TAG_NAME=${GITHUB_REF#refs/tags/}

          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT

          # Simple pre-release detection
          if [[ "$TAG_NAME" == *"-dev."* ]]; then
            echo "is_prerelease=true" >> $GITHUB_OUTPUT
            echo "release_title=$TAG_NAME" >> $GITHUB_OUTPUT
            echo "release_body=Pre-release - Use with caution in production environments." >> $GITHUB_OUTPUT
          else
            echo "is_prerelease=false" >> $GITHUB_OUTPUT
            echo "release_title=$TAG_NAME" >> $GITHUB_OUTPUT
            echo "release_body=Stable Release - Ready for production use." >> $GITHUB_OUTPUT
          fi

          echo "Release: $TAG_NAME (Pre-release: $(if [[ "$TAG_NAME" == *"-dev."* ]]; then echo "true"; else echo "false"; fi))"

      - name: Install dependencies
        run: npm ci

      - name: Prepare Nuxt environment
        run: npm run dev:prepare

      - name: Validate package version vs. release tag
        run: |
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          RELEASE_TAG=${GITHUB_REF#refs/tags/}
          echo "Version Validation:"
          echo "Package version: v$PACKAGE_VERSION"
          echo "Release tag:     $RELEASE_TAG"

          if [ "v$PACKAGE_VERSION" != "$RELEASE_TAG" ]; then
            echo "::error::Version mismatch detected!"
            echo "::error::Expected package.json version: v$PACKAGE_VERSION"
            echo "::error::Actual git tag:                $RELEASE_TAG"
            echo "::error::"
            echo "::error::This usually means:"
            echo "::error::1. The release script didn't run properly"
            echo "::error::2. Manual changes were made to package.json"
            echo "::error::3. Git tag was created manually without version bump"
            echo "::error::"
            echo "::error::Troubleshooting steps:"
            echo "::error::1. Check recent commits: git log --oneline -5"
            echo "::error::2. Verify git tags: git tag -l | tail -5"
            echo "::error::3. Run release script: npm run release:patch"
            echo "::error::4. Ensure package.json and git tag match"
            echo "::error::Please ensure the release script completed successfully."
            exit 1
          fi
          echo "Version validation passed: $RELEASE_TAG"

      - name: Run linting
        run: npm run lint

      - name: Type check
        run: npm run check:types

      - name: Check for unused code & dependencies
        run: npm run check:unused

      - name: Run unit tests
        run: npm run test

      - name: Build application
        run: npm run build

      - name: Generate release info
        id: release_info
        run: |
          TAG_NAME="${{ steps.tag_info.outputs.tag_name }}"

          # Get last tag with more robust fallback
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || git rev-list --max-parents=0 HEAD 2>/dev/null || echo "HEAD")

          # Get commit count since last release
          if ! COMMIT_COUNT=$(git rev-list --count ${LAST_TAG}..HEAD 2>/dev/null); then
            echo "Warning: Could not determine commit count, using fallback"
            COMMIT_COUNT="unknown"
          fi

          # Get contributors for this release with enhanced error handling
          if ! CONTRIBUTORS=$(git log ${LAST_TAG}..HEAD --format='%an' 2>/dev/null | sort -u | paste -sd ', ' -); then
            echo "Warning: Could not determine contributors for this release"
            CONTRIBUTORS="Unable to determine"
          fi

          # Fallback if contributors is empty
          if [ -z "$CONTRIBUTORS" ]; then
            CONTRIBUTORS="No contributors found"
          fi

          # Generate build info
          BUILD_DATE=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
          BUILD_SHA=$(git rev-parse --short HEAD)

          echo "commit_count=$COMMIT_COUNT" >> $GITHUB_OUTPUT
          echo "contributors=$CONTRIBUTORS" >> $GITHUB_OUTPUT
          echo "build_date=$BUILD_DATE" >> $GITHUB_OUTPUT
          echo "build_sha=$BUILD_SHA" >> $GITHUB_OUTPUT

          echo "Release Statistics:"
          echo "Commits: $COMMIT_COUNT"
          echo "Contributors: $CONTRIBUTORS"
          echo "Build SHA: $BUILD_SHA"
          echo "Last tag used for comparison: $LAST_TAG"

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.tag_info.outputs.tag_name }}
          name: ${{ steps.tag_info.outputs.release_title }}
          body: |
            ${{ steps.tag_info.outputs.release_body }}

            ## Release Information

            - **Version**: `${{ steps.tag_info.outputs.tag_name }}`
            - **Build Date**: ${{ steps.release_info.outputs.build_date }}
            - **Commit SHA**: [`${{ steps.release_info.outputs.build_sha }}`](https://github.com/${{ github.repository }}/commit/${{ github.sha }})
            - **Commits in this release**: ${{ steps.release_info.outputs.commit_count }}
            - **Contributors**: ${{ steps.release_info.outputs.contributors }}

            ## Installation

            ```bash
            npm install @orc-hfg/madek-api-nuxt-layer@${{ steps.tag_info.outputs.tag_name }}
            ```

            ### Using in your project

            ```typescript
            // nuxt.config.ts
            export default defineNuxtConfig({
              extends: ['@orc-hfg/madek-api-nuxt-layer']
            })
            ```

            ## Automatic Publishing

            This release will be automatically published to GitHub Packages and is available for installation immediately.

            ## Links

            - [Documentation](https://github.com/${{ github.repository }}#readme)
            - [Report Issues](https://github.com/${{ github.repository }}/issues)

            ---

            *This release was created automatically by GitHub Actions.*
          draft: false
          prerelease: ${{ steps.tag_info.outputs.is_prerelease == 'true' }}
          generate_release_notes: false
          make_latest: ${{ steps.tag_info.outputs.is_prerelease == 'false' }}

      - name: Publish package to GitHub Packages
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          npm publish --access public
          echo "Package published successfully to GitHub Packages"
